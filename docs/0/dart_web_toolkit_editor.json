{"dependencies":[{"kind":"library","name":"dart:core","id":"dart.core","comment":"\n\nBuilt-in types, collections,\nand other core functionality for every Dart program.\n\nThis library is automatically imported.\n\nSome classes in this library,\nsuch as [String] and [num],\nsupport Dart's built-in data types.\nOther classes, such as [List] and [Map], provide data structures\nfor managing collections of objects.\nAnd still other classes represent commonly used types of data\nsuch as URIs, dates and times, and errors.\n\n## Numbers and booleans\n\n[int] and [double] provide support for Dart's built-in numerical data types:\nintegers and double-precision floating point numbers, respectively.\nAn object of type [bool] is either true or false.\nVariables of these types can be constructed from literals:\n\n    int meaningOfLife = 42;\n    double valueOfPi  = 3.141592;\n    bool visible      = true;\n\n## Strings and regular expressions\n\nA [String] is immutable and represents a sequence of characters.\n\n    String shakespeareQuote = \"All the world's a stage, ...\";\n\n[StringBuffer] provides a way to construct strings efficiently.\n\n    StringBuffer moreShakespeare = new StringBuffer();\n    moreShakespeare.write('And all the men and women ');\n    moreShakespeare.write('merely players; ...');\n\nThe String and StringBuffer classes implement string concatenation,\ninterpolation, and other string manipulation features.\n\n    String philosophy = 'Live on ';\n    String get palindrome => philosophy + philosophy.split('').reversed.join();\n\n[RegExp] implements Dart regular expressions,\nwhich provide a grammar for matching patterns within text.\nFor example, here's a regular expression that matches\na string of one or more digits:\n\n    var numbers = new RegExp(r'\\d+');\n\nDart regular expressions have the same syntax and semantics as\nJavaScript regular expressions. See\n<http://ecma-international.org/ecma-262/5.1/#sec-15.10>\nfor the specification of JavaScript regular expressions.\n\n## Collections\n\nThe dart:core library provides basic collections,\nsuch as [List], [Map], and [Set].\n\nA List is an ordered collection of objects, with a length.\nLists are sometimes called arrays.\nUse a List when you need to access objects by index.\n\n    List superheroes = [ 'Batman', 'Superman', 'Harry Potter' ];\n\nA Set is an unordered collection of unique objects.\nYou cannot get an item by index (position).\nAdding a duplicate item has no effect.\n\n    Set villians = new Set();\n    villians.add('Joker');\n    villians.addAll( ['Lex Luther', 'Voldemort'] );\n\nA Map is an unordered collection of key-value pairs.\nMaps are sometimes called associative arrays because\nmaps associate a key to some value for easy retrieval.\nKeys are unique.\nUse a Map when you need to access objects\nby a unique identifier.\n\n    Map sidekicks = { 'Batman': 'Robin',\n                      'Superman': 'Lois Lane',\n                      'Harry Potter': 'Ron and Hermione' };\n\nIn addition to these classes,\ndart:core contains [Iterable],\nan interface that defines functionality\ncommon in collections of objects.\nExamples include the ability\nto run a function on each element in the collection,\nto apply a test to each element, \nto retrieve an object, and to determine length.\n\nIterable is implemented by List and Set,\nand used by Map for its keys and values.\n\nFor other kinds of collections, check out the\n[dart:collection](#dart-collection) library.\n\n## Date and time\n\nUse [DateTime] to represent a point in time\nand [Duration] to represent a span of time.\n\nYou can create DateTime objects with constructors\nor by parsing a correctly formatted string.\n\n    DateTime now = new DateTime.now();\n    DateTime berlinWallFell = new DateTime(1989, 11, 9);\n    DateTime moonLanding = DateTime.parse(\"1969-07-20\");\n\nCreate a Duration object specifying the individual time units.\n\n    Duration timeRemaining = new Duration(hours:56, minutes:14);\n\nIn addition to DateTime and Duration,\ndart:core contains the [Stopwatch] class for measuring elapsed time.\n    \n## Uri\n\nA [Uri] object represents a uniform resource identifier,\nwhich identifies a resource on the web.\n\n    Uri dartlang = Uri.parse('http://dartlang.org/');\n    \n## Errors\n\nThe [Error] class represents the occurrence of an error\nduring runtime.\nSubclasses of this class represent specific kinds of errors.\n\n## Other documentation\n\nFor more information about how to use the built-in types, refer to\n[Built-in Types](http://www.dartlang.org/docs/dart-up-and-running/contents/ch02.html#built-in-types)\nin Chapter 2 of\n[Dart: Up and Running](http://www.dartlang.org/docs/dart-up-and-running/).\n\nAlso, see\n[dart:core - Numbers, Collections, Strings, and More](http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-dartcore---strings-collections-and-more)\nfor more coverage of classes in this package.\n\nThe \n[Dart Language Specification](https://www.dartlang.org/docs/spec/)\nprovides technical details.\n","children":[{"kind":"class","name":"Object","id":"Object","comment":"\nEverything in Dart is an [Object].\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"==","id":"==1()","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nOverride this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:\n\n * Total: It must return a boolean for all arguments. It should never throw\n   or return `null`.\n\n * Reflexive: For all objects `o`, `o == o` must be true.\n\n * Symmetric: For all objects `o1` and `o2`, `o1 == o2` and `o2 == o1` must\n   either both be true, or both be false.\n\n * Transitive: For all objects `o1`, `o2`, and `o3`, if `o1 == o2` and\n   `o2 == o3` are true, then `o1 == o3` must be true.\n\nThe method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","children":[{"kind":"param","name":"other","id":"other"}],"line":"48"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","comment":"\nReturns a string representation of this object.\n","line":"67"},{"kind":"method","name":"noSuchMethod","id":"noSuchMethod1()","comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","children":[{"ref":{"name":"Invocation","refId":"dart.core/Invocation"},"kind":"param","name":"invocation","id":"invocation"}],"line":"79"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"hashCode","id":"hashCode","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","line":"62"},{"ref":{"name":"Type","refId":"dart.core/Type"},"kind":"property","name":"runtimeType","id":"runtimeType","comment":"\nA representation of the runtime type of the object.\n","line":"84"},{"kind":"constructor","name":"","id":"0()","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","line":"18"}],"uri":"dart-sdk/lib/core/object.dart","line":"10"}],"uri":"dart-sdk/lib/core/core.dart","line":"153"},{"kind":"library","id":"dart_web_toolkit_event","comment":"\nDart Web Toolkit Event library.\n","children":[{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"TakesValue","id":"TakesValue","comment":"\nImplemented by objects that hold a value.\n\n@param <V> value type\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setValue","id":"setValue2()","comment":"\nSets the value.\nFires [ValueChangeEvent] when\nfireEvents is true and the new value does not equal the existing value.\n\n@param value a value object of type V\n@see #getValue()\n@param fireEvents fire events if true and value is new\n","children":[{"ref":{"name":"V","refId":"dart_web_toolkit_event/TakesValue/V"},"kind":"param","name":"val","id":"val"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"kind":"param","name":"fireEvents","id":"fireEvents"}],"line":"22"},{"returnType":{"name":"V","refId":"dart_web_toolkit_event/TakesValue/V"},"kind":"method","name":"getValue","id":"getValue0()","comment":"\nReturns the current value.\n\n@return the value as an object of type V\n@see #setValue\n","line":"30"},{"kind":"typeparam","name":"V","id":"V"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/event/takes_value.dart","line":"11"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/event.dart","line":"7"}],"kind":"library","id":"dart_web_toolkit_editor","comment":"\nDart Web Toolkit Editor library.\n","children":[{"superclass":{"name":"Editor","refId":"dart_web_toolkit_editor/Editor","arguments":[{"name":"T","refId":"dart_web_toolkit_editor/HasEditorDelegate/T"}]},"isAbstract":true,"kind":"class","name":"HasEditorDelegate","id":"HasEditorDelegate","comment":"\nIndicates that an Editor requires an EditorDelegate.\n\n@param <T> the type of object the EditorDelegate operates on\n","children":[{"kind":"typeparam","name":"T","id":"T"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/editor/has_editor_delegate.dart","line":"11"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"EditorDelegate","id":"EditorDelegate","comment":"\nBinds an individual Editor to the backing service. Every Editor has a peer\nEditorDelegate. If an Editor implements the {@link ValueAwareEditor}\ninterface, the EditorDriver will make the delegate available through the\n{@link ValueAwareEditor#setDelegate} method.\n\n@param <T> the type of object the delegate can accept\n@see com.google.gwt.editor.client.testing.MockEditorDelegate\n","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"getPath","id":"getPath0()","comment":"\nReturns the Editor's path, relative to the root object.\n\n@return the path as a String\n","line":"22"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"recordError","id":"recordError3()","comment":"\nThis method should be called from {@link ValueAwareEditor#flush()} or\n{@link LeafValueEditor#getValue()} to record an error that will be reported\nto the nearest super-Editor that implements the {@link HasEditorErrors}\ninterface.\n\n@param message a textual description of the error\n@param value the value to be returned by {@link EditorError#getValue()} or\n         <code>null</code> if the value currently associated with the\n         Editor should be used\n@param userData an arbitrary object, possibly <code>null</code>, that can\n         be retrieved with {@link EditorError#getUserData()}\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"message","id":"message"},{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"value","id":"value"},{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"userData","id":"userData"}],"line":"37"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setDirty","id":"setDirty1()","comment":"\nToggle the dirty-state flag for the Editor.\n<p>\nThe dirty state of an Editor will be automatically cleared any time the\nDriver's {@code edit()} or {@code flush()} methods are called.\n<p>\nThe dirty state will be automatically calculated for\n{@link LeafValueEditor} instances based on an {@link Object#equals(Object)}\ncomparison of {@link LeafValueEditor#getValue()} and the value last passed\nto {@link LeafValueEditor#setValue(Object)}, however a clean state can be\noverridden by calling {@code setDirty(true)}.\n\n@param dirty the dirty state of the Editor\n","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"dirty","id":"dirty"}],"line":"53"},{"returnType":{"name":"HandlerRegistration","refId":"dart_web_toolkit_event/HandlerRegistration"},"kind":"method","name":"subscribe","id":"subscribe0()","comment":"\nRegister for notifications if object being edited is updated. Not all\nbackends support subscriptions and will return <code>null</code>.\n<p>\nThe notification will occur via {@link ValueAwareEditor#onPropertyChange}\nif the backend supports in-place property updates, otherwise updates will\nbe passed via {@link ValueAwareEditor#setValue}.\n\n@return a HandlerRegistration to unsubscribe from the notifications or\n        <code>null</code> if the delegate does not support subscription\n","line":"66"},{"kind":"typeparam","name":"T","id":"T"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/editor/editor_delegate.dart","line":"15"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Editor","id":"Editor","comment":"\nDescribes an editor whose behavior is not altered by the value being\ndisplayed.\n<p>\nEditors, which may be classes or interfaces, may expose their sub-editors in\none or more of the following ways:\n<ul>\n<li>An instance field with at least package visibility whose name exactly is\nthe property that will be edited or <code><em>propertyName</em>Editor</code>.\n</li>\n<li>A no-arg method with at least package visibility whose name exactly is\nthe property that will be edited or <code><em>propertyName</em>Editor</code>.\n</li>\n<li>The {@link Path} annotation may be used on the field or accessor method\nto specify a dotted path or to bypass the implicit naming convention.</li>\n<li>Sub-Editors may be null. In this case, the Editor framework will ignore\nthese sub-editors.</li>\n</ul>\nAny exposed field or method whose type is Editor may also use the\n{@link IsEditor} interface to provide an Editor instance. This allows view\nobjects to be written that can be attached to an Editor hierarchy without the\nview directly implementing an Editor interface.\n\n@param <T> the type of object the editor displays.\n","children":[{"kind":"typeparam","name":"T","id":"T"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/editor/editor.dart","line":"31"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"interfaces":[{"name":"TakesValue","refId":"dart_web_toolkit_event/TakesValue","arguments":[{"name":"T","refId":"dart_web_toolkit_editor/LeafValueEditor/T"}]},{"name":"Editor","refId":"dart_web_toolkit_editor/Editor","arguments":[{"name":"T","refId":"dart_web_toolkit_editor/LeafValueEditor/T"}]}],"kind":"class","name":"LeafValueEditor","id":"LeafValueEditor","comment":"\nUsed to edit non-object or immutable values. The Editor framework will not\ndescend into a LeafValueEditor.\n\n@param <T> The type of primitive value\n@see com.google.gwt.editor.client.adapters.SimpleEditor\n","children":[{"kind":"typeparam","name":"T","id":"T"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/editor/leaf_value_editor.dart","line":"13"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"IsEditor","id":"IsEditor","comment":"\nExtended by view objects that wish to participate in an Editor hierarchy, but\nthat do not implement the {@link Editor} contract directly. The primary\nadvantage of the IsEditor interface is that is allows composition of behavior\nwithout the need to implement delegate methods for every interface\nimplemented by the common editor logic.\n<p>\nFor example, an editor Widget that supports adding and removing elements from\na list might wish to re-use the provided\n{@link com.google.gwt.editor.client.adapters.ListEditor ListEditor}\ncontroller. It might be roughly built as:\n\n<pre>\nclass MyListEditor extends Composite implements IsEditor&lt;ListEditor&lt;Foo, FooEditor>> {\n  private ListEditor&lt;Foo, FooEditor> controller = ListEditor.of(new FooEditorSource());\n  public ListEditor&lt;Foo, FooEditor> asEditor() {return controller;}\n  void onAddButtonClicked() { controller.getList().add(new Foo()); }\n  void onClearButtonClicked() { controller.getList().clear(); }\n}\n</pre>\nBy implementing only the one <code>asEditor()</code> method, the\n<code>MyListEditor</code> type is able to incorporate the\n<code>ListEditor</code> behavior without needing to write delegate methods\nfor every method in <code>ListEditor</code>.\n<p>\nIt is legal for a type to implement both Editor and IsEditor. In this case,\nthe Editor returned from {@link #asEditor()} will be a co-Editor of the\nIsEditor instance.\n\n@param <E> the type of Editor the view object will provide\n@see CompositeEditor\n","children":[{"kind":"typeparam","name":"E","id":"E"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/editor/is_editor.dart","line":"38"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/editor.dart","line":"7"}
{"dependencies":[{"uri":"dart-sdk/lib/core/core.dart","name":"dart:core","id":"dart.core","children":[{"comment":"\nEverything in Dart is an [Object].\n","uri":"dart-sdk/lib/core/object.dart","name":"Object","id":"Object","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","name":"==","id":"==1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"29","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nReturns a string representation of this object.\n","name":"toString","id":"toString0()","line":"48","kind":"method"},{"comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","name":"noSuchMethod","id":"noSuchMethod1()","children":[{"ref":{"refId":"dart.core/Invocation","name":"Invocation"},"name":"invocation","id":"invocation","kind":"param"}],"line":"60","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","name":"hashCode","id":"hashCode","line":"43","kind":"property"},{"ref":{"refId":"dart.core/Type","name":"Type"},"comment":"\nA representation of the runtime type of the object.\n","name":"runtimeType","id":"runtimeType","line":"65","kind":"property"},{"comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","name":"Object","id":"Object0()","line":"18","kind":"constructor"}],"line":"10","kind":"class"}],"line":"5","kind":"library"},{"comment":"\nDart Web Toolkit Event library.\n","uri":"file:///home/akserg/Workspace/dart_web_toolkit/lib/event.dart","id":"dart_web_toolkit_event","children":[{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nImplemented by objects that hold a value.\n\n@param <V> value type\n","uri":"file:///home/akserg/Workspace/dart_web_toolkit/lib/src/event/takes_value.dart","name":"TakesValue","id":"TakesValue","children":[{"returnType":{"refId":"void","name":"void"},"comment":"\nSets the value.\nFires [ValueChangeEvent] when\nfireEvents is true and the new value does not equal the existing value.\n\n@param value a value object of type V\n@see #getValue()\n@param fireEvents fire events if true and value is new\n","name":"setValue","id":"setValue2()","children":[{"ref":{"refId":"dart_web_toolkit_event/TakesValue/V","name":"V"},"name":"val","id":"val","kind":"param"},{"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"false","name":"fireEvents","id":"fireEvents","kind":"param"}],"line":"22","kind":"method"},{"returnType":{"refId":"dart_web_toolkit_event/TakesValue/V","name":"V"},"comment":"\nReturns the current value.\n\n@return the value as an object of type V\n@see #setValue\n","name":"getValue","id":"getValue0()","line":"30","kind":"method"},{"name":"V","id":"V","kind":"typeparam"}],"line":"11","kind":"class"}],"line":"7","kind":"library"}],"comment":"\nDart Web Toolkit Editor library.\n","uri":"file:///home/akserg/Workspace/dart_web_toolkit/lib/editor.dart","id":"dart_web_toolkit_editor","children":[{"isAbstract":true,"superclass":{"refId":"dart_web_toolkit_editor/Editor","arguments":[{"refId":"dart_web_toolkit_editor/HasEditorDelegate/T","name":"T"}],"name":"Editor"},"comment":"\nIndicates that an Editor requires an EditorDelegate.\n\n@param <T> the type of object the EditorDelegate operates on\n","uri":"file:///home/akserg/Workspace/dart_web_toolkit/lib/src/editor/has_editor_delegate.dart","name":"HasEditorDelegate","id":"HasEditorDelegate","children":[{"name":"T","id":"T","kind":"typeparam"}],"line":"11","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nBinds an individual Editor to the backing service. Every Editor has a peer\nEditorDelegate. If an Editor implements the {@link ValueAwareEditor}\ninterface, the EditorDriver will make the delegate available through the\n{@link ValueAwareEditor#setDelegate} method.\n\n@param <T> the type of object the delegate can accept\n@see com.google.gwt.editor.client.testing.MockEditorDelegate\n","uri":"file:///home/akserg/Workspace/dart_web_toolkit/lib/src/editor/editor_delegate.dart","name":"EditorDelegate","id":"EditorDelegate","children":[{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nReturns the Editor's path, relative to the root object.\n\n@return the path as a String\n","name":"getPath","id":"getPath0()","line":"22","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nThis method should be called from {@link ValueAwareEditor#flush()} or\n{@link LeafValueEditor#getValue()} to record an error that will be reported\nto the nearest super-Editor that implements the {@link HasEditorErrors}\ninterface.\n\n@param message a textual description of the error\n@param value the value to be returned by {@link EditorError#getValue()} or\n         <code>null</code> if the value currently associated with the\n         Editor should be used\n@param userData an arbitrary object, possibly <code>null</code>, that can\n         be retrieved with {@link EditorError#getUserData()}\n","name":"recordError","id":"recordError3()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"message","id":"message","kind":"param"},{"ref":{"refId":"dart.core/Object","name":"Object"},"name":"value","id":"value","kind":"param"},{"ref":{"refId":"dart.core/Object","name":"Object"},"name":"userData","id":"userData","kind":"param"}],"line":"37","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nToggle the dirty-state flag for the Editor.\n<p>\nThe dirty state of an Editor will be automatically cleared any time the\nDriver's {@code edit()} or {@code flush()} methods are called.\n<p>\nThe dirty state will be automatically calculated for\n{@link LeafValueEditor} instances based on an {@link Object#equals(Object)}\ncomparison of {@link LeafValueEditor#getValue()} and the value last passed\nto {@link LeafValueEditor#setValue(Object)}, however a clean state can be\noverridden by calling {@code setDirty(true)}.\n\n@param dirty the dirty state of the Editor\n","name":"setDirty","id":"setDirty1()","children":[{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"dirty","id":"dirty","kind":"param"}],"line":"53","kind":"method"},{"returnType":{"refId":"dart_web_toolkit_event/HandlerRegistration","name":"HandlerRegistration"},"comment":"\nRegister for notifications if object being edited is updated. Not all\nbackends support subscriptions and will return <code>null</code>.\n<p>\nThe notification will occur via {@link ValueAwareEditor#onPropertyChange}\nif the backend supports in-place property updates, otherwise updates will\nbe passed via {@link ValueAwareEditor#setValue}.\n\n@return a HandlerRegistration to unsubscribe from the notifications or\n        <code>null</code> if the delegate does not support subscription\n","name":"subscribe","id":"subscribe0()","line":"66","kind":"method"},{"name":"T","id":"T","kind":"typeparam"}],"line":"15","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nDescribes an editor whose behavior is not altered by the value being\ndisplayed.\n<p>\nEditors, which may be classes or interfaces, may expose their sub-editors in\none or more of the following ways:\n<ul>\n<li>An instance field with at least package visibility whose name exactly is\nthe property that will be edited or <code><em>propertyName</em>Editor</code>.\n</li>\n<li>A no-arg method with at least package visibility whose name exactly is\nthe property that will be edited or <code><em>propertyName</em>Editor</code>.\n</li>\n<li>The {@link Path} annotation may be used on the field or accessor method\nto specify a dotted path or to bypass the implicit naming convention.</li>\n<li>Sub-Editors may be null. In this case, the Editor framework will ignore\nthese sub-editors.</li>\n</ul>\nAny exposed field or method whose type is Editor may also use the\n{@link IsEditor} interface to provide an Editor instance. This allows view\nobjects to be written that can be attached to an Editor hierarchy without the\nview directly implementing an Editor interface.\n\n@param <T> the type of object the editor displays.\n","uri":"file:///home/akserg/Workspace/dart_web_toolkit/lib/src/editor/editor.dart","name":"Editor","id":"Editor","children":[{"name":"T","id":"T","kind":"typeparam"}],"line":"31","kind":"class"},{"isAbstract":true,"interfaces":[{"refId":"dart_web_toolkit_event/TakesValue","arguments":[{"refId":"dart_web_toolkit_editor/LeafValueEditor/T","name":"T"}],"name":"TakesValue"},{"refId":"dart_web_toolkit_editor/Editor","arguments":[{"refId":"dart_web_toolkit_editor/LeafValueEditor/T","name":"T"}],"name":"Editor"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nUsed to edit non-object or immutable values. The Editor framework will not\ndescend into a LeafValueEditor.\n\n@param <T> The type of primitive value\n@see com.google.gwt.editor.client.adapters.SimpleEditor\n","uri":"file:///home/akserg/Workspace/dart_web_toolkit/lib/src/editor/leaf_value_editor.dart","name":"LeafValueEditor","id":"LeafValueEditor","children":[{"name":"T","id":"T","kind":"typeparam"}],"line":"13","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nExtended by view objects that wish to participate in an Editor hierarchy, but\nthat do not implement the {@link Editor} contract directly. The primary\nadvantage of the IsEditor interface is that is allows composition of behavior\nwithout the need to implement delegate methods for every interface\nimplemented by the common editor logic.\n<p>\nFor example, an editor Widget that supports adding and removing elements from\na list might wish to re-use the provided\n{@link com.google.gwt.editor.client.adapters.ListEditor ListEditor}\ncontroller. It might be roughly built as:\n\n<pre>\nclass MyListEditor extends Composite implements IsEditor&lt;ListEditor&lt;Foo, FooEditor>> {\n  private ListEditor&lt;Foo, FooEditor> controller = ListEditor.of(new FooEditorSource());\n  public ListEditor&lt;Foo, FooEditor> asEditor() {return controller;}\n  void onAddButtonClicked() { controller.getList().add(new Foo()); }\n  void onClearButtonClicked() { controller.getList().clear(); }\n}\n</pre>\nBy implementing only the one <code>asEditor()</code> method, the\n<code>MyListEditor</code> type is able to incorporate the\n<code>ListEditor</code> behavior without needing to write delegate methods\nfor every method in <code>ListEditor</code>.\n<p>\nIt is legal for a type to implement both Editor and IsEditor. In this case,\nthe Editor returned from {@link #asEditor()} will be a co-Editor of the\nIsEditor instance.\n\n@param <E> the type of Editor the view object will provide\n@see CompositeEditor\n","uri":"file:///home/akserg/Workspace/dart_web_toolkit/lib/src/editor/is_editor.dart","name":"IsEditor","id":"IsEditor","children":[{"name":"E","id":"E","kind":"typeparam"}],"line":"38","kind":"class"}],"line":"7","kind":"library"}
{"dependencies":[{"kind":"library","name":"dart:core","id":"dart.core","comment":"\n\nBuilt-in types, collections,\nand other core functionality for every Dart program.\n\nThis library is automatically imported.\n\nSome classes in this library,\nsuch as [String] and [num],\nsupport Dart's built-in data types.\nOther classes, such as [List] and [Map], provide data structures\nfor managing collections of objects.\nAnd still other classes represent commonly used types of data\nsuch as URIs, dates and times, and errors.\n\n## Numbers and booleans\n\n[int] and [double] provide support for Dart's built-in numerical data types:\nintegers and double-precision floating point numbers, respectively.\nAn object of type [bool] is either true or false.\nVariables of these types can be constructed from literals:\n\n    int meaningOfLife = 42;\n    double valueOfPi  = 3.141592;\n    bool visible      = true;\n\n## Strings and regular expressions\n\nA [String] is immutable and represents a sequence of characters.\n\n    String shakespeareQuote = \"All the world's a stage, ...\";\n\n[StringBuffer] provides a way to construct strings efficiently.\n\n    StringBuffer moreShakespeare = new StringBuffer();\n    moreShakespeare.write('And all the men and women ');\n    moreShakespeare.write('merely players; ...');\n\nThe String and StringBuffer classes implement string concatenation,\ninterpolation, and other string manipulation features.\n\n    String philosophy = 'Live on ';\n    String get palindrome => philosophy + philosophy.split('').reversed.join();\n\n[RegExp] implements Dart regular expressions,\nwhich provide a grammar for matching patterns within text.\nFor example, here's a regular expression that matches\na string of one or more digits:\n\n    var numbers = new RegExp(r'\\d+');\n\nDart regular expressions have the same syntax and semantics as\nJavaScript regular expressions. See\n<http://ecma-international.org/ecma-262/5.1/#sec-15.10>\nfor the specification of JavaScript regular expressions.\n\n## Collections\n\nThe dart:core library provides basic collections,\nsuch as [List], [Map], and [Set].\n\nA List is an ordered collection of objects, with a length.\nLists are sometimes called arrays.\nUse a List when you need to access objects by index.\n\n    List superheroes = [ 'Batman', 'Superman', 'Harry Potter' ];\n\nA Set is an unordered collection of unique objects.\nYou cannot get an item by index (position).\nAdding a duplicate item has no effect.\n\n    Set villians = new Set();\n    villians.add('Joker');\n    villians.addAll( ['Lex Luther', 'Voldemort'] );\n\nA Map is an unordered collection of key-value pairs.\nMaps are sometimes called associative arrays because\nmaps associate a key to some value for easy retrieval.\nKeys are unique.\nUse a Map when you need to access objects\nby a unique identifier.\n\n    Map sidekicks = { 'Batman': 'Robin',\n                      'Superman': 'Lois Lane',\n                      'Harry Potter': 'Ron and Hermione' };\n\nIn addition to these classes,\ndart:core contains [Iterable],\nan interface that defines functionality\ncommon in collections of objects.\nExamples include the ability\nto run a function on each element in the collection,\nto apply a test to each element, \nto retrieve an object, and to determine length.\n\nIterable is implemented by List and Set,\nand used by Map for its keys and values.\n\nFor other kinds of collections, check out the\n[dart:collection](#dart-collection) library.\n\n## Date and time\n\nUse [DateTime] to represent a point in time\nand [Duration] to represent a span of time.\n\nYou can create DateTime objects with constructors\nor by parsing a correctly formatted string.\n\n    DateTime now = new DateTime.now();\n    DateTime berlinWallFell = new DateTime(1989, 11, 9);\n    DateTime moonLanding = DateTime.parse(\"1969-07-20\");\n\nCreate a Duration object specifying the individual time units.\n\n    Duration timeRemaining = new Duration(hours:56, minutes:14);\n\nIn addition to DateTime and Duration,\ndart:core contains the [Stopwatch] class for measuring elapsed time.\n    \n## Uri\n\nA [Uri] object represents a uniform resource identifier,\nwhich identifies a resource on the web.\n\n    Uri dartlang = Uri.parse('http://dartlang.org/');\n    \n## Errors\n\nThe [Error] class represents the occurrence of an error\nduring runtime.\nSubclasses of this class represent specific kinds of errors.\n\n## Other documentation\n\nFor more information about how to use the built-in types, refer to\n[Built-in Types](http://www.dartlang.org/docs/dart-up-and-running/contents/ch02.html#built-in-types)\nin Chapter 2 of\n[Dart: Up and Running](http://www.dartlang.org/docs/dart-up-and-running/).\n\nAlso, see\n[dart:core - Numbers, Collections, Strings, and More](http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-dartcore---strings-collections-and-more)\nfor more coverage of classes in this package.\n\nThe \n[Dart Language Specification](http://www.dartlang.org/docs/spec/)\nprovides technical details.\n","children":[{"kind":"class","name":"Object","id":"Object","comment":"\nThe base class for all Dart objects.\n\nBecause Object is the root of the Dart class hierarchy,\nevery other Dart class is a subclass of Object.\n\nWhen you define a class, you should override [toString]\nto return a string describing an instance of that class.\nYou might also need to define [hashCode] and [==], as described in the\n[Implementing map keys]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-implementing-map-keys)\nsection of the [library tour]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html).\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"==","id":"==1()","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nOverride this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:\n\n * Total: It must return a boolean for all arguments. It should never throw\n   or return `null`.\n\n * Reflexive: For all objects `o`, `o == o` must be true.\n\n * Symmetric: For all objects `o1` and `o2`, `o1 == o2` and `o2 == o1` must\n   either both be true, or both be false.\n\n * Transitive: For all objects `o1`, `o2`, and `o3`, if `o1 == o2` and\n   `o2 == o3` are true, then `o1 == o3` must be true.\n\nThe method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","children":[{"kind":"param","name":"other","id":"other"}],"line":"59"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","comment":"\nReturns a string representation of this object.\n","line":"78"},{"kind":"method","name":"noSuchMethod","id":"noSuchMethod1()","comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","children":[{"ref":{"name":"Invocation","refId":"dart.core/Invocation"},"kind":"param","name":"invocation","id":"invocation"}],"line":"90"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"hashCode","id":"hashCode","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","line":"73"},{"ref":{"name":"Type","refId":"dart.core/Type"},"kind":"property","name":"runtimeType","id":"runtimeType","comment":"\nA representation of the runtime type of the object.\n","line":"95"},{"kind":"constructor","name":"","id":"0()","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","line":"29"}],"uri":"dart-sdk/lib/core/object.dart","line":"21"}],"uri":"dart-sdk/lib/core/core.dart","line":"153"}],"kind":"library","id":"dart_web_toolkit_validation","comment":"\nDart Web Toolkit Validation library.\n","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"substitute","id":"substitute3()","comment":"\nConvinient method to substitute string with named parameters. Method find \nthe parameter [from] in curly brackets and change it [to] value converted to \nstring.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"input","id":"input"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"from","id":"from"},{"kind":"param","name":"to","id":"to"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/validation/validator.dart","line":"201"},{"superclass":{"name":"WidgetValidator","refId":"dart_web_toolkit_validation/WidgetValidator"},"kind":"class","name":"SocialSecurityNumberValidator","id":"SocialSecurityNumberValidator","comment":"\nThe SocialSecurityNumberValidator class validates that a String is a valid United \nStates Social Security number. It does not check whether it is an existing \nSocial Security number.\n","children":[{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"ValidationResult","refId":"dart_web_toolkit_validation/ValidationResult"}]},"kind":"method","name":"doValidation","id":"doValidation1()","comment":"\n Executes the validation logic of this validator to validate a Social Security number. \n For an invalid result returns an List of [ValidationResult] \n objects, with one ValidationResult object for each field examined by the \n validator that failed validation.\n\n You must override this method in a subclass of a validator class.\n","children":[{"kind":"param","name":"value","id":"value"}],"line":"60"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"ValidationResult","refId":"dart_web_toolkit_validation/ValidationResult"}]},"kind":"method","name":"_validateSocialSecurity","id":"_validateSocialSecurity1()","comment":"\nValidate [value] and  return List of [ValidationResult] objects, with one\nValidationResult object for each field examined by the validator.\n","children":[{"kind":"param","name":"value","id":"value"}],"isPrivate":true,"line":"77"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"allowedFormatChars","id":"allowedFormatChars","comment":"\nSpecifies the set of formatting characters allowed in the input.\nBy default equals \"-\"\n","line":"17"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"invalidCharError","id":"invalidCharError","comment":"\nError message when the value contains characters other than digits and \nformatting characters defined by the [allowedFormatChars] property.\nBy default equals \"You entered invalid characters in your Social Security number.\"\n","line":"24"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"wrongFormatError","id":"wrongFormatError","comment":"\nError message when the value is incorrectly formatted.\nBy default equals \"The Social Security number must be 9 digits or in the form NNN-NN-NNNN.\"\n","line":"30"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"zeroGroupError","id":"zeroGroupError","comment":"\nError message when the value contains an invalid Social Security number.\nBy default equals \"Invalid Social Security number; not allowed all zeros in any digit group.\"\n","line":"36"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"wrongAreaError","id":"wrongAreaError","comment":"\nError message when the value contains an invalid Social Security number.\nBy default equals \"Invalid Social Security number; not allowed Area Numbers 666 and 900-999.\"\n","line":"42"},{"kind":"constructor","name":"","id":"6()","children":[{"ref":{"name":"Widget","refId":"dart_web_toolkit_ui/Widget"},"kind":"param","name":"widget","id":"widget"},{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"\"-\"","isOptional":true,"isNamed":true,"initializedField":{"name":"allowedFormatChars","refId":"dart_web_toolkit_validation/SocialSecurityNumberValidator/allowedFormatChars"},"kind":"param","name":"allowedFormatChars","id":"allowedFormatChars","line":"45"},{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"\"You entered invalid characters in your Social Security number.\"","isOptional":true,"isNamed":true,"initializedField":{"name":"invalidCharError","refId":"dart_web_toolkit_validation/SocialSecurityNumberValidator/invalidCharError"},"kind":"param","name":"invalidCharError","id":"invalidCharError","line":"46"},{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"\"The Social Security number must be 9 digits or in the form NNN-NN-NNNN.\"","isOptional":true,"isNamed":true,"initializedField":{"name":"wrongFormatError","refId":"dart_web_toolkit_validation/SocialSecurityNumberValidator/wrongFormatError"},"kind":"param","name":"wrongFormatError","id":"wrongFormatError","line":"47"},{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"\"Invalid Social Security number; not allowed all zeros in any digit group.\"","isOptional":true,"isNamed":true,"initializedField":{"name":"zeroGroupError","refId":"dart_web_toolkit_validation/SocialSecurityNumberValidator/zeroGroupError"},"kind":"param","name":"zeroGroupError","id":"zeroGroupError","line":"48"},{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"\"Invalid Social Security number; not allowed Area Numbers 666 and 900-999.\"","isOptional":true,"isNamed":true,"initializedField":{"name":"wrongAreaError","refId":"dart_web_toolkit_validation/SocialSecurityNumberValidator/wrongAreaError"},"kind":"param","name":"wrongAreaError","id":"wrongAreaError","line":"49"}],"line":"44"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/validation/social_security_number_validator.dart","line":"11"},{"superclass":{"name":"WidgetValidator","refId":"dart_web_toolkit_validation/WidgetValidator"},"kind":"class","name":"PhoneNumberValidator","id":"PhoneNumberValidator","comment":"\nThe PhoneNumberValidator class validates that a string is a valid phone number.\nA valid phone number contains at least 10 digits, plus additional formatting \ncharacters. The validator does not check if the phone number is an actual \nactive phone number.\n","children":[{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"ValidationResult","refId":"dart_web_toolkit_validation/ValidationResult"}]},"kind":"method","name":"doValidation","id":"doValidation1()","comment":"\n Executes the validation logic of this validator to validate a phone number. \n For an invalid result returns an List of [ValidationResult] \n objects, with one ValidationResult object for each field examined by the \n validator that failed validation.\n\n You must override this method in a subclass of a validator class.\n","children":[{"kind":"param","name":"value","id":"value"}],"line":"54"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"ValidationResult","refId":"dart_web_toolkit_validation/ValidationResult"}]},"kind":"method","name":"_validatePhoneNumber","id":"_validatePhoneNumber1()","comment":"\nValidate [value] and  return List of [ValidationResult] objects, with one\nValidationResult object for each field examined by the validator.\n","children":[{"kind":"param","name":"value","id":"value"}],"isPrivate":true,"line":"71"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"allowedFormatChars","id":"allowedFormatChars","comment":"\nThe set of allowable formatting characters.\nBy default equals \"()- .+\"\n","line":"18"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"minDigits","id":"minDigits","comment":"\nMinimum number of digits for a valid phone number. A value of null means \nthis property is ignored.\nBy default equals 10.\n","line":"25"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"invalidCharError","id":"invalidCharError","comment":"\nError message when the value contains invalid characters.\nBy default equals \"Your telephone number contains invalid characters.\"\n","line":"31"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"wrongLengthError","id":"wrongLengthError","comment":"\nError message when the value has fewer than 10 digits.\nBy default equals \"Your telephone number must contain at least {minDigits} digits.\"\n","line":"37"},{"kind":"constructor","name":"","id":"5()","children":[{"ref":{"name":"Widget","refId":"dart_web_toolkit_ui/Widget"},"kind":"param","name":"widget","id":"widget"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"10","isOptional":true,"isNamed":true,"initializedField":{"name":"minDigits","refId":"dart_web_toolkit_validation/PhoneNumberValidator/minDigits"},"kind":"param","name":"minDigits","id":"minDigits","line":"40"},{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"\"()- .+\"","isOptional":true,"isNamed":true,"initializedField":{"name":"allowedFormatChars","refId":"dart_web_toolkit_validation/PhoneNumberValidator/allowedFormatChars"},"kind":"param","name":"allowedFormatChars","id":"allowedFormatChars","line":"41"},{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"\"Your telephone number contains invalid characters.\"","isOptional":true,"isNamed":true,"initializedField":{"name":"invalidCharError","refId":"dart_web_toolkit_validation/PhoneNumberValidator/invalidCharError"},"kind":"param","name":"invalidCharError","id":"invalidCharError","line":"42"},{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"\"Your telephone number must contain at least {minDigits} digits.\"","isOptional":true,"isNamed":true,"initializedField":{"name":"wrongLengthError","refId":"dart_web_toolkit_validation/PhoneNumberValidator/wrongLengthError"},"kind":"param","name":"wrongLengthError","id":"wrongLengthError","line":"43"}],"line":"39"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/validation/phone_number_validator.dart","line":"12"},{"superclass":{"name":"ValidationResult","refId":"dart_web_toolkit_validation/ValidationResult"},"kind":"class","name":"RegExpValidationResult","id":"RegExpValidationResult","comment":"\nThe RegExpValidationResult class is a child class of the ValidationResult \nclass, and contains additional properties used with regular expressions.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"isFinal":true,"kind":"variable","name":"matchedIndex","id":"matchedIndex","comment":"\nAn integer that contains the starting index in the input String of the match.\n","line":"147"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"matchedString","id":"matchedString","comment":"\nA String that contains the substring of the input String that matches the \nregular expression.\n","line":"153"},{"ref":{"name":"List","refId":"dart.core/List"},"kind":"variable","name":"matchedSubstrings","id":"matchedSubstrings","comment":"\nAn Array of Strings that contains parenthesized substring matches, if any. \nIf no substring matches are found, this result is of length 0.\nUse [matchedSubStrings[0]] to access the first substring match.\n","line":"160"},{"kind":"constructor","name":"","id":"5()","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"isError","id":"isError"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"message","id":"message"},{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"\"\"","isOptional":true,"isNamed":true,"initializedField":{"name":"matchedString","refId":"dart_web_toolkit_validation/RegExpValidationResult/matchedString"},"kind":"param","name":"matchedString","id":"matchedString","line":"163"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"isNamed":true,"initializedField":{"name":"matchedIndex","refId":"dart_web_toolkit_validation/RegExpValidationResult/matchedIndex"},"kind":"param","name":"matchedIndex","id":"matchedIndex","line":"164"},{"ref":{"name":"List","refId":"dart.core/List"},"defaultValue":"null","isOptional":true,"isNamed":true,"initializedField":{"name":"matchedSubstrings","refId":"dart_web_toolkit_validation/RegExpValidationResult/matchedSubstrings"},"kind":"param","name":"matchedSubstrings","id":"matchedSubstrings","line":"165"}],"line":"162"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/validation/reg_exp_validator.dart","line":"142"},{"superclass":{"name":"WidgetValidator","refId":"dart_web_toolkit_validation/WidgetValidator"},"kind":"class","name":"RegExpValidator","id":"RegExpValidator","comment":"\nThe RegExpValidator class lets you use a regular expression to validate a field. \nYou pass a regular expression to the validator using the [expression] property, \nand additional flags to control the regular expression pattern matching using the [flags] property. \n\nThe validation is successful if the validator can find a match of the regular \nexpression in the field to validate. A validation error occurs when the \nvalidator finds no match.\n","children":[{"returnType":{"name":"void","refId":"void"},"isSetter":true,"kind":"method","name":"expression=","id":"expression=1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"value","id":"value"}],"line":"26"},{"returnType":{"name":"void","refId":"void"},"isSetter":true,"kind":"method","name":"multiLine=","id":"multiLine=1()","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"value","id":"value"}],"line":"38"},{"returnType":{"name":"void","refId":"void"},"isSetter":true,"kind":"method","name":"caseSensitive=","id":"caseSensitive=1()","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"value","id":"value"}],"line":"50"},{"returnType":{"name":"RegExp","refId":"dart.core/RegExp"},"kind":"method","name":"_createRegExp","id":"_createRegExp0()","comment":"\nCreate RegExp as combination of [expression], [multiLine] and [caseSensitive].\n","isPrivate":true,"line":"83"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"ValidationResult","refId":"dart_web_toolkit_validation/ValidationResult"}]},"kind":"method","name":"doValidation","id":"doValidation1()","comment":"\n Executes the validation logic of this validatorto validate a regular \n expression. For an invalid result returns an List of [ValidationResult] \n objects, with one ValidationResult object for each field examined by the \n validator that failed validation.\n\n You must override this method in a subclass of a validator class.\n","children":[{"kind":"param","name":"value","id":"value"}],"line":"97"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"ValidationResult","refId":"dart_web_toolkit_validation/ValidationResult"}]},"kind":"method","name":"_validateRegExpression","id":"_validateRegExpression1()","comment":"\nValidate [value] and  return List of [ValidationResult] objects, with one\nValidationResult object for each field examined by the validator.\n","children":[{"kind":"param","name":"value","id":"value"}],"isPrivate":true,"line":"114"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"expression","id":"expression","line":"31"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"multiLine","id":"multiLine","line":"43"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"caseSensitive","id":"caseSensitive","line":"55"},{"ref":{"name":"RegExp","refId":"dart.core/RegExp"},"kind":"variable","name":"_regExp","id":"_regExp","isPrivate":true,"line":"17"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"_foundMatch","id":"_foundMatch","isPrivate":true,"line":"19"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"_expression","id":"_expression","comment":"\nThe regular expression to use for validation.\n","isPrivate":true,"line":"24"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"_multiLine","id":"_multiLine","comment":"\nThe regular expression multiLine flag to use when matching.\n","isPrivate":true,"line":"36"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"_caseSensitive","id":"_caseSensitive","comment":"\nThe regular expression caseSensitive flag to use when matching.\n","isPrivate":true,"line":"48"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"noExpressionError","id":"noExpressionError","comment":"\nError message when there is no regular expression specifed. \nBy default value is \"The expression is missing.\"\n","line":"61"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"noMatchError","id":"noMatchError","comment":"\nError message when there are no matches to the regular expression. \nBy default value is \"The field is invalid.\"\n","line":"67"},{"kind":"constructor","name":"","id":"6()","children":[{"ref":{"name":"Widget","refId":"dart_web_toolkit_ui/Widget"},"kind":"param","name":"widget","id":"widget"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"expression","id":"expression"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"isNamed":true,"kind":"param","name":"multiLine","id":"multiLine","line":"70"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"isNamed":true,"kind":"param","name":"caseSensitive","id":"caseSensitive","line":"71"},{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"\"The expression is missing.\"","isOptional":true,"isNamed":true,"initializedField":{"name":"noExpressionError","refId":"dart_web_toolkit_validation/RegExpValidator/noExpressionError"},"kind":"param","name":"noExpressionError","id":"noExpressionError","line":"72"},{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"\"The field is invalid.\"","isOptional":true,"isNamed":true,"initializedField":{"name":"noMatchError","refId":"dart_web_toolkit_validation/RegExpValidator/noMatchError"},"kind":"param","name":"noMatchError","id":"noMatchError","line":"73"}],"line":"69"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/validation/reg_exp_validator.dart","line":"15"},{"superclass":{"name":"WidgetValidator","refId":"dart_web_toolkit_validation/WidgetValidator"},"kind":"class","name":"NumberValidator","id":"NumberValidator","comment":"\nThe NumberValidator class ensures that a String represents a valid number.\nIt can ensure that the input falls:\n- within a given range (specified by [minValue] and [maxValue]),\n- is an integer (specified by [domain]),\n- is non-negative (specified by [allowNegative]),\n- does not exceed the specified [precision].\n\nThe validator correctly validates formatted numbers (e.g., \"12,345.67\")\nand you can customize the [thousandsSeparator] and\n[decimalSeparator] properties for internationalization.\n","children":[{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"ValidationResult","refId":"dart_web_toolkit_validation/ValidationResult"}]},"kind":"method","name":"doValidation","id":"doValidation1()","comment":"\n Override of the base class [doValidation()] method \n to validate a number.\n\n <p>You do not call this method directly;\n Flex calls it as part of performing a validation.\n If you create a custom Validator class, you must implement this method. </p>\n\n @param value Object to validate.\n\n @return An Array of ValidationResult objects, with one ValidationResult \n object for each field examined by the validator. \n \n @langversion 3.0\n @playerversion Flash 9\n @playerversion AIR 1.1\n @productversion Flex 3\n\n\n Executes the validation logic of this validatorto validate a number. \n Invalid result returns an List of [ValidationResult] objects, with one \n ValidationResult object for each field examined by the validator that \n failed validation.\n\n You must override this method in a subclass of a validator class.\n","children":[{"kind":"param","name":"value","id":"value"}],"line":"175"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"ValidationResult","refId":"dart_web_toolkit_validation/ValidationResult"}]},"kind":"method","name":"_validateNumber","id":"_validateNumber1()","comment":"\nValidate [value] and  return List of [ValidationResult] objects, with one\nValidationResult object for each field examined by the validator.\n","children":[{"kind":"param","name":"value","id":"value"}],"isPrivate":true,"line":"191"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"variable","name":"INTEGER","id":"INTEGER","line":"20"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"variable","name":"DOUBLE","id":"DOUBLE","line":"21"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"allowNegative","id":"allowNegative","comment":"\nSpecifies whether negative numbers are permitted.\nAllowed by default.\n","line":"27"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"decimalSeparator","id":"decimalSeparator","comment":"\nThe character used to separate the whole from the fractional part of the \nnumber. Cannot be a digit and must be distinct from the [thousandsSeparator].\nBy default equals \".\"\n","line":"34"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"domain","id":"domain","comment":"\nType of number to be validated. \nPermitted values are [NumberValidator.INTEGER] and [NumberValidator.DOUBLE].\nBy default equals [NumberValidator.DOUBLE].\n","line":"41"},{"ref":{"name":"num","refId":"dart.core/num"},"kind":"variable","name":"maxValue","id":"maxValue","comment":"\nMaximum value for a valid number. A value of null means there is no maximum.\n","line":"46"},{"ref":{"name":"num","refId":"dart.core/num"},"kind":"variable","name":"minValue","id":"minValue","comment":"\nMinimum value for a valid number. A value of null means there is no minimum.\n","line":"51"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"precision","id":"precision","comment":"\nThe maximum number of digits allowed to follow the decimal point.\nCan be any nonnegative integer.\n","line":"57"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"thousandsSeparator","id":"thousandsSeparator","comment":"\nThe character used to separate thousands in the whole part of the number.\nCannot be a digit and must be distinct from the [decimalSeparator].\n","line":"63"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"decimalPointCountError","id":"decimalPointCountError","comment":"\nError message when the decimal separator character occurs more than once.\nBy default equals \"The decimal separator can occur only once.\"\n","line":"69"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"exceedsMaxError","id":"exceedsMaxError","comment":"\nError message when the value exceeds the [maxValue] property.\nBy default equals \"The number entered is too large.\"\n","line":"75"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"integerError","id":"integerError","comment":"\nError message when the number must be an integer, as defined by the \n[domain] property.\nBy default it's equals \"The number must be an integer.\" \n","line":"82"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"invalidCharError","id":"invalidCharError","comment":"\nError message when the value contains invalid characters.\n\nBy default it equals \"The input contains invalid characters.\"\n","line":"89"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"invalidFormatCharsError","id":"invalidFormatCharsError","comment":"\nError message when the value contains invalid format characters, which \nmeans that it contains a digit or minus sign (-) as a separator character, \nor it contains two or more consecutive separator characters.\n\nBy default it equals \"One of the formatting parameters is invalid.\"\n","line":"98"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"lowerThanMinError","id":"lowerThanMinError","comment":"\nError message when the value is less than [minValue].\n\nBy default it equals \"The amount entered is too small.\"\n","line":"105"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"negativeError","id":"negativeError","comment":"\nError message when the value is negative and the [allowNegative] \nproperty is [false].\n\nBy default it equals \"The amount may not be negative.\"\n","line":"113"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"precisionError","id":"precisionError","comment":"\nError message when the value has a precision that exceeds the value defined \n by the precision property.\n\n By \"default\" it equals \"The amount entered has too many digits beyond the decimal point.\"\n","line":"121"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"separationError","id":"separationError","comment":"\nError message when the thousands separator is in the wrong location.\n\nBy default it equals \"The thousands separator must be followed by three digits.\"\n","line":"128"},{"kind":"constructor","name":"","id":"17()","children":[{"ref":{"name":"Widget","refId":"dart_web_toolkit_ui/Widget"},"kind":"param","name":"widget","id":"widget"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"isNamed":true,"initializedField":{"name":"allowNegative","refId":"dart_web_toolkit_validation/NumberValidator/allowNegative"},"kind":"param","name":"allowNegative","id":"allowNegative","line":"131"},{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"\"The decimal separator can only occur once.\"","isOptional":true,"isNamed":true,"initializedField":{"name":"decimalPointCountError","refId":"dart_web_toolkit_validation/NumberValidator/decimalPointCountError"},"kind":"param","name":"decimalPointCountError","id":"decimalPointCountError","line":"132"},{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"\".\"","isOptional":true,"isNamed":true,"initializedField":{"name":"decimalSeparator","refId":"dart_web_toolkit_validation/NumberValidator/decimalSeparator"},"kind":"param","name":"decimalSeparator","id":"decimalSeparator","line":"133"},{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"NumberValidator.DOUBLE","isOptional":true,"isNamed":true,"initializedField":{"name":"domain","refId":"dart_web_toolkit_validation/NumberValidator/domain"},"kind":"param","name":"domain","id":"domain","line":"134"},{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"\"The number entered is too large.\"","isOptional":true,"isNamed":true,"initializedField":{"name":"exceedsMaxError","refId":"dart_web_toolkit_validation/NumberValidator/exceedsMaxError"},"kind":"param","name":"exceedsMaxError","id":"exceedsMaxError","line":"135"},{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"\"The number must be an integer.\"","isOptional":true,"isNamed":true,"initializedField":{"name":"integerError","refId":"dart_web_toolkit_validation/NumberValidator/integerError"},"kind":"param","name":"integerError","id":"integerError","line":"136"},{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"\"The input contains invalid characters.\"","isOptional":true,"isNamed":true,"initializedField":{"name":"invalidCharError","refId":"dart_web_toolkit_validation/NumberValidator/invalidCharError"},"kind":"param","name":"invalidCharError","id":"invalidCharError","line":"137"},{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"\"One of the formatting parameters is invalid.\"","isOptional":true,"isNamed":true,"initializedField":{"name":"invalidFormatCharsError","refId":"dart_web_toolkit_validation/NumberValidator/invalidFormatCharsError"},"kind":"param","name":"invalidFormatCharsError","id":"invalidFormatCharsError","line":"138"},{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"\"The amount entered is too small.\"","isOptional":true,"isNamed":true,"initializedField":{"name":"lowerThanMinError","refId":"dart_web_toolkit_validation/NumberValidator/lowerThanMinError"},"kind":"param","name":"lowerThanMinError","id":"lowerThanMinError","line":"139"},{"ref":{"name":"num","refId":"dart.core/num"},"defaultValue":"null","isOptional":true,"isNamed":true,"initializedField":{"name":"maxValue","refId":"dart_web_toolkit_validation/NumberValidator/maxValue"},"kind":"param","name":"maxValue","id":"maxValue","line":"140"},{"ref":{"name":"num","refId":"dart.core/num"},"defaultValue":"null","isOptional":true,"isNamed":true,"initializedField":{"name":"minValue","refId":"dart_web_toolkit_validation/NumberValidator/minValue"},"kind":"param","name":"minValue","id":"minValue","line":"141"},{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"\"The amount may not be negative.\"","isOptional":true,"isNamed":true,"initializedField":{"name":"negativeError","refId":"dart_web_toolkit_validation/NumberValidator/negativeError"},"kind":"param","name":"negativeError","id":"negativeError","line":"142"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"-1","isOptional":true,"isNamed":true,"initializedField":{"name":"precision","refId":"dart_web_toolkit_validation/NumberValidator/precision"},"kind":"param","name":"precision","id":"precision","line":"143"},{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"\"The amount entered has too many digits beyond the decimal point.\"","isOptional":true,"isNamed":true,"initializedField":{"name":"precisionError","refId":"dart_web_toolkit_validation/NumberValidator/precisionError"},"kind":"param","name":"precisionError","id":"precisionError","line":"144"},{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"\"The thousands separator must be followed by three digits.\"","isOptional":true,"isNamed":true,"initializedField":{"name":"separationError","refId":"dart_web_toolkit_validation/NumberValidator/separationError"},"kind":"param","name":"separationError","id":"separationError","line":"145"},{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"\",\"","isOptional":true,"isNamed":true,"initializedField":{"name":"thousandsSeparator","refId":"dart_web_toolkit_validation/NumberValidator/thousandsSeparator"},"kind":"param","name":"thousandsSeparator","id":"thousandsSeparator","line":"146"}],"line":"130"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/validation/number_validator.dart","line":"18"},{"superclass":{"name":"WidgetValidator","refId":"dart_web_toolkit_validation/WidgetValidator"},"kind":"class","name":"StringValidator","id":"StringValidator","comment":"\nThe StringValidator class validates that the length of a String is within \na specified range between [minLength] and [maxLength].\n","children":[{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"ValidationResult","refId":"dart_web_toolkit_validation/ValidationResult"}]},"kind":"method","name":"doValidation","id":"doValidation1()","comment":"\n Executes the validation logic of this validator, including validating that \n a missing or empty [value] causes a validation error as defined by the \n value of the [required] property. For an invalid result returns an List of \n [ValidationResult] objects, with one ValidationResult object for each \n field examined by the validator that failed validation.\n\n You must override this method in a subclass of a validator class.\n","children":[{"kind":"param","name":"value","id":"value"}],"line":"49"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"ValidationResult","refId":"dart_web_toolkit_validation/ValidationResult"}]},"kind":"method","name":"_validateString","id":"_validateString1()","comment":"\nValidate [value] and  return List of [ValidationResult] objects, with one\nValidationResult object for each field examined by the validator.\n","children":[{"kind":"param","name":"value","id":"value"}],"isPrivate":true,"line":"66"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"maxLength","id":"maxLength","comment":"\n Maximum length for a valid String. A value of null means this property \n is ignored. It is equals null by default.\n","line":"16"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"tooLongError","id":"tooLongError","comment":"\n Error message when the String is longer than the [maxLength] property. By\n default it's equals \"This string is longer than the maximum allowed length. \n This must be less than {0} characters long.\"\n","line":"23"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"minLength","id":"minLength","comment":"\n Minimum length for a valid String. A value of NaN means this property \n is ignored. It is equals null by default.\n","line":"29"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"tooShortError","id":"tooShortError","comment":"\n Error message when the string is shorter than the [minLength] property. By\n default it's equals \"This string is shorter than the minimum allowed length. \n This must be at least {0} characters long.\"\n","line":"36"},{"kind":"constructor","name":"","id":"3()","children":[{"ref":{"name":"Widget","refId":"dart_web_toolkit_ui/Widget"},"kind":"param","name":"widget","id":"widget"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"null","isOptional":true,"isNamed":true,"initializedField":{"name":"maxLength","refId":"dart_web_toolkit_validation/StringValidator/maxLength"},"kind":"param","name":"maxLength","id":"maxLength"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"null","isOptional":true,"isNamed":true,"initializedField":{"name":"minLength","refId":"dart_web_toolkit_validation/StringValidator/minLength"},"kind":"param","name":"minLength","id":"minLength"}],"line":"38"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/validation/string_validator.dart","line":"10"},{"superclass":{"name":"Validator","refId":"dart_web_toolkit_validation/Validator"},"isAbstract":true,"kind":"class","name":"WidgetValidator","id":"WidgetValidator","children":[{"returnType":{"name":"ValidationEvent","refId":"dart_web_toolkit_validation/ValidationEvent"},"kind":"method","name":"_doValidate","id":"_doValidate0()","isPrivate":true,"line":"19"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"isStatic":true,"kind":"method","name":"validateAll","id":"validateAll1()","comment":"\n Invokes all the validators in the [validators] Array.\n Returns true if all validators valid other false. \n","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"WidgetValidator","refId":"dart_web_toolkit_validation/WidgetValidator"}]},"kind":"param","name":"validators","id":"validators"}],"line":"27"},{"ref":{"name":"Widget","refId":"dart_web_toolkit_ui/Widget"},"kind":"variable","name":"widget","id":"widget","line":"8"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"Widget","refId":"dart_web_toolkit_ui/Widget"},"initializedField":{"name":"widget","refId":"dart_web_toolkit_validation/WidgetValidator/widget"},"kind":"param","name":"widget","id":"widget"}],"line":"10"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/validation/widget_validator.dart","line":"6"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"ValidationResult","id":"ValidationResult","comment":"\nThe ValidationResult class contains the results of a validation. \n","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","comment":"\nUse [message] content to convert that instance to String.\n","line":"191"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isFinal":true,"kind":"variable","name":"isError","id":"isError","comment":"\nPass true if there was a validation error.\n","line":"175"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"message","id":"message","comment":"\nValidation error message.\n","line":"180"},{"kind":"constructor","name":"","id":"2()","comment":"\nCreate new instance of [ValidationResult]. You might specify [isError] if\nvalidation process finished with error and pass throug result [message].\n","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"initializedField":{"name":"isError","refId":"dart_web_toolkit_validation/ValidationResult/isError"},"kind":"param","name":"isError","id":"isError"},{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"message","refId":"dart_web_toolkit_validation/ValidationResult/message"},"kind":"param","name":"message","id":"message"}],"line":"186"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/validation/validator.dart","line":"170"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"ValidationEvent","id":"ValidationEvent","comment":"\n The [ValidationResultEvent] class defines the event object that is passed \n to event listeners for the [valid] and [invalid] validator events. \n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"variable","name":"VALID","id":"VALID","line":"147"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"variable","name":"INVALID","id":"INVALID","line":"148"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"type","id":"type","comment":"\nEvent type\n","line":"153"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"ValidationResult","refId":"dart_web_toolkit_validation/ValidationResult"}]},"isFinal":true,"kind":"variable","name":"results","id":"results","comment":"\nThe property, which contains an Array of ValidationResult objects, \none for each field examined by the validator.\n","line":"159"},{"kind":"constructor","name":"","id":"2()","comment":"\nCreate an instance of ValidationEvent of specified [type] and [results]. \n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"type","refId":"dart_web_toolkit_validation/ValidationEvent/type"},"kind":"param","name":"type","id":"type"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"ValidationResult","refId":"dart_web_toolkit_validation/ValidationResult"}]},"defaultValue":"null","isOptional":true,"initializedField":{"name":"results","refId":"dart_web_toolkit_validation/ValidationEvent/results"},"kind":"param","name":"results","id":"results"}],"line":"164"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/validation/validator.dart","line":"145"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Validator","id":"Validator","children":[{"returnType":{"name":"ValidationEvent","refId":"dart_web_toolkit_validation/ValidationEvent"},"kind":"method","name":"validate","id":"validate2()","comment":"\nPerforms validation of [value] and notifies the listeners of the result if\n[fireEvent] equals true.\n","children":[{"kind":"param","name":"value","id":"value"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"kind":"param","name":"fireEvent","id":"fireEvent"}],"line":"62"},{"returnType":{"name":"ValidationEvent","refId":"dart_web_toolkit_validation/ValidationEvent"},"kind":"method","name":"_processValidation","id":"_processValidation1()","comment":"\nMain internally used function to handle validation process.\n","children":[{"kind":"param","name":"value","id":"value"}],"isPrivate":true,"line":"90"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"ValidationResult","refId":"dart_web_toolkit_validation/ValidationResult"}]},"kind":"method","name":"doValidation","id":"doValidation1()","comment":"\n Executes the validation logic of this validator, including validating that \n a missing or empty [value] causes a validation error as defined by the \n value of the [required] property. For an invalid result returns an List of \n [ValidationResult] objects, with one ValidationResult object for each \n field examined by the validator that failed validation.\n\n You must override this method in a subclass of a validator class.\n","children":[{"kind":"param","name":"value","id":"value"}],"line":"112"},{"returnType":{"name":"ValidationResult","refId":"dart_web_toolkit_validation/ValidationResult"},"kind":"method","name":"_validateRequired","id":"_validateRequired1()","comment":"\n Determines if an object is valid based on its [required] property.\n","children":[{"kind":"param","name":"value","id":"value"}],"isPrivate":true,"line":"125"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"variable","name":"DECIMAL_DIGITS","id":"DECIMAL_DIGITS","comment":"\n A String containing the decimal digits 0 through 9.    \n \n @langversion 3.0\n @playerversion Flash 9\n @playerversion AIR 1.1\n @productversion Flex 3\n","line":"20"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"enabled","id":"enabled","comment":"\nProperty to enable/disable validation process.\n\nSetting this value to false will stop the validator from performing \nvalidation. When a validator is disabled, it dispatches no events, and the \n[validate] method returns ValidationEvent.VALID instance.\n","line":"29"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"required","id":"required","comment":"\nIf true specifies that a missing or empty value causes a validation error. \n","line":"34"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"requiredError","id":"requiredError","comment":"\nError message when a value is missing and the [required] property is true. \n \nBy default equals \"This field is required.\"\n","line":"41"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"ValidationListener","refId":"dart_web_toolkit_validation/ValidationListener"}]},"kind":"variable","name":"listeners","id":"listeners","comment":"\nList of [ValidationListener]'s\n","line":"46"},{"ref":{"name":"OnValid","refId":"dart_web_toolkit_validation/OnValid"},"kind":"variable","name":"onValid","id":"onValid","comment":"\nCallback function invokes when result of validation is valid.\n","line":"51"},{"ref":{"name":"OnInvalid","refId":"dart_web_toolkit_validation/OnInvalid"},"kind":"variable","name":"onInvalid","id":"onInvalid","comment":"\nCallback function invokes when result of validation is invalid.\n","line":"56"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/validation/validator.dart","line":"10"},{"returnType":{"name":"void","refId":"void"},"kind":"typedef","name":"OnInvalid","id":"OnInvalid","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"ValidationResult","refId":"dart_web_toolkit_validation/ValidationResult"}]},"kind":"param","name":"results","id":"results"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/validation/validator.dart","line":"8"},{"returnType":{"name":"void","refId":"void"},"kind":"typedef","name":"OnValid","id":"OnValid","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/validation/validator.dart"},{"returnType":{"name":"void","refId":"void"},"kind":"typedef","name":"ValidationListener","id":"ValidationListener","children":[{"ref":{"name":"ValidationEvent","refId":"dart_web_toolkit_validation/ValidationEvent"},"kind":"param","name":"evt","id":"evt"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/validation/validator.dart","line":"6"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/validation.dart","line":"7"}
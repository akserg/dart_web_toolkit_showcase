{"dependencies":[{"id":"dart.core","comment":"\n\nBuilt-in types, collections,\nand other core functionality for every Dart program.\n\nThis library is automatically imported.\n\nSome classes in this library,\nsuch as [String] and [num],\nsupport Dart's built-in data types.\nOther classes, such as [List] and [Map], provide data structures\nfor managing collections of objects.\nAnd still other classes represent commonly used types of data\nsuch as URIs, dates and times, and errors.\n\n## Numbers and booleans\n\n[int] and [double] provide support for Dart's built-in numerical data types:\nintegers and double-precision floating point numbers, respectively.\nAn object of type [bool] is either true or false.\nVariables of these types can be constructed from literals:\n\n    int meaningOfLife = 42;\n    double valueOfPi  = 3.141592;\n    bool visible      = true;\n\n## Strings and regular expressions\n\nA [String] is immutable and represents a sequence of characters.\n\n    String shakespeareQuote = \"All the world's a stage, ...\";\n\n[StringBuffer] provides a way to construct strings efficiently.\n\n    StringBuffer moreShakespeare = new StringBuffer();\n    moreShakespeare.write('And all the men and women ');\n    moreShakespeare.write('merely players; ...');\n\nThe String and StringBuffer classes implement string concatenation,\ninterpolation, and other string manipulation features.\n\n    String philosophy = 'Live on ';\n    String get palindrome => philosophy + philosophy.split('').reversed.join();\n\n[RegExp] implements Dart regular expressions,\nwhich provide a grammar for matching patterns within text.\nFor example, here's a regular expression that matches\na string of one or more digits:\n\n    var numbers = new RegExp(r'\\d+');\n\nDart regular expressions have the same syntax and semantics as\nJavaScript regular expressions. See\n<http://ecma-international.org/ecma-262/5.1/#sec-15.10>\nfor the specification of JavaScript regular expressions.\n\n## Collections\n\nThe dart:core library provides basic collections,\nsuch as [List], [Map], and [Set].\n\nA List is an ordered collection of objects, with a length.\nLists are sometimes called arrays.\nUse a List when you need to access objects by index.\n\n    List superheroes = [ 'Batman', 'Superman', 'Harry Potter' ];\n\nA Set is an unordered collection of unique objects.\nYou cannot get an item by index (position).\nAdding a duplicate item has no effect.\n\n    Set villians = new Set();\n    villians.add('Joker');\n    villians.addAll( ['Lex Luther', 'Voldemort'] );\n\nA Map is an unordered collection of key-value pairs.\nMaps are sometimes called associative arrays because\nmaps associate a key to some value for easy retrieval.\nKeys are unique.\nUse a Map when you need to access objects\nby a unique identifier.\n\n    Map sidekicks = { 'Batman': 'Robin',\n                      'Superman': 'Lois Lane',\n                      'Harry Potter': 'Ron and Hermione' };\n\nIn addition to these classes,\ndart:core contains [Iterable],\nan interface that defines functionality\ncommon in collections of objects.\nExamples include the ability\nto run a function on each element in the collection,\nto apply a test to each element, \nto retrieve an object, and to determine length.\n\nIterable is implemented by List and Set,\nand used by Map for its keys and values.\n\nFor other kinds of collections, check out the\n[dart:collection](#dart-collection) library.\n\n## Date and time\n\nUse [DateTime] to represent a point in time\nand [Duration] to represent a span of time.\n\nYou can create DateTime objects with constructors\nor by parsing a correctly formatted string.\n\n    DateTime now = new DateTime.now();\n    DateTime berlinWallFell = new DateTime(1989, 11, 9);\n    DateTime moonLanding = DateTime.parse(\"1969-07-20\");\n\nCreate a Duration object specifying the individual time units.\n\n    Duration timeRemaining = new Duration(hours:56, minutes:14);\n\nIn addition to DateTime and Duration,\ndart:core contains the [Stopwatch] class for measuring elapsed time.\n    \n## Uri\n\nA [Uri] object represents a uniform resource identifier,\nwhich identifies a resource on the web.\n\n    Uri dartlang = Uri.parse('http://dartlang.org/');\n    \n## Errors\n\nThe [Error] class represents the occurrence of an error\nduring runtime.\nSubclasses of this class represent specific kinds of errors.\n\n## Other documentation\n\nFor more information about how to use the built-in types, refer to\n[Built-in Types](http://www.dartlang.org/docs/dart-up-and-running/contents/ch02.html#built-in-types)\nin Chapter 2 of\n[Dart: Up and Running](http://www.dartlang.org/docs/dart-up-and-running/).\n\nAlso, see\n[dart:core - Numbers, Collections, Strings, and More](http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-dartcore---strings-collections-and-more)\nfor more coverage of classes in this package.\n\nThe \n[Dart Language Specification](https://www.dartlang.org/docs/spec/)\nprovides technical details.\n","uri":"dart-sdk/lib/core/core.dart","name":"dart:core","children":[{"id":"Object","comment":"\nEverything in Dart is an [Object].\n","uri":"dart-sdk/lib/core/object.dart","name":"Object","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"id":"==1()","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nOverride this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:\n\n * Total: It must return a boolean for all arguments. It should never throw\n   or return `null`.\n\n * Reflexive: For all objects `o`, `o == o` must be true.\n\n * Symmetric: For all objects `o1` and `o2`, `o1 == o2` and `o2 == o1` must\n   either both be true, or both be false.\n\n * Transitive: For all objects `o1`, `o2`, and `o3`, if `o1 == o2` and\n   `o2 == o3` are true, then `o1 == o3` must be true.\n\nThe method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","name":"==","children":[{"id":"other","name":"other","kind":"param"}],"line":"48","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"toString0()","comment":"\nReturns a string representation of this object.\n","name":"toString","line":"67","kind":"method"},{"id":"noSuchMethod1()","comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","name":"noSuchMethod","children":[{"ref":{"refId":"dart.core/Invocation","name":"Invocation"},"id":"invocation","name":"invocation","kind":"param"}],"line":"79","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"hashCode","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","name":"hashCode","line":"62","kind":"property"},{"ref":{"refId":"dart.core/Type","name":"Type"},"id":"runtimeType","comment":"\nA representation of the runtime type of the object.\n","name":"runtimeType","line":"84","kind":"property"},{"id":"0()","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","name":"","line":"18","kind":"constructor"}],"line":"10","kind":"class"}],"line":"153","kind":"library"},{"id":"dart_web_toolkit_event","comment":"\nDart Web Toolkit Event library.\n","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/event.dart","children":[{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"EventHandler","comment":"\nMarker interface for event handlers. All stock GWT Widget and dom event\nhandlers extend [EventHandler].\n","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/event/event_handler.dart","name":"EventHandler","line":"10","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart_web_toolkit_event/IEvent","arguments":[{"refId":"dart_web_toolkit_event/DwtEvent/H","name":"H"}],"name":"IEvent"},"id":"DwtEvent","comment":"\nRoot of all GWT widget and dom events sourced by a {@link HandlerManager}.\nAll GWT events are considered dead and should no longer be accessed once the\n{@link HandlerManager} which originally fired the event finishes with it.\nThat is, don't hold on to event objects outside of your handler methods.\n\nThere is no need for an application's custom event types to extend GwtEvent.\nPrefer {@link Event} instead.\n\n@param <H> handler type\n","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/event/dwt_event.dart","name":"DwtEvent","children":[{"returnType":{"refId":"dart.core/Object","name":"Object"},"id":"getSource0()","name":"getSource","line":"21","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"assertLive0()","comment":"\nAsserts that the event still should be accessed. All events are considered\nto be \"dead\" after their original handler manager finishes firing them. An\nevent can be revived by calling {@link GwtEvent#revive()}.\n","name":"assertLive","line":"31","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"isLive0()","comment":"\nIs the event current live?\n\n@return whether the event is live\n","name":"isLive","line":"40","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"kill0()","comment":"\nKill the event. After the event has been killed, users cannot really on its\nvalues or functions being available.\n","name":"kill","line":"48","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"revive0()","comment":"\nRevives the event. Used when recycling event instances.\n","name":"revive","line":"56","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"overrideSource1()","name":"overrideSource","children":[{"ref":{"refId":"dart.core/Object","name":"Object"},"id":"source","name":"source","kind":"param"}],"line":"61","kind":"method"},{"ref":{"refId":"dart.core/bool","name":"bool"},"id":"_dead","name":"_dead","isPrivate":true,"line":"19","kind":"variable"},{"id":"H","name":"H","kind":"typeparam"}],"line":"17","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"HandlerRegistration","comment":"\nRegistration objects returned when an event handler is bound (e.g. via\n[EventBus#addHandler]), used to deregister.\n\nA tip: to make a handler deregister itself try something like the following:\n<code><pre>new MyHandler() {\n HandlerRegistration reg = MyEvent.register(eventBus, this);\n\n public void onMyThing(MyEvent event) {\n   {@literal /}* do your thing *{@literal /}\n   reg.removeHandler();\n }\n};\n</pre></code>\n","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/event/handler_registration.dart","name":"HandlerRegistration","children":[{"returnType":{"refId":"void","name":"void"},"id":"removeHandler0()","comment":"\nDeregisters the handler associated with this registration object if the\nhandler is still attached to the event source. If the handler is no longer\nattached to the event source, this is a no-op.\n","name":"removeHandler","line":"28","kind":"method"}],"line":"21","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"IEvent","comment":"\nBase Event object.\n\n@param <H> interface implemented by handlers of this kind of event\n","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/event/event.dart","name":"IEvent","children":[{"returnType":{"refId":"dart_web_toolkit_event/EventType","arguments":[{"refId":"dart_web_toolkit_event/IEvent/H","name":"H"}],"name":"EventType"},"id":"getAssociatedType0()","comment":"\nReturns the [EventType] used to register this event, allowing an\n[EventBus] to find handlers of the appropriate class.\n\n@return the type\n","name":"getAssociatedType","line":"26","kind":"method"},{"id":"getSource0()","comment":"\nReturns the source for this event. The type and meaning of the source is\narbitrary, and is most useful as a secondary key for handler registration.\n(See [EventBus#addHandlerToSource], which allows a handler to\nregister for events of a particular type, tied to a particular source.)\n\nNote that the source is actually set at dispatch time, e.g. via\n[EventBus#fireEventFromSource(Event, Object)].\n\n@return object representing the source of this event\n","name":"getSource","line":"39","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"setSource1()","comment":"\nSet the source that triggered this event. Intended to be called by the\n[EventBus] during dispatch.\n\n@param source the source of this event.\n@see EventBus#fireEventFromSource(Event, Object)\n@see EventBus#setSourceOfEvent(Event, Object)\n","name":"setSource","children":[{"id":"source","name":"source","kind":"param"}],"line":"51","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"toString0()","comment":"\nThe toString() for abstract event is overridden to avoid accidently\nincluding class literals in the the compiled output. Use [Event]\n#toDebugString to get more information about the event.\n","name":"toString","line":"60","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"dispatch1()","comment":"\nImplemented by subclasses to invoke their handlers in a type safe\nmanner. Intended to be called by [EventBus#fireEvent(Event)] or\n[EventBus#fireEventFromSource(Event, Object)].\n\n@param handler handler\n@see EventBus#dispatchEvent(Event, Object)\n","name":"dispatch","children":[{"ref":{"refId":"dart_web_toolkit_event/IEvent/H","name":"H"},"id":"handler","name":"handler","kind":"param"}],"line":"72","kind":"method"},{"returnType":{"refId":"dart_web_toolkit_event/HandlerRegistration","name":"HandlerRegistration"},"isStatic":true,"id":"addNativePreviewHandler1()","comment":"\n<p>\nAdds a {@link NativePreviewHandler} that will receive all events before\nthey are fired to their handlers. Note that the handler will receive\n<u>all</u> native events, including those received due to bubbling, whereas\nnormal event handlers only receive explicitly sunk events.\n</p>\n\n<p>\nUnlike other event handlers, {@link NativePreviewHandler} are fired in the\nreverse order that they are added, such that the last\n{@link NativePreviewEvent} that was added is the first to be fired.\n</p>\n\n<p>\nPlease note that nondeterministic behavior will result if more than one GWT\napplication registers preview handlers. See <a href=\n'http://code.google.com/p/google-web-toolkit/issues/detail?id=3892'>issue\n3892</a> for details.\n</p>\n\n@param handler the {@link NativePreviewHandler}\n@return {@link HandlerRegistration} used to remove this handler\n","name":"addNativePreviewHandler","children":[{"ref":{"refId":"dart_web_toolkit_event/NativePreviewHandler","name":"NativePreviewHandler"},"id":"handler","name":"handler","kind":"param"}],"line":"107","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"isStatic":true,"id":"fireNativePreviewEvent1()","comment":"\nFire a {@link NativePreviewEvent} for the native event.\n\n@param nativeEvent the native event\n@return true to fire the event normally, false to cancel the event\n","name":"fireNativePreviewEvent","children":[{"ref":{"refId":"dart.dom.html/Event","name":"Event"},"id":"nativeEvent","name":"nativeEvent","kind":"param"}],"line":"126","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"getTypeInt1()","comment":"\nGets the enumerated type of this event given a valid event type name.\n\n@param typeName the typeName to be tested\n@return the event's enumerated type, or -1 if not defined\n","name":"getTypeInt","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"typeName","name":"typeName","kind":"param"}],"line":"326","kind":"method"},{"returnType":{"refId":"void","name":"void"},"isStatic":true,"id":"setEventListener2()","comment":"\nSets the {@link EventListener} to receive events for the given element.\nOnly one such listener may exist for a single element.\n\n@param elem the element whose listener is to be set\n@param listener the listener to receive {@link Event events}\n","name":"setEventListener","children":[{"ref":{"refId":"dart.dom.html/Element","name":"Element"},"id":"elem","name":"elem","kind":"param"},{"ref":{"refId":"dart_web_toolkit_event/EventListener","name":"EventListener"},"id":"listener","name":"listener","kind":"param"}],"line":"337","kind":"method"},{"returnType":{"refId":"void","name":"void"},"isStatic":true,"id":"sinkEvents2()","comment":"\nSets the current set of events sunk by a given element. These events will\nbe fired to the nearest {@link EventListener} specified on any of the\nelement's parents.\n\n@param elem the element whose events are to be retrieved\n@param eventBits a bitfield describing the events sunk on this element (its\n         possible values are described in {@link Event})\n","name":"sinkEvents","children":[{"ref":{"refId":"dart.dom.html/Element","name":"Element"},"id":"elem","name":"elem","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"eventBits","name":"eventBits","kind":"param"}],"line":"352","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"getEventsSunk1()","comment":"\nGets the current set of events sunk by a given element.\n\n@param elem the element whose events are to be retrieved\n@return a bitfield describing the events sunk on this element (its possible\n        values are described in {@link Event})\n","name":"getEventsSunk","children":[{"ref":{"refId":"dart.dom.html/Element","name":"Element"},"id":"elem","name":"elem","kind":"param"}],"line":"365","kind":"method"},{"returnType":{"refId":"dart_web_toolkit_event/EventListener","name":"EventListener"},"isStatic":true,"id":"getEventListener1()","comment":"\nGets the {@link EventListener} that will receive events for the given\nelement. Only one such listener may exist for a single element.\n\n@param elem the element whose listener is to be set\n@return the element's event listener\n","name":"getEventListener","children":[{"ref":{"refId":"dart.dom.html/Element","name":"Element"},"id":"elem","name":"elem","kind":"param"}],"line":"378","kind":"method"},{"returnType":{"refId":"void","name":"void"},"isStatic":true,"id":"setCapture1()","comment":"\nSets mouse-capture on the given element. This element will directly receive\nall mouse events until {@link #releaseCapture(Element)} is called on it.\n\n@param elem the element on which to set mouse capture\n","name":"setCapture","children":[{"ref":{"refId":"dart.dom.html/Element","name":"Element"},"id":"elem","name":"elem","kind":"param"}],"line":"388","kind":"method"},{"returnType":{"refId":"void","name":"void"},"isStatic":true,"id":"releaseCapture1()","comment":"\nReleases mouse capture on the given element. Calling this method has no\neffect if the element does not currently have mouse capture.\n\n@param elem the element to release capture\n@see #setCapture(Element)\n","name":"releaseCapture","children":[{"ref":{"refId":"dart.dom.html/Element","name":"Element"},"id":"elem","name":"elem","kind":"param"}],"line":"399","kind":"method"},{"id":"_source","name":"_source","isPrivate":true,"line":"13","kind":"variable"},{"ref":{"refId":"dart_web_toolkit_event/EventBus","name":"EventBus"},"isStatic":true,"id":"handlers","comment":"\nThe list of {@link NativePreviewHandler}. We use a list instead of a\nhandler manager for efficiency and because we want to fire the handlers in\nreverse order. When the last handler is removed, handlers is reset to null.\n","name":"handlers","line":"81","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"ONBLUR","comment":"\nFired when an element loses keyboard focus.\n","name":"ONBLUR","line":"137","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"ONCHANGE","comment":"\nFired when the value of an input element changes.\n","name":"ONCHANGE","line":"142","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"ONCLICK","comment":"\nFired when the user clicks on an element.\n","name":"ONCLICK","line":"147","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"ONDBLCLICK","comment":"\nFired when the user double-clicks on an element.\n","name":"ONDBLCLICK","line":"152","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"ONERROR","comment":"\nFired when an image encounters an error.\n","name":"ONERROR","line":"157","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"ONFOCUS","comment":"\nFired when an element receives keyboard focus.\n","name":"ONFOCUS","line":"162","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"ONGESTURECHANGE","comment":"\nFired when the user gesture changes.\n","name":"ONGESTURECHANGE","line":"167","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"ONGESTUREEND","comment":"\nFired when the user gesture ends.\n","name":"ONGESTUREEND","line":"172","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"ONGESTURESTART","comment":"\nFired when the user gesture starts.\n","name":"ONGESTURESTART","line":"177","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"ONKEYDOWN","comment":"\nFired when the user depresses a key.\n","name":"ONKEYDOWN","line":"182","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"ONKEYPRESS","comment":"\nFired when the a character is generated from a keypress (either directly or\nthrough auto-repeat).\n","name":"ONKEYPRESS","line":"188","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"ONKEYUP","comment":"\nFired when the user releases a key.\n","name":"ONKEYUP","line":"193","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"ONLOAD","comment":"\nFired when an element (normally an IMG) finishes loading.\n","name":"ONLOAD","line":"198","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"ONLOSECAPTURE","comment":"\nFired when an element that has mouse capture loses it.\n","name":"ONLOSECAPTURE","line":"203","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"ONMOUSEDOWN","comment":"\nFired when the user depresses a mouse button over an element.\n","name":"ONMOUSEDOWN","line":"208","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"ONMOUSEMOVE","comment":"\nFired when the mouse is moved within an element's area.\n","name":"ONMOUSEMOVE","line":"213","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"ONMOUSEOUT","comment":"\nFired when the mouse is moved out of an element's area.\n","name":"ONMOUSEOUT","line":"218","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"ONMOUSEOVER","comment":"\nFired when the mouse is moved into an element's area.\n","name":"ONMOUSEOVER","line":"223","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"ONMOUSEUP","comment":"\nFired when the user releases a mouse button over an element.\n","name":"ONMOUSEUP","line":"228","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"ONMOUSEWHEEL","comment":"\nFired when the user scrolls the mouse wheel over an element.\n","name":"ONMOUSEWHEEL","line":"233","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"ONPASTE","comment":"\nFired when the user pastes text into an input element.\n\n<p>\nNote: This event is <em>not</em> supported on Firefox 2 and earlier, or\nOpera 10 and earlier. Be aware that it will not fire on these browser\nversions.\n</p>\n","name":"ONPASTE","line":"244","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"ONSCROLL","comment":"\nFired when a scrollable element's scroll offset changes.\n","name":"ONSCROLL","line":"249","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"ONTOUCHCANCEL","comment":"\nFired when the user cancels touching an element.\n","name":"ONTOUCHCANCEL","line":"254","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"ONTOUCHEND","comment":"\nFired when the user ends touching an element.\n","name":"ONTOUCHEND","line":"259","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"ONTOUCHMOVE","comment":"\nFired when the user moves while touching an element.\n","name":"ONTOUCHMOVE","line":"264","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"ONTOUCHSTART","comment":"\nFired when the user starts touching an element.\n","name":"ONTOUCHSTART","line":"269","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"ONCONTEXTMENU","comment":"\nFired when the user requests an element's context menu (usually by\nright-clicking).\n\nNote that not all browsers will fire this event (notably Opera, as of 9.5).\n","name":"ONCONTEXTMENU","line":"276","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"FOCUSEVENTS","comment":"\nA bit-mask covering both focus events (focus and blur).\n","name":"FOCUSEVENTS","line":"281","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"KEYEVENTS","comment":"\nA bit-mask covering all keyboard events (down, up, and press).\n","name":"KEYEVENTS","line":"286","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"MOUSEEVENTS","comment":"\nA bit-mask covering all mouse events (down, up, move, over, and out), but\nnot click, dblclick, or wheel events.\n","name":"MOUSEEVENTS","line":"292","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"TOUCHEVENTS","comment":"\nA bit-mask covering all touch events (start, move, end, cancel).\n","name":"TOUCHEVENTS","line":"298","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"GESTUREEVENTS","comment":"\nA bit-mask covering all gesture events (start, change, end).\n","name":"GESTUREEVENTS","line":"303","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"BUTTON_LEFT","comment":"\nThe left mouse button.\n","name":"BUTTON_LEFT","line":"308","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"BUTTON_MIDDLE","comment":"\nThe middle mouse button.\n","name":"BUTTON_MIDDLE","line":"313","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"BUTTON_RIGHT","comment":"\nThe right mouse button.\n","name":"BUTTON_RIGHT","line":"318","kind":"variable"},{"id":"0()","comment":"\nConstructor.\n","name":"","line":"18","kind":"constructor"},{"id":"H","name":"H","kind":"typeparam"}],"line":"11","kind":"class"}],"line":"7","kind":"library"}],"id":"dart_web_toolkit_place","comment":"\nDart Web Toolkit Place library.\n","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/place.dart","children":[{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"PlaceTokenizer","comment":"\nImplemented by objects responsible for text serialization and deserialization\nof Place objects.\n\n@param <P> a subtype of {@link Place}\n","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/place/place_tokenizer.dart","name":"PlaceTokenizer","children":[{"returnType":{"refId":"dart_web_toolkit_place/PlaceTokenizer/P","name":"P"},"id":"getPlace1()","comment":"\nReturns the {@link Place} associated with the given token.\n\n@param token a String token\n@return a {@link Place} of type P\n","name":"getPlace","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"token","name":"token","kind":"param"}],"line":"20","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"getToken1()","comment":"\nReturns the token associated with the given {@link Place}.\n\n@param place a {@link Place} of type P\n@return a String token\n","name":"getToken","children":[{"ref":{"refId":"dart_web_toolkit_place/PlaceTokenizer/P","name":"P"},"id":"place","name":"place","kind":"param"}],"line":"28","kind":"method"},{"upperBound":{"refId":"dart_web_toolkit_place/Place","name":"Place"},"id":"P","name":"P","kind":"typeparam"}],"line":"12","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart_web_toolkit_place/PlaceHistoryMapper","name":"PlaceHistoryMapper"},"id":"PlaceHistoryMapperWithFactory","comment":"\nA {@link PlaceHistoryMapper} that can get its {@link PlaceTokenizer}\ninstances from a factory.\n\n@param <F> factory type\n","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/place/place_history_mapper_with_factory.dart","name":"PlaceHistoryMapperWithFactory","children":[{"returnType":{"refId":"void","name":"void"},"id":"setFactory1()","comment":"\nSets the factory to be used to generate {@link PlaceTokenizer} instances.\n\n@param factory a factory of type F\n","name":"setFactory","children":[{"ref":{"refId":"dart_web_toolkit_place/PlaceHistoryMapperWithFactory/F","name":"F"},"id":"factory","name":"factory","kind":"param"}],"line":"19","kind":"method"},{"id":"F","name":"F","kind":"typeparam"}],"line":"12","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"PlaceHistoryMapper","comment":"\nMaps {@link Place}s to/from tokens, used to configure a\n{@link PlaceHistoryHandler}.\n<p>\nYou can annotate subinterfaces of PlaceHistoryMapper with\n{@link WithTokenizers} to have their implementation automatically generated\nvia a call to {@link com.google.gwt.core.shared.GWT#create(Class)}.\n","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/place/place_history_mapper.dart","name":"PlaceHistoryMapper","children":[{"returnType":{"refId":"dart_web_toolkit_place/Place","name":"Place"},"id":"getPlace1()","comment":"\nReturns the {@link Place} associated with the given token.\n\n@param token a String token\n@return a {@link Place} instance\n","name":"getPlace","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"token","name":"token","kind":"param"}],"line":"22","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"getToken1()","comment":"\nReturns the String token associated with the given {@link Place}.\n\n@param place a {@link Place} instance\n@return a String token\n","name":"getToken","children":[{"ref":{"refId":"dart_web_toolkit_place/Place","name":"Place"},"id":"place","name":"place","kind":"param"}],"line":"30","kind":"method"}],"line":"14","kind":"class"},{"interfaces":[{"refId":"dart_web_toolkit_event/HandlerRegistration","name":"HandlerRegistration"}],"superclass":{"refId":"dart_web_toolkit_event/EventHandler","name":"EventHandler"},"id":"_PlaceHistoryHandlerRegistration","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/place/place_history_handler.dart","name":"_PlaceHistoryHandlerRegistration","isPrivate":true,"children":[{"returnType":{"refId":"void","name":"void"},"id":"removeHandler0()","comment":"\nDeregisters the handler associated with this registration object if the\nhandler is still attached to the event source. If the handler is no longer\nattached to the event source, this is a no-op.\n","name":"removeHandler","line":"196","kind":"method"},{"ref":{"refId":"dart_web_toolkit_place/PlaceHistoryHandler","name":"PlaceHistoryHandler"},"id":"_handler","name":"_handler","isPrivate":true,"line":"184","kind":"variable"},{"ref":{"refId":"dart_web_toolkit_event/HandlerRegistration","name":"HandlerRegistration"},"id":"_placeReg","name":"_placeReg","isPrivate":true,"line":"185","kind":"variable"},{"ref":{"refId":"dart_web_toolkit_event/HandlerRegistration","name":"HandlerRegistration"},"id":"_historyReg","name":"_historyReg","isPrivate":true,"line":"186","kind":"variable"},{"id":"3()","name":"","children":[{"initializedField":{"refId":"dart_web_toolkit_place/_PlaceHistoryHandlerRegistration/_handler","name":"_handler"},"ref":{"refId":"dart_web_toolkit_place/PlaceHistoryHandler","name":"PlaceHistoryHandler"},"id":"_handler","name":"_handler","isPrivate":true,"kind":"param"},{"initializedField":{"refId":"dart_web_toolkit_place/_PlaceHistoryHandlerRegistration/_placeReg","name":"_placeReg"},"ref":{"refId":"dart_web_toolkit_event/HandlerRegistration","name":"HandlerRegistration"},"id":"_placeReg","name":"_placeReg","isPrivate":true,"kind":"param"},{"initializedField":{"refId":"dart_web_toolkit_place/_PlaceHistoryHandlerRegistration/_historyReg","name":"_historyReg"},"ref":{"refId":"dart_web_toolkit_event/HandlerRegistration","name":"HandlerRegistration"},"id":"_historyReg","name":"_historyReg","isPrivate":true,"kind":"param"}],"line":"188","kind":"constructor"}],"line":"182","kind":"class"},{"superclass":{"refId":"dart_web_toolkit_place/PlaceChangeEventHandler","name":"PlaceChangeEventHandler"},"id":"_PlaceChangeEventHandlerAdapter","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/place/place_history_handler.dart","name":"_PlaceChangeEventHandlerAdapter","isPrivate":true,"children":[{"returnType":{"refId":"void","name":"void"},"id":"onPlaceChange1()","comment":"\nCalled when a {@link PlaceChangeEvent} is fired.\n\n@param event the {@link PlaceChangeEvent}\n","name":"onPlaceChange","children":[{"ref":{"refId":"dart_web_toolkit_place/PlaceChangeEvent","name":"PlaceChangeEvent"},"id":"event","name":"event","kind":"param"}],"line":"176","kind":"method"},{"ref":{"refId":"dart_web_toolkit_place/PlaceHistoryHandler","name":"PlaceHistoryHandler"},"id":"_handler","name":"_handler","isPrivate":true,"line":"167","kind":"variable"},{"id":"1()","name":"","children":[{"initializedField":{"refId":"dart_web_toolkit_place/_PlaceChangeEventHandlerAdapter/_handler","name":"_handler"},"ref":{"refId":"dart_web_toolkit_place/PlaceHistoryHandler","name":"PlaceHistoryHandler"},"id":"_handler","name":"_handler","isPrivate":true,"kind":"param"}],"line":"169","kind":"constructor"}],"line":"165","kind":"class"},{"interfaces":[{"refId":"dart_web_toolkit_place/Historian","name":"Historian"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"DefaultHistorian","comment":"\nDefault implementation of {@link Historian}, based on {@link History}.\n","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/place/place_history_handler.dart","name":"DefaultHistorian","children":[{"returnType":{"refId":"dart_web_toolkit_event/HandlerRegistration","name":"HandlerRegistration"},"id":"addValueChangeHandler1()","name":"addValueChangeHandler","children":[{"ref":{"refId":"dart_web_toolkit_event/ValueChangeHandler","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"ValueChangeHandler"},"id":"valueChangeHandler","name":"valueChangeHandler","kind":"param"}],"line":"152","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"getToken0()","name":"getToken","line":"156","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"newItem2()","name":"newItem","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"token","name":"token","kind":"param"},{"ref":{"refId":"dart.core/bool","name":"bool"},"id":"issueEvent","name":"issueEvent","kind":"param"}],"line":"160","kind":"method"}],"line":"150","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"Historian","comment":"\nOptional delegate in charge of History related events. Provides nice\nisolation for unit testing, and allows pre- or post-processing of tokens.\nMethods correspond to the like named methods on {@link History}.\n","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/place/place_history_handler.dart","name":"Historian","children":[{"returnType":{"refId":"dart_web_toolkit_event/HandlerRegistration","name":"HandlerRegistration"},"id":"addValueChangeHandler1()","comment":"\nAdds a {@link com.google.gwt.event.logical.shared.ValueChangeEvent}\nhandler to be informed of changes to the browser's history stack.\n\n@param valueChangeHandler the handler\n@return the registration used to remove this value change handler\n","name":"addValueChangeHandler","children":[{"ref":{"refId":"dart_web_toolkit_event/ValueChangeHandler","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"ValueChangeHandler"},"id":"valueChangeHandler","name":"valueChangeHandler","kind":"param"}],"line":"132","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"getToken0()","comment":"\n@return the current history token.\n","name":"getToken","line":"137","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"newItem2()","comment":"\nAdds a new browser history entry. Calling this method will cause\n{@link ValueChangeHandler#onValueChange(com.google.gwt.event.logical.shared.ValueChangeEvent)}\nto be called as well.\n","name":"newItem","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"token","name":"token","kind":"param"},{"ref":{"refId":"dart.core/bool","name":"bool"},"id":"issueEvent","name":"issueEvent","kind":"param"}],"line":"144","kind":"method"}],"line":"124","kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"PlaceHistoryHandler","comment":"\nMonitors {@link PlaceChangeEvent}s and\n{@link com.google.gwt.user.client.History} events and keep them in sync.\n","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/place/place_history_handler.dart","name":"PlaceHistoryHandler","children":[{"returnType":{"refId":"void","name":"void"},"id":"handleCurrentHistory0()","comment":"\nHandle the current history token. Typically called at application start, to\nensure bookmark launches work.\n","name":"handleCurrentHistory","line":"39","kind":"method"},{"returnType":{"refId":"dart_web_toolkit_event/HandlerRegistration","name":"HandlerRegistration"},"id":"register3()","comment":"\nInitialize this place history handler.\n\n@return a registration object to de-register the handler\n","name":"register","children":[{"ref":{"refId":"dart_web_toolkit_place/PlaceController","name":"PlaceController"},"id":"placeController","name":"placeController","kind":"param"},{"ref":{"refId":"dart_web_toolkit_event/EventBus","name":"EventBus"},"id":"eventBus","name":"eventBus","kind":"param"},{"ref":{"refId":"dart_web_toolkit_place/Place","name":"Place"},"id":"defaultPlace","name":"defaultPlace","line":"60","kind":"param"}],"line":"59","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"_handleHistoryToken1()","name":"_handleHistoryToken","isPrivate":true,"children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"token","name":"token","kind":"param"}],"line":"84","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"_tokenForPlace1()","name":"_tokenForPlace","isPrivate":true,"children":[{"ref":{"refId":"dart_web_toolkit_place/Place","name":"Place"},"id":"newPlace","name":"newPlace","kind":"param"}],"line":"104","kind":"method"},{"ref":{"refId":"dart_web_toolkit_place/Historian","name":"Historian"},"id":"_historian","name":"_historian","isPrivate":true,"line":"13","kind":"variable"},{"ref":{"refId":"dart_web_toolkit_place/PlaceHistoryMapper","name":"PlaceHistoryMapper"},"id":"_mapper","name":"_mapper","isPrivate":true,"line":"15","kind":"variable"},{"ref":{"refId":"dart_web_toolkit_place/PlaceController","name":"PlaceController"},"id":"_placeController","name":"_placeController","isPrivate":true,"line":"17","kind":"variable"},{"ref":{"refId":"dart_web_toolkit_place/Place","name":"Place"},"id":"_defaultPlace","name":"_defaultPlace","isPrivate":true,"line":"19","kind":"variable"},{"id":"2()","comment":"\nCreate a new PlaceHistoryHandler.\n\n@param mapper a {@link PlaceHistoryMapper} instance\n@param historian a {@link Historian} instance\n","name":"","children":[{"initializedField":{"refId":"dart_web_toolkit_place/PlaceHistoryHandler/_mapper","name":"_mapper"},"ref":{"refId":"dart_web_toolkit_place/PlaceHistoryMapper","name":"PlaceHistoryMapper"},"id":"_mapper","name":"_mapper","isPrivate":true,"kind":"param"},{"ref":{"refId":"dart_web_toolkit_place/Historian","name":"Historian"},"isOptional":true,"defaultValue":"null","id":"historian","name":"historian","kind":"param"}],"line":"27","kind":"constructor"}],"line":"10","kind":"class"},{"interfaces":[{"refId":"dart_web_toolkit_event/HandlerRegistration","name":"HandlerRegistration"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"ClosingHandlerRegistration","comment":"\nClass wrapping window's before closing event in HandlerRegistration manner.\n","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/place/place_controller.dart","name":"ClosingHandlerRegistration","children":[{"returnType":{"refId":"void","name":"void"},"id":"_onData1()","name":"_onData","isPrivate":true,"children":[{"ref":{"refId":"dart.dom.html/Event","name":"Event"},"id":"evt","name":"evt","kind":"param"}],"line":"158","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"removeHandler0()","comment":"\nDeregisters the handler associated with this registration object if the\nhandler is still attached to the event source. If the handler is no longer\nattached to the event source, this is a no-op.\n","name":"removeHandler","line":"168","kind":"method"},{"ref":{"refId":"dart_web_toolkit_event/ClosingHandler","name":"ClosingHandler"},"id":"_handler","name":"_handler","isPrivate":true,"line":"151","kind":"variable"},{"ref":{"refId":"dart.async/StreamSubscription","name":"StreamSubscription"},"id":"listener","name":"listener","line":"152","kind":"variable"},{"id":"1()","name":"","children":[{"id":"_handler","name":"_handler","isPrivate":true,"kind":"param"}],"line":"154","kind":"constructor"}],"line":"149","kind":"class"},{"interfaces":[{"refId":"dart_web_toolkit_place/Delegate","name":"Delegate"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"DefaultDelegate","comment":"\nDefault implementation of {@link Delegate}, based on {@link Window}.\n","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/place/place_controller.dart","name":"DefaultDelegate","children":[{"returnType":{"refId":"dart_web_toolkit_event/HandlerRegistration","name":"HandlerRegistration"},"id":"addWindowClosingHandler1()","name":"addWindowClosingHandler","children":[{"ref":{"refId":"dart_web_toolkit_event/ClosingHandler","name":"ClosingHandler"},"id":"handler","name":"handler","kind":"param"}],"line":"137","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"confirm1()","name":"confirm","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"message","name":"message","kind":"param"}],"line":"141","kind":"method"}],"line":"135","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"Delegate","comment":"\nOptional _delegate in charge of Window-related events. Provides nice\nisolation for unit testing, and allows customization of confirmation\nhandling.\n","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/place/place_controller.dart","name":"Delegate","children":[{"returnType":{"refId":"dart_web_toolkit_event/HandlerRegistration","name":"HandlerRegistration"},"id":"addWindowClosingHandler1()","comment":"\nAdds a {@link ClosingHandler} to the Delegate.\n\n@param handler a {@link ClosingHandler} instance\n@return a {@link HandlerRegistration} instance\n","name":"addWindowClosingHandler","children":[{"ref":{"refId":"dart_web_toolkit_event/ClosingHandler","name":"ClosingHandler"},"id":"handler","name":"handler","kind":"param"}],"line":"121","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"confirm1()","comment":"\nCalled to confirm a window closing event.\n\n@param message a warning message\n@return true to allow the window closing\n","name":"confirm","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"message","name":"message","kind":"param"}],"line":"129","kind":"method"}],"line":"114","kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"PlaceController","comment":"\nIn charge of the user's location in the app.\n","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/place/place_controller.dart","name":"PlaceController","children":[{"returnType":{"refId":"dart_web_toolkit_place/Place","name":"Place"},"id":"getWhere0()","comment":"\nReturns the current place.\n\n@return a {@link Place} instance\n","name":"getWhere","line":"64","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"goTo1()","comment":"\nRequest a change to a new place. It is not a given that we'll actually get\nthere. First a {@link PlaceChangeRequestEvent} will be posted to the event\nbus. If any receivers post a warning message to that event, it will be\npresented to the user via {@link Delegate#confirm(String)} (which is\ntypically a call to {@link Window#confirm(String)}). If she cancels, the\ncurrent location will not change. Otherwise, the location changes and a\n{@link PlaceChangeEvent} is posted announcing the new place.\n\n@param newPlace a {@link Place} instance\n","name":"goTo","children":[{"ref":{"refId":"dart_web_toolkit_place/Place","name":"Place"},"id":"newPlace","name":"newPlace","kind":"param"}],"line":"79","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"maybeGoTo1()","name":"maybeGoTo","children":[{"ref":{"refId":"dart_web_toolkit_place/Place","name":"Place"},"id":"newPlace","name":"newPlace","kind":"param"}],"line":"101","kind":"method"},{"ref":{"refId":"dart_web_toolkit_event/EventBus","name":"EventBus"},"isFinal":true,"id":"_eventBus","name":"_eventBus","isPrivate":true,"line":"13","kind":"variable"},{"ref":{"refId":"dart_web_toolkit_place/Delegate","name":"Delegate"},"id":"_delegate","name":"_delegate","isPrivate":true,"line":"15","kind":"variable"},{"ref":{"refId":"dart_web_toolkit_place/Place","name":"Place"},"id":"_where","name":"_where","isPrivate":true,"line":"16","kind":"variable"},{"id":"2()","comment":"\nCreate a new PlaceController.\n\n@param _eventBus the {@link EventBus}\n@param _delegate the {@link Delegate} in charge of Window-related events\n","name":"","children":[{"initializedField":{"refId":"dart_web_toolkit_place/PlaceController/_eventBus","name":"_eventBus"},"ref":{"refId":"dart_web_toolkit_event/EventBus","name":"EventBus"},"id":"_eventBus","name":"_eventBus","isPrivate":true,"kind":"param"},{"ref":{"refId":"dart_web_toolkit_place/Delegate","name":"Delegate"},"isOptional":true,"defaultValue":"null","id":"delegate","name":"delegate","kind":"param"}],"line":"44","kind":"constructor"}],"line":"9","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart_web_toolkit_event/EventHandler","name":"EventHandler"},"id":"PlaceChangeRequestEventHandler","comment":"\nImplemented by handlers of PlaceChangeRequestEvent.\n","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/place/place_change_request_event_handler.dart","name":"PlaceChangeRequestEventHandler","children":[{"returnType":{"refId":"void","name":"void"},"id":"onPlaceChangeRequest1()","comment":"\nCalled when a {@link PlaceChangeRequestEvent} is fired.\n\n@param event the {@link PlaceChangeRequestEvent}\n","name":"onPlaceChangeRequest","children":[{"ref":{"refId":"dart_web_toolkit_place/PlaceChangeRequestEvent","name":"PlaceChangeRequestEvent"},"id":"event","name":"event","kind":"param"}],"line":"15","kind":"method"}],"line":"9","kind":"class"},{"superclass":{"refId":"dart_web_toolkit_event/DwtEvent","name":"DwtEvent"},"id":"PlaceChangeRequestEvent","comment":"\nEvent thrown when the user may go to a new place in the app, or tries to\nleave it. Receivers can call {@link #setWarning(String)} request that the\nuser be prompted to confirm the change.\n","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/place/place_change_request_event.dart","name":"PlaceChangeRequestEvent","children":[{"returnType":{"refId":"dart_web_toolkit_event/EventType","arguments":[{"refId":"dart_web_toolkit_place/PlaceChangeRequestEventHandler","name":"PlaceChangeRequestEventHandler"}],"name":"EventType"},"id":"getAssociatedType0()","name":"getAssociatedType","line":"29","kind":"method"},{"returnType":{"refId":"dart_web_toolkit_place/Place","name":"Place"},"id":"getNewPlace0()","comment":"\nReturns the place we may navigate to, or null on window close.\n\n@return a {@link Place} instance\n","name":"getNewPlace","line":"38","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"getWarning0()","comment":"\nReturns the warning message to show the user before allowing the place\nchange, or null if none has been set.\n\n@return the warning message as a String\n@see #setWarning(String)\n","name":"getWarning","line":"49","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"setWarning1()","comment":"\nSet a message to warn the user that it might be unwise to navigate away\nfrom the current place, e.g. due to unsaved changes. If the user clicks\nokay to that message, navigation will be canceled.\n<p>\nCalling with a null warning is the same as not calling the method at all --\nthe user will not be prompted.\n<p>\nOnly the first non-null call to setWarning has any effect. That is, once\nthe warning message has been set it cannot be cleared.\n\n@param warning the warning message as a String\n@see #getWarning()\n","name":"setWarning","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"warning","name":"warning","kind":"param"}],"line":"67","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"dispatch1()","name":"dispatch","children":[{"ref":{"refId":"dart_web_toolkit_place/PlaceChangeRequestEventHandler","name":"PlaceChangeRequestEventHandler"},"id":"handler","name":"handler","kind":"param"}],"line":"73","kind":"method"},{"ref":{"refId":"dart_web_toolkit_event/EventType","arguments":[{"refId":"dart_web_toolkit_place/PlaceChangeRequestEventHandler","name":"PlaceChangeRequestEventHandler"}],"name":"EventType"},"isStatic":true,"id":"TYPE","comment":"\nA singleton instance of Type&lt;Handler&gt;.\n","name":"TYPE","line":"16","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"id":"_warning","name":"_warning","isPrivate":true,"line":"18","kind":"variable"},{"ref":{"refId":"dart_web_toolkit_place/Place","name":"Place"},"isFinal":true,"id":"newPlace","name":"newPlace","line":"20","kind":"variable"},{"id":"1()","comment":"\nConstructs a PlaceChangeRequestEvent for the given {@link Place}.\n\n@param newPlace a {@link Place} instance\n","name":"","children":[{"initializedField":{"refId":"dart_web_toolkit_place/PlaceChangeRequestEvent/newPlace","name":"newPlace"},"ref":{"refId":"dart_web_toolkit_place/Place","name":"Place"},"id":"newPlace","name":"newPlace","kind":"param"}],"line":"27","kind":"constructor"}],"line":"11","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart_web_toolkit_event/EventHandler","name":"EventHandler"},"id":"PlaceChangeEventHandler","comment":"\nImplemented by handlers of PlaceChangeEvent.\n","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/place/place_change_event_handler.dart","name":"PlaceChangeEventHandler","children":[{"returnType":{"refId":"void","name":"void"},"id":"onPlaceChange1()","comment":"\nCalled when a {@link PlaceChangeEvent} is fired.\n\n@param event the {@link PlaceChangeEvent}\n","name":"onPlaceChange","children":[{"ref":{"refId":"dart_web_toolkit_place/PlaceChangeEvent","name":"PlaceChangeEvent"},"id":"event","name":"event","kind":"param"}],"line":"16","kind":"method"}],"line":"10","kind":"class"},{"superclass":{"refId":"dart_web_toolkit_event/DwtEvent","name":"DwtEvent"},"id":"PlaceChangeEvent","comment":"\nEvent thrown when the user has reached a new location in the app.\n","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/place/place_change_event.dart","name":"PlaceChangeEvent","children":[{"returnType":{"refId":"dart_web_toolkit_event/EventType","arguments":[{"refId":"dart_web_toolkit_place/PlaceChangeEventHandler","name":"PlaceChangeEventHandler"}],"name":"EventType"},"id":"getAssociatedType0()","name":"getAssociatedType","line":"26","kind":"method"},{"returnType":{"refId":"dart_web_toolkit_place/Place","name":"Place"},"id":"getNewPlace0()","comment":"\nReturn the new {@link Place}.\n\n@return a {@link Place} instance\n","name":"getNewPlace","line":"35","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"dispatch1()","name":"dispatch","children":[{"ref":{"refId":"dart_web_toolkit_place/PlaceChangeEventHandler","name":"PlaceChangeEventHandler"},"id":"handler","name":"handler","kind":"param"}],"line":"39","kind":"method"},{"ref":{"refId":"dart_web_toolkit_event/EventType","arguments":[{"refId":"dart_web_toolkit_place/PlaceChangeEventHandler","name":"PlaceChangeEventHandler"}],"name":"EventType"},"isStatic":true,"id":"TYPE","comment":"\nA singleton instance of Type.\n","name":"TYPE","line":"15","kind":"variable"},{"ref":{"refId":"dart_web_toolkit_place/Place","name":"Place"},"id":"_newPlace","name":"_newPlace","isPrivate":true,"line":"17","kind":"variable"},{"id":"1()","comment":"\nConstructs a PlaceChangeEvent for the given {@link Place}.\n\n@param _newPlace a {@link Place} instance\n","name":"","children":[{"initializedField":{"refId":"dart_web_toolkit_place/PlaceChangeEvent/_newPlace","name":"_newPlace"},"ref":{"refId":"dart_web_toolkit_place/Place","name":"Place"},"id":"_newPlace","name":"_newPlace","isPrivate":true,"kind":"param"}],"line":"24","kind":"constructor"}],"line":"9","kind":"class"},{"interfaces":[{"refId":"dart_web_toolkit_place/Place","name":"Place"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"_Place","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/place/place.dart","name":"_Place","isPrivate":true,"line":"20","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"Place","comment":"\nRepresents a bookmarkable location in an app. Implementations are expected to\nprovide correct {@link Object#equals(Object)} and {@link Object#hashCode()}\nmethods.\n","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/place/place.dart","name":"Place","children":[{"ref":{"refId":"dart_web_toolkit_place/Place","name":"Place"},"isFinal":true,"isStatic":true,"id":"NOWHERE","comment":"\nThe null place.\n","name":"NOWHERE","line":"16","kind":"variable"}],"line":"11","kind":"class"}],"line":"7","kind":"library"}
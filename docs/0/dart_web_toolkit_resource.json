{"dependencies":[{"kind":"library","name":"dart:core","id":"dart.core","comment":"\n\nBuilt-in types, collections,\nand other core functionality for every Dart program.\n\nThis library is automatically imported.\n\nSome classes in this library,\nsuch as [String] and [num],\nsupport Dart's built-in data types.\nOther classes, such as [List] and [Map], provide data structures\nfor managing collections of objects.\nAnd still other classes represent commonly used types of data\nsuch as URIs, dates and times, and errors.\n\n## Numbers and booleans\n\n[int] and [double] provide support for Dart's built-in numerical data types:\nintegers and double-precision floating point numbers, respectively.\nAn object of type [bool] is either true or false.\nVariables of these types can be constructed from literals:\n\n    int meaningOfLife = 42;\n    double valueOfPi  = 3.141592;\n    bool visible      = true;\n\n## Strings and regular expressions\n\nA [String] is immutable and represents a sequence of characters.\n\n    String shakespeareQuote = \"All the world's a stage, ...\";\n\n[StringBuffer] provides a way to construct strings efficiently.\n\n    StringBuffer moreShakespeare = new StringBuffer();\n    moreShakespeare.write('And all the men and women ');\n    moreShakespeare.write('merely players; ...');\n\nThe String and StringBuffer classes implement string concatenation,\ninterpolation, and other string manipulation features.\n\n    String philosophy = 'Live on ';\n    String get palindrome => philosophy + philosophy.split('').reversed.join();\n\n[RegExp] implements Dart regular expressions,\nwhich provide a grammar for matching patterns within text.\nFor example, here's a regular expression that matches\na string of one or more digits:\n\n    var numbers = new RegExp(r'\\d+');\n\nDart regular expressions have the same syntax and semantics as\nJavaScript regular expressions. See\n<http://ecma-international.org/ecma-262/5.1/#sec-15.10>\nfor the specification of JavaScript regular expressions.\n\n## Collections\n\nThe dart:core library provides basic collections,\nsuch as [List], [Map], and [Set].\n\nA List is an ordered collection of objects, with a length.\nLists are sometimes called arrays.\nUse a List when you need to access objects by index.\n\n    List superheroes = [ 'Batman', 'Superman', 'Harry Potter' ];\n\nA Set is an unordered collection of unique objects.\nYou cannot get an item by index (position).\nAdding a duplicate item has no effect.\n\n    Set villians = new Set();\n    villians.add('Joker');\n    villians.addAll( ['Lex Luther', 'Voldemort'] );\n\nA Map is an unordered collection of key-value pairs.\nMaps are sometimes called associative arrays because\nmaps associate a key to some value for easy retrieval.\nKeys are unique.\nUse a Map when you need to access objects\nby a unique identifier.\n\n    Map sidekicks = { 'Batman': 'Robin',\n                      'Superman': 'Lois Lane',\n                      'Harry Potter': 'Ron and Hermione' };\n\nIn addition to these classes,\ndart:core contains [Iterable],\nan interface that defines functionality\ncommon in collections of objects.\nExamples include the ability\nto run a function on each element in the collection,\nto apply a test to each element, \nto retrieve an object, and to determine length.\n\nIterable is implemented by List and Set,\nand used by Map for its keys and values.\n\nFor other kinds of collections, check out the\n[dart:collection](#dart-collection) library.\n\n## Date and time\n\nUse [DateTime] to represent a point in time\nand [Duration] to represent a span of time.\n\nYou can create DateTime objects with constructors\nor by parsing a correctly formatted string.\n\n    DateTime now = new DateTime.now();\n    DateTime berlinWallFell = new DateTime(1989, 11, 9);\n    DateTime moonLanding = DateTime.parse(\"1969-07-20\");\n\nCreate a Duration object specifying the individual time units.\n\n    Duration timeRemaining = new Duration(hours:56, minutes:14);\n\nIn addition to DateTime and Duration,\ndart:core contains the [Stopwatch] class for measuring elapsed time.\n    \n## Uri\n\nA [Uri] object represents a uniform resource identifier,\nwhich identifies a resource on the web.\n\n    Uri dartlang = Uri.parse('http://dartlang.org/');\n    \n## Errors\n\nThe [Error] class represents the occurrence of an error\nduring runtime.\nSubclasses of this class represent specific kinds of errors.\n\n## Other documentation\n\nFor more information about how to use the built-in types, refer to\n[Built-in Types](http://www.dartlang.org/docs/dart-up-and-running/contents/ch02.html#built-in-types)\nin Chapter 2 of\n[Dart: Up and Running](http://www.dartlang.org/docs/dart-up-and-running/).\n\nAlso, see\n[dart:core - Numbers, Collections, Strings, and More](http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-dartcore---strings-collections-and-more)\nfor more coverage of classes in this package.\n\nThe \n[Dart Language Specification](https://www.dartlang.org/docs/spec/)\nprovides technical details.\n","children":[{"kind":"class","name":"Object","id":"Object","comment":"\nEverything in Dart is an [Object].\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"==","id":"==1()","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nOverride this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:\n\n * Total: It must return a boolean for all arguments. It should never throw\n   or return `null`.\n\n * Reflexive: For all objects `o`, `o == o` must be true.\n\n * Symmetric: For all objects `o1` and `o2`, `o1 == o2` and `o2 == o1` must\n   either both be true, or both be false.\n\n * Transitive: For all objects `o1`, `o2`, and `o3`, if `o1 == o2` and\n   `o2 == o3` are true, then `o1 == o3` must be true.\n\nThe method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","children":[{"kind":"param","name":"other","id":"other"}],"line":"48"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","comment":"\nReturns a string representation of this object.\n","line":"67"},{"kind":"method","name":"noSuchMethod","id":"noSuchMethod1()","comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","children":[{"ref":{"name":"Invocation","refId":"dart.core/Invocation"},"kind":"param","name":"invocation","id":"invocation"}],"line":"79"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"hashCode","id":"hashCode","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","line":"62"},{"ref":{"name":"Type","refId":"dart.core/Type"},"kind":"property","name":"runtimeType","id":"runtimeType","comment":"\nA representation of the runtime type of the object.\n","line":"84"},{"kind":"constructor","name":"","id":"0()","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","line":"18"}],"uri":"dart-sdk/lib/core/object.dart","line":"10"}],"uri":"dart-sdk/lib/core/core.dart","line":"153"},{"kind":"library","id":"dart_web_toolkit_util","comment":"\nDart Web Toolkit Util library.\n","children":[{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Enum","id":"Enum","comment":"\nEmulation of Java Enum class.\n\nExample:\n\nclass Meter<int> extends Enum<int> {\n\n const Meter(int val) : super (val);\n\n static const Meter HIGH = const Meter(100);\n static const Meter MIDDLE = const Meter(50);\n static const Meter LOW = const Meter(10);\n}\n\nand usage:\n\nassert (Meter.HIGH, 100);\nassert (Meter.HIGH is Meter);\n","children":[{"ref":{"name":"T","refId":"dart_web_toolkit_util/Enum/T"},"kind":"property","name":"value","id":"value","line":"31"},{"ref":{"name":"T","refId":"dart_web_toolkit_util/Enum/T"},"isFinal":true,"kind":"variable","name":"_value","id":"_value","isPrivate":true,"line":"27"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"T","refId":"dart_web_toolkit_util/Enum/T"},"initializedField":{"name":"_value","refId":"dart_web_toolkit_util/Enum/_value"},"kind":"param","name":"_value","id":"_value","isPrivate":true}],"line":"29"},{"kind":"typeparam","name":"T","id":"T"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/util/enum.dart","line":"25"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/util.dart","line":"7"}],"kind":"library","id":"dart_web_toolkit_resource","comment":"\nDart Web Toolkit Resource library.\n","children":[{"superclass":{"name":"Object","refId":"dart.core/Object"},"interfaces":[{"name":"ImageResource","refId":"dart_web_toolkit_resource/ImageResource"}],"kind":"class","name":"ImageResourcePrototype","id":"ImageResourcePrototype","comment":"\nThis is part of an implementation of the ImageBundle optimization implemented\nwith ClientBundle.\n","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"isFinal":true,"kind":"variable","name":"animated","id":"animated","line":"12"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isFinal":true,"kind":"variable","name":"lossy","id":"lossy","line":"13"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"name","id":"name","line":"14"},{"ref":{"name":"SafeUri","refId":"dart_web_toolkit_util/SafeUri"},"isFinal":true,"kind":"variable","name":"url","id":"url","line":"15"},{"ref":{"name":"int","refId":"dart.core/int"},"isFinal":true,"kind":"variable","name":"left","id":"left","line":"16"},{"ref":{"name":"int","refId":"dart.core/int"},"isFinal":true,"kind":"variable","name":"top","id":"top","line":"17"},{"ref":{"name":"int","refId":"dart.core/int"},"isFinal":true,"kind":"variable","name":"width","id":"width","line":"18"},{"ref":{"name":"int","refId":"dart.core/int"},"isFinal":true,"kind":"variable","name":"height","id":"height","line":"19"},{"kind":"constructor","name":"","id":"8()","comment":"\nOnly called by generated code.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"name","refId":"dart_web_toolkit_resource/ImageResourcePrototype/name"},"kind":"param","name":"name","id":"name"},{"ref":{"name":"SafeUri","refId":"dart_web_toolkit_util/SafeUri"},"initializedField":{"name":"url","refId":"dart_web_toolkit_resource/ImageResourcePrototype/url"},"kind":"param","name":"url","id":"url"},{"ref":{"name":"int","refId":"dart.core/int"},"initializedField":{"name":"left","refId":"dart_web_toolkit_resource/ImageResourcePrototype/left"},"kind":"param","name":"left","id":"left"},{"ref":{"name":"int","refId":"dart.core/int"},"initializedField":{"name":"top","refId":"dart_web_toolkit_resource/ImageResourcePrototype/top"},"kind":"param","name":"top","id":"top"},{"ref":{"name":"int","refId":"dart.core/int"},"initializedField":{"name":"width","refId":"dart_web_toolkit_resource/ImageResourcePrototype/width"},"kind":"param","name":"width","id":"width"},{"ref":{"name":"int","refId":"dart.core/int"},"initializedField":{"name":"height","refId":"dart_web_toolkit_resource/ImageResourcePrototype/height"},"kind":"param","name":"height","id":"height"},{"ref":{"name":"bool","refId":"dart.core/bool"},"initializedField":{"name":"animated","refId":"dart_web_toolkit_resource/ImageResourcePrototype/animated"},"kind":"param","name":"animated","id":"animated","line":"25"},{"ref":{"name":"bool","refId":"dart.core/bool"},"initializedField":{"name":"lossy","refId":"dart_web_toolkit_resource/ImageResourcePrototype/lossy"},"kind":"param","name":"lossy","id":"lossy","line":"25"}],"line":"24"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/resource/impl/image_resource_prototype.dart","line":"10"},{"superclass":{"name":"Enum","refId":"dart_web_toolkit_util/Enum","arguments":[{"name":"int","refId":"dart_web_toolkit_resource/RepeatStyle/int"}]},"kind":"class","name":"RepeatStyle","id":"RepeatStyle","comment":"\nIndicates that an ImageResource should be bundled in such a way as to\nsupport horizontal or vertical repetition.\n","children":[{"ref":{"name":"RepeatStyle","refId":"dart_web_toolkit_resource/RepeatStyle"},"isStatic":true,"kind":"variable","name":"None","id":"None","comment":"\nThe image is not intended to be tiled.\n","line":"105"},{"ref":{"name":"RepeatStyle","refId":"dart_web_toolkit_resource/RepeatStyle"},"isStatic":true,"kind":"variable","name":"Horizontal","id":"Horizontal","comment":"\nThe image is intended to be tiled horizontally.\n","line":"110"},{"ref":{"name":"RepeatStyle","refId":"dart_web_toolkit_resource/RepeatStyle"},"isStatic":true,"kind":"variable","name":"Vertical","id":"Vertical","comment":"\nThe image is intended to be tiled vertically.\n","line":"115"},{"ref":{"name":"RepeatStyle","refId":"dart_web_toolkit_resource/RepeatStyle"},"isStatic":true,"kind":"variable","name":"Both","id":"Both","comment":"\nThe image is intended to be tiled both horizontally and vertically. Note\nthat this will prevent compositing of the particular image in most cases.\n","line":"121"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"int","refId":"dart_web_toolkit_resource/RepeatStyle/int"},"kind":"param","name":"type","id":"type"}],"line":"100"},{"kind":"typeparam","name":"int","id":"int"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/resource/image_resource.dart","line":"98"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"ImageOptions","id":"ImageOptions","comment":"\nSpecifies additional options to control how an image is bundled.\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"flipRtl","id":"flipRtl0()","comment":"\nIf <code>true</code>, the image will be flipped about the y-axis when\n{@link com.google.gwt.i18n.client.LocaleInfo#isRTL()} returns\n<code>true</code>. This is intended to be used by graphics that are\nsensitive to layout direction, such as arrows and disclosure indicators.\n","line":"57"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"height","id":"height0()","comment":"\nSet to a positive value to override the image's intrinsic height. The\nimage bundling code will scale the image to the desired height. If only\none of <code>width</code> or <code>height</code> are set, the aspect\nratio of the image will be maintained.\n","line":"65"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"preventInlining","id":"preventInlining0()","comment":"\nSet to {@code true} to require the ImageResource to be downloaded as a\nseparate resource at runtime. Specifically, this will disable the use of\n{@code data:} URLs or other bundling optimizations for the image. This\ncan be used for infrequently-displayed images.\n","line":"73"},{"returnType":{"name":"RepeatStyle","refId":"dart_web_toolkit_resource/RepeatStyle"},"kind":"method","name":"repeatStyle","id":"repeatStyle0()","comment":"\nThis option affects the image bundling optimization to allow the image to\nbe used with the {@link CssResource} {@code @sprite} rule where\nrepetition of the image is desired.\n\n@see \"CssResource documentation\"\n","line":"83"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"width","id":"width0()","comment":"\nSet to a positive value to override the image's intrinsic width. The\nimage bundling code will scale the image to the desired width. If only\none of <code>width</code> or <code>height</code> are set, the aspect\nratio of the image will be maintained.\n","line":"91"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/resource/image_resource.dart","line":"50"},{"superclass":{"name":"ResourcePrototype","refId":"dart_web_toolkit_resource/ResourcePrototype"},"isAbstract":true,"kind":"class","name":"ImageResource","id":"ImageResource","comment":"\nProvides access to image resources at runtime.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"height","id":"height","comment":"\nReturns the height of the image.\n","line":"16"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"left","id":"left","comment":"\nReturns the horizontal position of the image within the composite image.\n","line":"21"},{"ref":{"name":"SafeUri","refId":"dart_web_toolkit_util/SafeUri"},"kind":"property","name":"url","id":"url","comment":"\nReturns the URL for the composite image that contains the ImageResource.\n","line":"26"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"top","id":"top","comment":"\nReturns the vertical position of the image within the composite image.\n","line":"31"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"width","id":"width","comment":"\nReturns the width of the image.\n","line":"36"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"animated","id":"animated","comment":"\nReturn <code>true</code> if the image contains multiple frames.\n","line":"41"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/resource/image_resource.dart","line":"11"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"ResourcePrototype","id":"ResourcePrototype","comment":"\nThe base interface all bundle resource types must extend.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"name","id":"name","comment":"\nReturns the name of the function within the ClientBundle used to create the\nResourcePrototype.\n\n@return the name of the function within the ClientBundle used to create the\n        ResourcePrototype\n","line":"17"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/resource/resource_prototype.dart","line":"9"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Source","id":"Source","comment":"\nSpecifies the classpath location of the resource or resources associated\nwith the {@link ResourcePrototype}.\n","children":[{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"method","name":"value","id":"value0()","line":"23"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/resource/client_bundle.dart","line":"22"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"ClientBundle","id":"ClientBundle","comment":"\nThe use of this interface is similar to that of ImageBundle. Declare\nno-argument functions that return subclasses of {@link ResourcePrototype},\nwhich are annotated with {@link ClientBundle.Source} annotations specifying\nthe classpath location of the resource to include in the output. At runtime,\nthe functions will return an object that can be used to access the data in\nthe original resource.\n","children":[{"ref":{"name":"Source","refId":"dart_web_toolkit_resource/Source"},"kind":"property","name":"source","id":"source","line":"15"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/resource/client_bundle.dart","line":"14"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/resource.dart","line":"7"}
{"dependencies":[{"kind":"library","name":"dart:core","id":"dart.core","comment":"\n\nBuilt-in types, collections,\nand other core functionality for every Dart program.\n\nThis library is automatically imported.\n\nSome classes in this library,\nsuch as [String] and [num],\nsupport Dart's built-in data types.\nOther classes, such as [List] and [Map], provide data structures\nfor managing collections of objects.\nAnd still other classes represent commonly used types of data\nsuch as URIs, dates and times, and errors.\n\n## Numbers and booleans\n\n[int] and [double] provide support for Dart's built-in numerical data types:\nintegers and double-precision floating point numbers, respectively.\nAn object of type [bool] is either true or false.\nVariables of these types can be constructed from literals:\n\n    int meaningOfLife = 42;\n    double valueOfPi  = 3.141592;\n    bool visible      = true;\n\n## Strings and regular expressions\n\nA [String] is immutable and represents a sequence of characters.\n\n    String shakespeareQuote = \"All the world's a stage, ...\";\n\n[StringBuffer] provides a way to construct strings efficiently.\n\n    StringBuffer moreShakespeare = new StringBuffer();\n    moreShakespeare.write('And all the men and women ');\n    moreShakespeare.write('merely players; ...');\n\nThe String and StringBuffer classes implement string concatenation,\ninterpolation, and other string manipulation features.\n\n    String philosophy = 'Live on ';\n    String get palindrome => philosophy + philosophy.split('').reversed.join();\n\n[RegExp] implements Dart regular expressions,\nwhich provide a grammar for matching patterns within text.\nFor example, here's a regular expression that matches\na string of one or more digits:\n\n    var numbers = new RegExp(r'\\d+');\n\nDart regular expressions have the same syntax and semantics as\nJavaScript regular expressions. See\n<http://ecma-international.org/ecma-262/5.1/#sec-15.10>\nfor the specification of JavaScript regular expressions.\n\n## Collections\n\nThe dart:core library provides basic collections,\nsuch as [List], [Map], and [Set].\n\nA List is an ordered collection of objects, with a length.\nLists are sometimes called arrays.\nUse a List when you need to access objects by index.\n\n    List superheroes = [ 'Batman', 'Superman', 'Harry Potter' ];\n\nA Set is an unordered collection of unique objects.\nYou cannot get an item by index (position).\nAdding a duplicate item has no effect.\n\n    Set villians = new Set();\n    villians.add('Joker');\n    villians.addAll( ['Lex Luther', 'Voldemort'] );\n\nA Map is an unordered collection of key-value pairs.\nMaps are sometimes called associative arrays because\nmaps associate a key to some value for easy retrieval.\nKeys are unique.\nUse a Map when you need to access objects\nby a unique identifier.\n\n    Map sidekicks = { 'Batman': 'Robin',\n                      'Superman': 'Lois Lane',\n                      'Harry Potter': 'Ron and Hermione' };\n\nIn addition to these classes,\ndart:core contains [Iterable],\nan interface that defines functionality\ncommon in collections of objects.\nExamples include the ability\nto run a function on each element in the collection,\nto apply a test to each element, \nto retrieve an object, and to determine length.\n\nIterable is implemented by List and Set,\nand used by Map for its keys and values.\n\nFor other kinds of collections, check out the\n[dart:collection](#dart-collection) library.\n\n## Date and time\n\nUse [DateTime] to represent a point in time\nand [Duration] to represent a span of time.\n\nYou can create DateTime objects with constructors\nor by parsing a correctly formatted string.\n\n    DateTime now = new DateTime.now();\n    DateTime berlinWallFell = new DateTime(1989, 11, 9);\n    DateTime moonLanding = DateTime.parse(\"1969-07-20\");\n\nCreate a Duration object specifying the individual time units.\n\n    Duration timeRemaining = new Duration(hours:56, minutes:14);\n\nIn addition to DateTime and Duration,\ndart:core contains the [Stopwatch] class for measuring elapsed time.\n    \n## Uri\n\nA [Uri] object represents a uniform resource identifier,\nwhich identifies a resource on the web.\n\n    Uri dartlang = Uri.parse('http://dartlang.org/');\n    \n## Errors\n\nThe [Error] class represents the occurrence of an error\nduring runtime.\nSubclasses of this class represent specific kinds of errors.\n\n## Other documentation\n\nFor more information about how to use the built-in types, refer to\n[Built-in Types](http://www.dartlang.org/docs/dart-up-and-running/contents/ch02.html#built-in-types)\nin Chapter 2 of\n[Dart: Up and Running](http://www.dartlang.org/docs/dart-up-and-running/).\n\nAlso, see\n[dart:core - Numbers, Collections, Strings, and More](http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-dartcore---strings-collections-and-more)\nfor more coverage of classes in this package.\n\nThe \n[Dart Language Specification](https://www.dartlang.org/docs/spec/)\nprovides technical details.\n","children":[{"kind":"class","name":"Object","id":"Object","comment":"\nEverything in Dart is an [Object].\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"==","id":"==1()","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nOverride this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:\n\n * Total: It must return a boolean for all arguments. It should never throw\n   or return `null`.\n\n * Reflexive: For all objects `o`, `o == o` must be true.\n\n * Symmetric: For all objects `o1` and `o2`, `o1 == o2` and `o2 == o1` must\n   either both be true, or both be false.\n\n * Transitive: For all objects `o1`, `o2`, and `o3`, if `o1 == o2` and\n   `o2 == o3` are true, then `o1 == o3` must be true.\n\nThe method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","children":[{"kind":"param","name":"other","id":"other"}],"line":"48"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","comment":"\nReturns a string representation of this object.\n","line":"67"},{"kind":"method","name":"noSuchMethod","id":"noSuchMethod1()","comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","children":[{"ref":{"name":"Invocation","refId":"dart.core/Invocation"},"kind":"param","name":"invocation","id":"invocation"}],"line":"79"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"hashCode","id":"hashCode","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","line":"62"},{"ref":{"name":"Type","refId":"dart.core/Type"},"kind":"property","name":"runtimeType","id":"runtimeType","comment":"\nA representation of the runtime type of the object.\n","line":"84"},{"kind":"constructor","name":"","id":"0()","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","line":"18"}],"uri":"dart-sdk/lib/core/object.dart","line":"10"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Iterable","id":"Iterable","comment":"\nAn object that uses an [Iterator] to serve objects one at a time.\n\nYou can iterate over all objects served by an Iterable object\nusing the for-in loop construct.\nFor example, you can iterate over all of the keys in a [Map],\nbecause Map keys are iterable.\n\n    Map kidsBooks = {'Matilda': 'Roald Dahl',\n                     'Green Eggs and Ham': 'Dr Seuss',\n                     'Where the Wild Things Are': 'Maurice Sendak'};\n    for (var book in kidsBooks.keys) {\n      print('$book was written by ${kidsBooks[book]}');\n    }\n\nThe [List] class and the [Set] class implement this interface,\nas do classes in the [dart:collection](#dart-collection) library.\n\nYou can implement Iterable in your own class.\nIf you do, then an instance of your Iterable class\ncan be the right-hand side of a for-in construct.\n","children":[{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"method","name":"map","id":"map1()","comment":"\nReturns a lazy [Iterable] where each element [:e:] of `this` is replaced\nby the result of [:f(e):].\n\nThis method returns a view of the mapped elements. As long as the\nreturned [Iterable] is not iterated over, the supplied function [f] will\nnot be invoked. The transformed elements will not be cached. Iterating\nmultiple times over the the returned [Iterable] will invoke the supplied\nfunction [f] multiple times on the same element.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"61"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"61"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"where","id":"where1()","comment":"\nReturns a lazy [Iterable] with all elements that satisfy the\npredicate [test].\n\nThis method returns a view of the mapped elements. As long as the\nreturned [Iterable] is not iterated over, the supplied function [test] will\nnot be invoked. Iterating will not cache results, and thus iterating\nmultiple times over the returned [Iterable] will invoke the supplied\nfunction [test] multiple times on the same element.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"73"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"73"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"method","name":"expand","id":"expand1()","comment":"\nExpands each element of this [Iterable] into zero or more elements.\n\nThe resulting Iterable runs through the elements returned\nby [f] for each element of this, in order.\n\nThe returned [Iterable] is lazy, and calls [f] for each element\nof this every time it's iterated.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"84"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"84"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"contains","id":"contains1()","comment":"\nReturns true if the collection contains an element equal to [element].\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"element","id":"element"}],"line":"89"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"forEach","id":"forEach1()","comment":"\nApplies the function [f] to each element of this collection.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"94"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"94"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"method","name":"reduce","id":"reduce1()","comment":"\nReduces a collection to a single value by iteratively combining elements\nof the collection using the provided function.\n\nExample of calculating the sum of an iterable:\n\n    iterable.reduce((value, element) => value + element);\n\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"combine","id":"combine","children":[{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/core/iterable.dart","line":"105"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"105"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"105"},{"kind":"method","name":"fold","id":"fold2()","comment":"\nReduces a collection to a single value by iteratively combining each\nelement of the collection with an existing value using the provided\nfunction.\n\nUse [initialValue] as the initial value, and the function [combine] to\ncreate a new value from the previous one and an element.\n\nExample of calculating the sum of an iterable:\n\n    iterable.fold(0, (prev, element) => prev + element);\n\n","children":[{"kind":"param","name":"initialValue","id":"initialValue"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"combine","id":"combine","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"previousValue","id":"previousValue","uri":"dart-sdk/lib/core/iterable.dart","line":"121"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"121"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"121"}],"line":"120"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"every","id":"every1()","comment":"\nReturns true if every elements of this collection satisify the\npredicate [test]. Returns `false` otherwise.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"127"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"127"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"join","id":"join1()","comment":"\nConverts each element to a [String] and concatenates the strings.\n\nConverts each element to a [String] by calling [Object.toString] on it.\nThen concatenates the strings, optionally separated by the [separator]\nstring.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"\"\"","isOptional":true,"kind":"param","name":"separator","id":"separator"}],"line":"136"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"any","id":"any1()","comment":"\nReturns true if one element of this collection satisfies the\npredicate [test]. Returns false otherwise.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"146"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"146"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"toList","id":"toList1()","comment":"\nCreates a [List] containing the elements of this [Iterable].\n\nThe elements are in iteration order. The list is fixed-length\nif [growable] is false.\n","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"isNamed":true,"kind":"param","name":"growable","id":"growable"}],"line":"154"},{"returnType":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"toSet","id":"toSet0()","comment":"\nCreates a [Set] containing the elements of this [Iterable].\n","line":"159"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"take","id":"take1()","comment":"\nReturns an [Iterable] with at most [n] elements.\n\nThe returned [Iterable] may contain fewer than [n] elements, if `this`\ncontains fewer than [n] elements.\n\nIt is an error if [n] is negative.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"n","id":"n"}],"line":"187"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"takeWhile","id":"takeWhile1()","comment":"\nReturns an Iterable that stops once [test] is not satisfied anymore.\n\nThe filtering happens lazily. Every new Iterator of the returned\nIterable starts iterating over the elements of `this`.\n\nWhen the iterator encounters an element `e` that does not satisfy [test],\nit discards `e` and moves into the finished state. That is, it does not\nget or provide any more elements.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/core/iterable.dart","line":"199"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"199"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"skip","id":"skip1()","comment":"\nReturns an Iterable that skips the first [n] elements.\n\nIf `this` has fewer than [n] elements, then the resulting Iterable is \nempty.\n\nIt is an error if [n] is negative.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"n","id":"n"}],"line":"209"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"skipWhile","id":"skipWhile1()","comment":"\nReturns an Iterable that skips elements while [test] is satisfied.\n\nThe filtering happens lazily. Every new Iterator of the returned\nIterable iterates over all elements of `this`.\n\nAs long as the iterator's elements satisfy [test] they are\ndiscarded. Once an element does not satisfy the [test] the iterator stops\ntesting and uses every later element unconditionally. That is, the elements\nof the returned Iterable are the elements of `this` starting from the\nfirst element that does not satisfy [test].\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/core/iterable.dart","line":"223"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"223"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"method","name":"firstWhere","id":"firstWhere2()","comment":"\nReturns the first element that satisfies the given predicate [test].\n\nIf none matches, the result of invoking the [orElse] function is\nreturned. By default, when [orElse] is `null`, a [StateError] is\nthrown.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"254"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"orElse","id":"orElse","children":[{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"254"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"method","name":"lastWhere","id":"lastWhere2()","comment":"\nReturns the last element that satisfies the given predicate [test].\n\nIf none matches, the result of invoking the [orElse] function is\nreturned. By default, when [orElse] is `null`, a [StateError] is\nthrown.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"263"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"orElse","id":"orElse","children":[{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"263"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"method","name":"singleWhere","id":"singleWhere1()","comment":"\nReturns the single element that satisfies [test]. If no or more than one\nelement match then a [StateError] is thrown.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"269"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"269"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"method","name":"elementAt","id":"elementAt1()","comment":"\nReturns the [index]th element.\n\nIf `this` has fewer than [index] elements throws a [RangeError].\n\nNote: if `this` does not have a deterministic iteration order then the\nfunction may simply return any element without any iteration if there are\nat least [index] elements in `this`.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"}],"line":"280"},{"ref":{"name":"Iterator","refId":"dart.core/Iterator","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"property","name":"iterator","id":"iterator","comment":"\nReturns an Iterator that iterates over this Iterable object.\n","line":"49"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"length","id":"length","comment":"\nReturns the number of elements in [this].\n\nCounting all elements may be involve running through all elements and can\ntherefore be slow.\n","line":"167"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isEmpty","id":"isEmpty","comment":"\nReturns true if there is no element in this collection.\n","line":"172"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isNotEmpty","id":"isNotEmpty","comment":"\nReturns true if there is at least one element in this collection.\n","line":"177"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"property","name":"first","id":"first","comment":"\nReturns the first element.\n\nIf `this` is empty throws a [StateError]. Otherwise this method is\nequivalent to [:this.elementAt(0):]\n","line":"231"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"property","name":"last","id":"last","comment":"\nReturns the last element.\n\nIf `this` is empty throws a [StateError].\n","line":"238"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"property","name":"single","id":"single","comment":"\nReturns the single element in `this`.\n\nIf `this` is empty or has more than one element throws a [StateError].\n","line":"245"},{"kind":"constructor","name":"","id":"0()","line":"30"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"constructor","name":"generate","id":"generate2()","comment":"\nCreates an Iterable that generates its elements dynamically.\n\nThe Iterators created by the Iterable count from\nzero to [:count - 1:] while iterating, and call [generator]\nwith that index to create the next value.\n\nAs an Iterable, [:new Iterable.generate(n, generator)):] is equivalent to\n[:const [0, ..., n - 1].map(generator):]\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"count","id":"count"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"generator","id":"generator","children":[{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index","uri":"dart-sdk/lib/core/iterable.dart","line":"42"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"42"},{"kind":"typeparam","name":"E","id":"E"}],"uri":"dart-sdk/lib/core/iterable.dart","line":"29"}],"uri":"dart-sdk/lib/core/core.dart","line":"153"},{"kind":"library","id":"dart_web_toolkit_event","comment":"\nDart Web Toolkit Event library.\n","children":[{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"HasSafeHtml","id":"HasSafeHtml","comment":"\nAn object that implements this interface contains text with HTML markup,\nwhich can be set with the Cross-Site-Scripting-safe HTML markup encapsulated\nin a {@link com.google.gwt.safehtml.shared.SafeHtml} object.\n","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/event/has_safe_html.dart","line":"11"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"HasDirectionEstimator","id":"HasDirectionEstimator","comment":"\nInterface for objects that have a direction estimator.\n","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/event/has_direction_estimator.dart","line":"9"},{"superclass":{"name":"EventHandler","refId":"dart_web_toolkit_event/EventHandler"},"isAbstract":true,"kind":"class","name":"KeyUpHandler","id":"KeyUpHandler","comment":"\nHandler interface for {@link KeyUpEvent} events.\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"onKeyUp","id":"onKeyUp1()","comment":"\nCalled when KeyUpEvent is fired.\n\n@param event the {@link KeyUpEvent} that was fired\n","children":[{"ref":{"name":"KeyUpEvent","refId":"dart_web_toolkit_event/KeyUpEvent"},"kind":"param","name":"event","id":"event"}],"line":"16"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/event/key_up_handler.dart","line":"9"},{"superclass":{"name":"HasHandlers","refId":"dart_web_toolkit_event/HasHandlers"},"isAbstract":true,"kind":"class","name":"HasKeyUpHandlers","id":"HasKeyUpHandlers","comment":"\nA widget that implements this interface provides registration for\n{@link KeyUpHandler} instances.\n","children":[{"returnType":{"name":"HandlerRegistration","refId":"dart_web_toolkit_event/HandlerRegistration"},"kind":"method","name":"addKeyUpHandler","id":"addKeyUpHandler1()","comment":"\nAdds a {@link KeyUpEvent} handler.\n\n@param handler the key up handler\n@return {@link HandlerRegistration} used to remove this handler\n","children":[{"ref":{"name":"KeyUpHandler","refId":"dart_web_toolkit_event/KeyUpHandler"},"kind":"param","name":"handler","id":"handler"}],"line":"18"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/event/has_key_up_handlers.dart","line":"10"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"HasText","id":"HasText","comment":"\nAn object that implements this interface contains text, which can be set and\nretrieved using these methods.\n\n<h3>Use in UiBinder Templates</h3>\n<p>\nThe body of an XML element representing a widget that implements\nHasText will be parsed as text and be used in a call to its\n{@link #setText(String)} method. HasText elements must only\ncontain text. (This behavior is overridden for {@link HasHTML}\nwidgets.)\n\n<p>For example:<pre>\n&lt;g:Label>Hello.&lt;/g:Label>\n</pre>\n","children":[{"returnType":{"name":"void","refId":"void"},"isSetter":true,"kind":"method","name":"text=","id":"text=1()","comment":"\nSets this object's text.\n\n@param text the object's new text\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"value","id":"value"}],"line":"36"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"text","id":"text","comment":"\nGets this object's text.\n\n@return the object's text\n","line":"29"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/event/has_text.dart","line":"22"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"interfaces":[{"name":"HasText","refId":"dart_web_toolkit_event/HasText"}],"kind":"class","name":"HasHtml","id":"HasHtml","comment":"\nAn object that implements this interface contains text, which can be set and\nretrieved using these methods. The object's text can be set either as HTML or\nas text.\n\n<h3>Use in UiBinder Templates</h3>\n<p>\nThe body of an XML element representing a widget that implements\nHasHTML will be parsed as HTML and be used in a call to its\n{@link #setHTML(String)} method.\n\n<p>For example:<pre>\n&lt;g:PushButton>&lt;b>Click me!&lt;/b>&lt;/g:PushButton>\n</pre>\n","children":[{"returnType":{"name":"void","refId":"void"},"isSetter":true,"kind":"method","name":"html=","id":"html=1()","comment":"\nSets this object's contents via HTML. Use care when setting an object's\nHTML; it is an easy way to expose script-based security problems. Consider\nusing {@link #setText(String)} whenever possible.\n\n@param html the object's new HTML\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"value","id":"value"}],"line":"37"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"html","id":"html","comment":"\nGets this object's contents as HTML.\n\n@return the object's HTML\n","line":"28"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/event/has_html.dart","line":"21"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"HasHandlers","id":"HasHandlers","comment":"\nAn object that implements this interface has a collection of event handlers\nassociated with it.\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"fireEvent","id":"fireEvent1()","comment":"\nFires the given event to the handlers listening to the event's type.\n\nAny exceptions thrown by handlers will be bundled into a\n[UmbrellaException] and then re-thrown after all handlers have\ncompleted. An exception thrown by a handler will not prevent other handlers\nfrom executing.\n\n@param event the event\n","children":[{"ref":{"name":"DwtEvent","refId":"dart_web_toolkit_event/DwtEvent"},"kind":"param","name":"event","id":"event"}],"line":"22"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/event/has_handlers.dart","line":"10"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"EventHandler","id":"EventHandler","comment":"\nMarker interface for event handlers. All stock GWT Widget and dom event\nhandlers extend [EventHandler].\n","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/event/event_handler.dart","line":"10"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/event.dart","line":"7"},{"kind":"library","id":"dart_web_toolkit_util","comment":"\nDart Web Toolkit Util library.\n","children":[{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Enum","id":"Enum","comment":"\nEmulation of Java Enum class.\n\nExample:\n\nclass Meter<int> extends Enum<int> {\n\n const Meter(int val) : super (val);\n\n static const Meter HIGH = const Meter(100);\n static const Meter MIDDLE = const Meter(50);\n static const Meter LOW = const Meter(10);\n}\n\nand usage:\n\nassert (Meter.HIGH, 100);\nassert (Meter.HIGH is Meter);\n","children":[{"ref":{"name":"T","refId":"dart_web_toolkit_util/Enum/T"},"kind":"property","name":"value","id":"value","line":"31"},{"ref":{"name":"T","refId":"dart_web_toolkit_util/Enum/T"},"isFinal":true,"kind":"variable","name":"_value","id":"_value","isPrivate":true,"line":"27"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"T","refId":"dart_web_toolkit_util/Enum/T"},"initializedField":{"name":"_value","refId":"dart_web_toolkit_util/Enum/_value"},"kind":"param","name":"_value","id":"_value","isPrivate":true}],"line":"29"},{"kind":"typeparam","name":"T","id":"T"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/util/enum.dart","line":"25"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/util.dart","line":"7"}],"kind":"library","id":"dart_web_toolkit_i18n","comment":"\nDart Web Toolkit Event library.\n","children":[{"superclass":{"name":"DefaultCurrencyData","refId":"dart_web_toolkit_i18n/DefaultCurrencyData"},"kind":"class","name":"CurrencyDataImpl","id":"CurrencyDataImpl","comment":"\nA POJO for currency data.\n","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"method","name":"testDefaultFractionDigits","id":"testDefaultFractionDigits1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"flagsAndPrecision","id":"flagsAndPrecision"}],"line":"22"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"isStatic":true,"kind":"method","name":"testDeprecated","id":"testDeprecated1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"flagsAndPrecision","id":"flagsAndPrecision"}],"line":"26"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"isStatic":true,"kind":"method","name":"testSpaceForced","id":"testSpaceForced1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"flagsAndPrecision","id":"flagsAndPrecision"}],"line":"30"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"isStatic":true,"kind":"method","name":"testSpacingFixed","id":"testSpacingFixed1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"flagsAndPrecision","id":"flagsAndPrecision"}],"line":"34"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"isStatic":true,"kind":"method","name":"testSymbolPositionFixed","id":"testSymbolPositionFixed1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"flagsAndPrecision","id":"flagsAndPrecision"}],"line":"38"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"isStatic":true,"kind":"method","name":"testSymbolPrefix","id":"testSymbolPrefix1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"flagsAndPrecision","id":"flagsAndPrecision"}],"line":"42"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"getDefaultFractionDigits","id":"getDefaultFractionDigits0()","line":"79"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"getPortableCurrencySymbol","id":"getPortableCurrencySymbol0()","line":"83"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"getSimpleCurrencySymbol","id":"getSimpleCurrencySymbol0()","line":"87"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"isDeprecated","id":"isDeprecated0()","line":"91"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"isSpaceForced","id":"isSpaceForced0()","line":"95"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"isSpacingFixed","id":"isSpacingFixed0()","line":"99"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"isSymbolPositionFixed","id":"isSymbolPositionFixed0()","line":"103"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"isSymbolPrefix","id":"isSymbolPrefix0()","line":"107"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"isFinal":true,"kind":"variable","name":"DEPRECATED_FLAG","id":"DEPRECATED_FLAG","comment":"\nPublic so CurrencyListGenerator can get to them. As usual with an impl\npackage, external code should not rely on these values.\n","line":"15"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"isFinal":true,"kind":"variable","name":"POS_FIXED_FLAG","id":"POS_FIXED_FLAG","line":"16"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"isFinal":true,"kind":"variable","name":"POS_SUFFIX_FLAG","id":"POS_SUFFIX_FLAG","line":"17"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"isFinal":true,"kind":"variable","name":"PRECISION_MASK","id":"PRECISION_MASK","line":"18"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"isFinal":true,"kind":"variable","name":"SPACE_FORCED_FLAG","id":"SPACE_FORCED_FLAG","line":"19"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"isFinal":true,"kind":"variable","name":"SPACING_FIXED_FLAG","id":"SPACING_FIXED_FLAG","line":"20"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"flagsAndPrecision","id":"flagsAndPrecision","comment":"\nFlags and # of decimal digits.\n\n<pre>\n      d0-d2: # of decimal digits for this currency, 0-7\n      d3:    currency symbol goes after number, 0=before\n      d4:    currency symbol position is based on d3\n      d5:    space is forced, 0=no space present\n      d6:    spacing around currency symbol is based on d5\n</pre>\n","line":"57"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"portableCurrencySymbol","id":"portableCurrencySymbol","comment":"\nPortable currency symbol, may be the same as {@link #getCurrencySymbol()}.\n","line":"62"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"simpleCurrencySymbol","id":"simpleCurrencySymbol","comment":"\nSimple currency symbol, may be the same as {@link #getCurrencySymbol()}.\n","line":"67"},{"kind":"constructor","name":"","id":"5()","comment":"\nCreate a new CurrencyData whose portable symbol is the same as its local\nsymbol.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"currencyCode","id":"currencyCode"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"currencySymbol","id":"currencySymbol"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"flagsAndPrecision","id":"flagsAndPrecision"},{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"null","isOptional":true,"kind":"param","name":"portableCurrencySymbol","id":"portableCurrencySymbol"},{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"null","isOptional":true,"kind":"param","name":"simpleCurrencySymbol","id":"simpleCurrencySymbol"}],"line":"73"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/impl/currency_data_impl.dart","line":"9"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"DateRecord","id":"DateRecord","comment":"\nImplementation detail of DateTimeFormat -- not a API and subject to\nchange.\n\nDateRecord class exposes almost the same set of interface as Date class with\nonly a few exceptions. The main purpose is the record all the information\nduring parsing phase and resolve them in a later time when all information\ncan be processed together.\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"calcDate","id":"calcDate2()","comment":"\ncalcDate uses all the field available so far to fill a Date object. For\nthose information that is not provided, the existing value in 'date' will\nbe kept. Ambiguous year will be resolved after the date/time values are\nresolved.\n\nIf the strict option is set to true, calcDate will calculate certain\ninvalid dates by wrapping around as needed. For example, February 30 will\nwrap to March 2.\n\n@param date The Date object being filled. Its value should be set to an\n         acceptable default before pass in to this method\n@param strict true to be strict when parsing\n@return true if successful, otherwise false.\n","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"kind":"param","name":"date","id":"date"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"strict","id":"strict"}],"line":"60"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setAmbiguousYear","id":"setAmbiguousYear1()","comment":"\nSet ambiguous year field. This flag indicates that a 2 digit years's\ncentury need to be determined by its date/time value. This can only be\nresolved after its date/time is known.\n\n@param ambiguousYear true if it is ambiguous year.\n","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"ambiguousYear","id":"ambiguousYear"}],"line":"227"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setAmpm","id":"setAmpm1()","comment":"\nSet morning/afternoon field.\n\n@param ampm ampm value.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"ampm","id":"ampm"}],"line":"236"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setDayOfMonth","id":"setDayOfMonth1()","comment":"\nSet dayOfMonth field.\n\n@param day dayOfMonth value\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"day","id":"day"}],"line":"245"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setDayOfWeek","id":"setDayOfWeek1()","comment":"\nSet dayOfWeek field.\n\n@param dayOfWeek day of the week.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"dayOfWeek","id":"dayOfWeek"}],"line":"254"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setEra","id":"setEra1()","comment":"\nSet Era field.\n\n@param era era value being set.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"era","id":"era"}],"line":"263"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setHours","id":"setHours1()","comment":"\nSet hour field.\n\n@param hours hour value.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"hours","id":"hours"}],"line":"272"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setMilliseconds","id":"setMilliseconds1()","comment":"\nSet milliseconds field.\n\n@param milliseconds milliseconds value.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"milliseconds","id":"milliseconds"}],"line":"281"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setMinutes","id":"setMinutes1()","comment":"\nSet minute field.\n\n@param minutes minute value.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"minutes","id":"minutes"}],"line":"290"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setMonth","id":"setMonth1()","comment":"\nSet month field.\n\n@param month month value.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"month","id":"month"}],"line":"299"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setSeconds","id":"setSeconds1()","comment":"\nSet seconds field.\n\n@param seconds second value.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"seconds","id":"seconds"}],"line":"308"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setTzOffset","id":"setTzOffset1()","comment":"\nSet timezone offset, in minutes.\n\n@param tzOffset timezone offset.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"tzOffset","id":"tzOffset"}],"line":"317"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setYear","id":"setYear1()","comment":"\nSet year field.\n\n@param value year value.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"value","id":"value"}],"line":"326"},{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"kind":"variable","name":"_date","id":"_date","isPrivate":true,"line":"16"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"isFinal":true,"kind":"variable","name":"AM","id":"AM","line":"18"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"isFinal":true,"kind":"variable","name":"PM","id":"PM","line":"19"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"isFinal":true,"kind":"variable","name":"_JS_START_YEAR","id":"_JS_START_YEAR","isPrivate":true,"line":"21"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"MIN_VALUE","id":"MIN_VALUE","line":"23"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"era","id":"era","line":"25"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"year","id":"year","line":"26"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"month","id":"month","line":"27"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"dayOfMonth","id":"dayOfMonth","line":"28"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"ampm","id":"ampm","line":"29"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"hours","id":"hours","line":"30"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"minutes","id":"minutes","line":"31"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"seconds","id":"seconds","line":"32"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"millisecond","id":"millisecond","line":"33"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"tzOffset","id":"tzOffset","line":"35"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"dayOfWeek","id":"dayOfWeek","line":"36"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"ambiguousYear","id":"ambiguousYear","line":"37"},{"kind":"constructor","name":"","id":"0()","comment":"\nInitialize DateExt object with default value. Here we use -1 for most of\nthe field to indicate that field is not set.\n","line":"43"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/impl/date_record.dart","line":"15"},{"superclass":{"name":"DefaultDateTimeFormatInfo","refId":"dart_web_toolkit_i18n/DefaultDateTimeFormatInfo"},"interfaces":[{"name":"Localizable","refId":"dart_web_toolkit_i18n/Localizable"}],"kind":"class","name":"DateTimeFormatInfoImpl","id":"DateTimeFormatInfoImpl","comment":"\n{@link com.google.gwt.i18n.shared.DateTimeFormatInfo} implementation based on\nUnicode CLDR data.\n","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/impl/date_time_format_info_impl.dart","line":"10"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"LocaleInfoImpl","id":"LocaleInfoImpl","comment":"\nImplementation detail of LocaleInfo -- not a API and subject to\nchange.\n\nGenerated interface for locale information.  The default implementation\nreturns null, which is used if the i18n module is not imported.\n\n@see com.google.gwt.i18n.client.LocaleInfo\n","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"method","name":"getRuntimeLocale","id":"getRuntimeLocale0()","comment":"\nReturns the runtime locale (note that this requires the i18n locale property\nprovider's assistance).\n","line":"20"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"method","name":"getAvailableLocaleNames","id":"getAvailableLocaleNames0()","comment":"\nReturns an array of available locale names.\n","line":"27"},{"returnType":{"name":"DateTimeFormatInfo","refId":"dart_web_toolkit_i18n/DateTimeFormatInfo"},"kind":"method","name":"getDateTimeFormatInfo","id":"getDateTimeFormatInfo0()","comment":"\nCreate a {@link DateTimeFormatInfo} instance appropriate for this locale.\n\nNote that the caller takes care of any caching so subclasses need not\nbother.\n\n@return a {@link DateTimeFormatInfo} instance\n","line":"39"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"getLocaleCookieName","id":"getLocaleCookieName0()","comment":"\nReturns the name of the name of the cookie holding the locale to use,\nwhich is defined in the config property {@code locale.cookie}.\n\n@return locale cookie name, or null if none\n","line":"49"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"getLocaleName","id":"getLocaleName0()","comment":"\nReturns the current locale name, such as \"default, \"en_US\", etc.\n","line":"56"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"getLocaleNativeDisplayName","id":"getLocaleNativeDisplayName1()","comment":"\nReturns the display name of the requested locale in its native locale, if\npossible. If no native localization is available, the English name will\nbe returned, or as a last resort just the locale name will be returned.  If\nthe locale name is unknown (including user overrides), null is returned.\n\n@param localeName the name of the locale to lookup.\n@return the name of the locale in its native locale\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"localeName","id":"localeName"}],"line":"69"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"getLocaleQueryParam","id":"getLocaleQueryParam0()","comment":"\nReturns the name of the query parameter holding the locale to use, which is\ndefined in the config property {@code locale.queryparam}.\n\n@return locale URL query parameter name, or null if none\n","line":"79"},{"returnType":{"name":"NumberConstants","refId":"dart_web_toolkit_i18n/NumberConstants"},"kind":"method","name":"getNumberConstants","id":"getNumberConstants0()","comment":"\nReturns a NumberConstants instance appropriate for this locale.\n","line":"93"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"hasAnyRTL","id":"hasAnyRTL0()","comment":"\nReturns true if any locale supported by this build of the app is RTL.\n","line":"100"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/impl/locale_info_impl.dart","line":"15"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"interfaces":[{"name":"NumberConstants","refId":"dart_web_toolkit_i18n/NumberConstants"},{"name":"Constants","refId":"dart_web_toolkit_i18n/Constants"}],"kind":"class","name":"NumberConstantsImpl","id":"NumberConstantsImpl","comment":"\nNumberConstantsImpl class encapsulate a collection of Number formatting\nsymbols for use with Number format and parse services. This class extends\nGWT's Constants class. The actual symbol collections are defined in a set\nof property files named like \"NumberConstants_xx.properties\". GWT will\nwill perform late binding to the property file that specific to user's\nlocale.\n","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"notANumber","id":"notANumber0()","line":"49"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"currencyPattern","id":"currencyPattern0()","line":"51"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"decimalPattern","id":"decimalPattern0()","line":"53"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"decimalSeparator","id":"decimalSeparator0()","line":"55"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"defCurrencyCode","id":"defCurrencyCode0()","line":"57"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"exponentialSymbol","id":"exponentialSymbol0()","line":"59"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"globalCurrencyPattern","id":"globalCurrencyPattern0()","line":"61"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"groupingSeparator","id":"groupingSeparator0()","line":"63"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"infinity","id":"infinity0()","line":"65"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"minusSign","id":"minusSign0()","line":"67"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"monetaryGroupingSeparator","id":"monetaryGroupingSeparator0()","line":"69"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"monetarySeparator","id":"monetarySeparator0()","line":"71"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"percent","id":"percent0()","line":"73"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"percentPattern","id":"percentPattern0()","line":"75"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"perMill","id":"perMill0()","line":"77"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"plusSign","id":"plusSign0()","line":"79"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"scientificPattern","id":"scientificPattern0()","line":"81"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"simpleCurrencyPattern","id":"simpleCurrencyPattern0()","line":"83"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"zeroDigit","id":"zeroDigit0()","line":"85"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/constants/number_constants.dart","line":"47"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"NumberConstants","id":"NumberConstants","comment":"\nNumberConstants class encapsulate a collection of Number formatting\nsymbols for use with Number format and parse services. This class extends\nGWT's Constants class. The actual symbol collections are defined in a set\nof property files named like \"NumberConstants_xx.properties\". GWT will\nwill perform late binding to the property file that specific to user's\nlocale.\n\nIf you previously were using GWT.create on this interface, you should\nuse LocaleInfo.getCurrentLocale().getNumberConstants() instead.\n","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"notANumber","id":"notANumber0()","line":"18"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"currencyPattern","id":"currencyPattern0()","line":"19"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"decimalPattern","id":"decimalPattern0()","line":"20"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"decimalSeparator","id":"decimalSeparator0()","line":"21"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"defCurrencyCode","id":"defCurrencyCode0()","line":"22"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"exponentialSymbol","id":"exponentialSymbol0()","line":"23"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"globalCurrencyPattern","id":"globalCurrencyPattern0()","line":"24"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"groupingSeparator","id":"groupingSeparator0()","line":"25"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"infinity","id":"infinity0()","line":"26"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"minusSign","id":"minusSign0()","line":"27"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"monetaryGroupingSeparator","id":"monetaryGroupingSeparator0()","line":"28"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"monetarySeparator","id":"monetarySeparator0()","line":"29"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"percent","id":"percent0()","line":"30"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"percentPattern","id":"percentPattern0()","line":"31"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"perMill","id":"perMill0()","line":"32"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"plusSign","id":"plusSign0()","line":"33"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"scientificPattern","id":"scientificPattern0()","line":"34"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"simpleCurrencyPattern","id":"simpleCurrencyPattern0()","line":"35"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"zeroDigit","id":"zeroDigit0()","line":"36"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/constants/number_constants.dart","line":"17"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"interfaces":[{"name":"HasHtml","refId":"dart_web_toolkit_event/HasHtml"},{"name":"HasDirectionalText","refId":"dart_web_toolkit_i18n/HasDirectionalText"}],"kind":"class","name":"HasDirectionalHtml","id":"HasDirectionalHtml","comment":"\nAn object that implements this interface contains html that has a direction.\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setHtml","id":"setHtml2()","comment":"\nSets this object's html, also declaring its direction.\n\n@param html the object's new html\n@param dir the html's direction\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"html","id":"html"},{"ref":{"name":"Direction","refId":"dart_web_toolkit_i18n/Direction"},"kind":"param","name":"dir","id":"dir"}],"line":"17"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/has_directional_html.dart","line":"9"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"interfaces":[{"name":"HasDirectionEstimator","refId":"dart_web_toolkit_event/HasDirectionEstimator"}],"kind":"class","name":"DirectionalTextHelper","id":"DirectionalTextHelper","comment":"\nA helper class for displaying bidi (i.e. potentially opposite-direction) text\nor HTML in an element.\nNote: this class assumes that callers perform all their text/html and\ndirection manipulations through it alone.\n","children":[{"returnType":{"name":"DirectionEstimator","refId":"dart_web_toolkit_i18n/DirectionEstimator"},"kind":"method","name":"getDirectionEstimator","id":"getDirectionEstimator0()","line":"85"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"enableDefaultDirectionEstimator","id":"enableDefaultDirectionEstimator1()","comment":"\nSee note at\n{@link #setDirectionEstimator(com.google.gwt.i18n.shared.DirectionEstimator)}.\n","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"enabled","id":"enabled"}],"line":"93"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setDirectionEstimator","id":"setDirectionEstimator1()","comment":"\nNote: if the element already has non-empty content, this will update\nits direction according to the new estimator's result. This may cause\nflicker, and thus should be avoided; DirectionEstimator should be set\nbefore the element has any content.\n","children":[{"ref":{"name":"DirectionEstimator","refId":"dart_web_toolkit_i18n/DirectionEstimator"},"kind":"param","name":"directionEstimator","id":"directionEstimator"}],"line":"103"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"getTextOrHtml","id":"getTextOrHtml1()","comment":"\nGet the inner text or html of the element, taking the inner span wrap into\nconsideration, if needed.\n\n@param isHtml true to get the inner html, false to get the inner text\n@return the text or html\n","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"isHtml","id":"isHtml"}],"line":"121"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setTextOrHtml","id":"setTextOrHtml3()","comment":"\nSets the element's content to the given value (either plain text or HTML).\nIf direction estimation is off, the direction is verified to match the\nelement's initial direction. Otherwise, the direction is affected as\ndescribed at\n{@link #setTextOrHtml(String, com.google.gwt.i18n.client.HasDirection.Direction, boolean) setTextOrHtml(String, Direction, boolean)}.\n\n@param content the element's new content\n@param isHtml whether the content is HTML\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"content","id":"content"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"isHtml","id":"isHtml"},{"ref":{"name":"Direction","refId":"dart_web_toolkit_i18n/Direction"},"defaultValue":"null","isOptional":true,"kind":"param","name":"dir","id":"dir"}],"line":"136"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setTextOrHtmlWithDirection","id":"setTextOrHtmlWithDirection3()","comment":"\nSets the element's content to the given value (either plain text or HTML),\napplying the given direction.\n<p>\nImplementation details:\n<ul>\n<li> If the element is a block element, sets its dir attribute according\nto the given direction.\n<li> Otherwise (i.e. the element is inline), the direction is set using a\nnested &lt;span dir=...&gt; element which holds the content of the element.\nThis nested span may be followed by a zero-width Unicode direction\ncharacter (LRM or RLM). This manipulation is necessary to prevent garbling\nin case the direction of the element is opposite to the direction of its\ncontext. See {@link com.google.gwt.i18n.shared.BidiFormatter} for more\ndetails.\n</ul>\n\n@param content the element's new content\n@param dir the content's direction\n@param isHtml whether the content is HTML\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"content","id":"content"},{"ref":{"name":"Direction","refId":"dart_web_toolkit_i18n/Direction"},"kind":"param","name":"dir","id":"dir"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"isHtml","id":"isHtml"}],"line":"177"},{"returnType":{"name":"Direction","refId":"dart_web_toolkit_i18n/Direction"},"kind":"method","name":"getTextDirection","id":"getTextDirection0()","line":"191"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setInnerTextOrHtml","id":"setInnerTextOrHtml2()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"content","id":"content"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"isHtml","id":"isHtml"}],"line":"195"},{"ref":{"name":"DirectionEstimator","refId":"dart_web_toolkit_i18n/DirectionEstimator"},"isStatic":true,"kind":"variable","name":"DEFAULT_DIRECTION_ESTIMATOR","id":"DEFAULT_DIRECTION_ESTIMATOR","comment":"\nA default direction estimator instance.\n","line":"17"},{"ref":{"name":"DirectionEstimator","refId":"dart_web_toolkit_i18n/DirectionEstimator"},"kind":"variable","name":"directionEstimator","id":"directionEstimator","comment":"\nThe DirectionEstimator object.\n","line":"22"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"isDirectionExplicitlySet","id":"isDirectionExplicitlySet","comment":"\nWhether direction was explicitly set on the last {@code setTextOrHtml}\ncall. If so, {@link #setDirectionEstimator} will refrain from modifying the\ndirection until {@link #setTextOrHtml} is called without specifying an\nexplicit direction.\n","line":"30"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"isSpanWrapped","id":"isSpanWrapped","comment":"\nWhether the element contains a nested &lt;span&gt; element used to\nindicate the content's direction.\n<p>\nThe element itself is used for this purpose when it is a block element\n(i.e. !isElementInline), but doing so on an inline element often results in\ngarbling what follows it. Thus, when the element is inline, a nested\n&lt;span&gt; must be used to carry the content's direction, with an LRM or\nRLM character afterwards to prevent the garbling.\n","line":"42"},{"ref":{"name":"Element","refId":"dart.dom.html/Element"},"kind":"variable","name":"element","id":"element","comment":"\nThe target element.\n","line":"47"},{"ref":{"name":"Direction","refId":"dart_web_toolkit_i18n/Direction"},"kind":"variable","name":"initialElementDir","id":"initialElementDir","comment":"\nThe initial direction of the element.\n","line":"52"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"isElementInline","id":"isElementInline","comment":"\nWhether the element is inline (e.g. a &lt;span&gt; element, but not a block\nelement like &lt;div&gt;).\nThis is needed because direction is handled differently for inline elements\nand for non-inline elements.\n","line":"60"},{"ref":{"name":"Direction","refId":"dart_web_toolkit_i18n/Direction"},"kind":"variable","name":"textDir","id":"textDir","comment":"\nThe direction of the element's content.\nNote: this may not match the direction attribute of the element itself.\nSee\n{@link #setTextOrHtml(String, com.google.gwt.i18n.client.HasDirection.Direction, boolean) setTextOrHtml(String, Direction, boolean)}\nfor details.\n","line":"69"},{"kind":"constructor","name":"","id":"2()","comment":"\n@param element The widget's element holding text.\n@param isElementInline Whether the element is an inline element.\n","children":[{"ref":{"name":"Element","refId":"dart.dom.html/Element"},"kind":"param","name":"element","id":"element"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"isElementInline","id":"isElementInline"}],"line":"75"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/directional_text_helper.dart","line":"12"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"interfaces":[{"name":"HasSafeHtml","refId":"dart_web_toolkit_event/HasSafeHtml"},{"name":"HasDirectionalText","refId":"dart_web_toolkit_i18n/HasDirectionalText"}],"kind":"class","name":"HasDirectionalSafeHtml","id":"HasDirectionalSafeHtml","comment":"\nAn object that implements this interface contains html that has a direction.\n","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/has_directional_safe_html.dart","line":"9"},{"superclass":{"name":"HasText","refId":"dart_web_toolkit_event/HasText"},"isAbstract":true,"kind":"class","name":"HasDirectionalText","id":"HasDirectionalText","comment":"\nAn object that implements this interface contains text that has a direction.\n","children":[{"returnType":{"name":"Direction","refId":"dart_web_toolkit_i18n/Direction"},"kind":"method","name":"getTextDirection","id":"getTextDirection0()","comment":"\nGets the direction of this object's text.\n\n@return the direction of this object's text\n","line":"16"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setText","id":"setText2()","comment":"\nSets this object's text, also declaring its direction.\n\n@param text the object's new text\n@param dir the text's direction\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"text","id":"text"},{"ref":{"name":"Direction","refId":"dart_web_toolkit_i18n/Direction"},"kind":"param","name":"dir","id":"dir"}],"line":"24"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/has_directional_text.dart","line":"9"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"interfaces":[{"name":"HasKeyUpHandlers","refId":"dart_web_toolkit_event/HasKeyUpHandlers"},{"name":"HasDirection","refId":"dart_web_toolkit_i18n/HasDirection"},{"name":"HasText","refId":"dart_web_toolkit_event/HasText"}],"kind":"class","name":"AutoDirectionHandlerTarget","id":"AutoDirectionHandlerTarget","comment":"\nThe interface an object must implement in order to add an\nAutoDirectionHandler to it.\n\nTODO(tomerigo): add Paste and Input events once they're available in GWT.\n","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/auto_direction_handler.dart","line":"140"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"interfaces":[{"name":"HasDirectionEstimator","refId":"dart_web_toolkit_event/HasDirectionEstimator"},{"name":"KeyUpHandler","refId":"dart_web_toolkit_event/KeyUpHandler"}],"kind":"class","name":"AutoDirectionHandler","id":"AutoDirectionHandler","comment":"\nUtility class for handling auto-direction adjustment.\n\nThis class is useful for automatically adjusting the direction of an object\nthat takes text input, while the text is being entered.\n","children":[{"returnType":{"name":"AutoDirectionHandler","refId":"dart_web_toolkit_i18n/AutoDirectionHandler"},"isStatic":true,"kind":"method","name":"addToDefault","id":"addToDefault2()","comment":"\nOperates like {@link #addTo(AutoDirectionHandlerTarget, DirectionEstimator)}, but uses a\ndefault DirectionEstimator, {@link\ncom.google.gwt.i18n.shared.WordCountDirectionEstimator} if {@code enabled},\nor else a null DirectionEstimator, which means disabling direction\nestimation.\n\n@param target Object whose direction should be automatically adjusted on\n    relevant events.\n@param enabled Whether the handler is enabled upon creation.\n@return AutoDirectionHandler An instance of AutoDirectionHandler for the\n    given object.\n","children":[{"ref":{"name":"AutoDirectionHandlerTarget","refId":"dart_web_toolkit_i18n/AutoDirectionHandlerTarget"},"kind":"param","name":"target","id":"target"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"kind":"param","name":"enabled","id":"enabled"}],"line":"27"},{"returnType":{"name":"AutoDirectionHandler","refId":"dart_web_toolkit_i18n/AutoDirectionHandler"},"isStatic":true,"kind":"method","name":"addTo","id":"addTo2()","comment":"\nAdds auto-direction adjustment to a given object:\n- Creates an AutoDirectionHandler.\n- Initializes it with the given DirectionEstimator.\n- Adds it as an event handler for the relevant events on the given object.\n- Returns the AutoDirectionHandler, so its setAutoDir() method can be\ncalled when the object's text changes by means other than the handled\nevents.\n\n@param target Object whose direction should be automatically adjusted on\n    relevant events.\n@param directionEstimator A DirectionEstimator object used for direction\n    estimation (use null to disable direction estimation).\n@return AutoDirectionHandler An instance of AutoDirectionHandler for the\n    given object.\n","children":[{"ref":{"name":"AutoDirectionHandlerTarget","refId":"dart_web_toolkit_i18n/AutoDirectionHandlerTarget"},"kind":"param","name":"target","id":"target"},{"ref":{"name":"DirectionEstimator","refId":"dart_web_toolkit_i18n/DirectionEstimator"},"kind":"param","name":"directionEstimator","id":"directionEstimator"}],"line":"47"},{"returnType":{"name":"DirectionEstimator","refId":"dart_web_toolkit_i18n/DirectionEstimator"},"kind":"method","name":"getDirectionEstimator","id":"getDirectionEstimator0()","comment":"\nReturns the DirectionEstimator object.\n","line":"85"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"onKeyUp","id":"onKeyUp1()","comment":"\nAutomatically adjusts hasDirection's direction on KeyUpEvent events.\nImplementation of KeyUpHandler interface method.\n","children":[{"ref":{"name":"KeyUpEvent","refId":"dart_web_toolkit_event/KeyUpEvent"},"kind":"param","name":"event","id":"event"}],"line":"93"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"refreshDirection","id":"refreshDirection0()","comment":"\nAdjusts target's direction according to the estimated direction of the text\nit supplies.\n","line":"101"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"enableDefaultDirectionEstimator","id":"enableDefaultDirectionEstimator1()","comment":"\nToggles direction estimation on (using a default estimator) and off.\n","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"enabled","id":"enabled"}],"line":"113"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setDirectionEstimator","id":"setDirectionEstimator1()","comment":"\nSets the DirectionEstimator object.\n","children":[{"ref":{"name":"DirectionEstimator","refId":"dart_web_toolkit_i18n/DirectionEstimator"},"kind":"param","name":"directionEstimator","id":"directionEstimator"}],"line":"120"},{"ref":{"name":"DirectionEstimator","refId":"dart_web_toolkit_i18n/DirectionEstimator"},"kind":"variable","name":"directionEstimator","id":"directionEstimator","comment":"\nA DirectionEstimator object used for direction estimation.\n","line":"55"},{"ref":{"name":"HandlerRegistration","refId":"dart_web_toolkit_event/HandlerRegistration"},"kind":"variable","name":"handlerRegistration","id":"handlerRegistration","comment":"\nA HandlerRegistration object used to remove this handler.\n","line":"60"},{"ref":{"name":"AutoDirectionHandlerTarget","refId":"dart_web_toolkit_i18n/AutoDirectionHandlerTarget"},"kind":"variable","name":"target","id":"target","comment":"\nThe object being handled.\n","line":"65"},{"kind":"constructor","name":"","id":"2()","comment":"\nPrivate constructor. Instantiate using one of the addTo() methods.\n\n@param target Object whose direction should be automatically adjusted on\n    relevant events.\n@param directionEstimator A DirectionEstimator object used for direction\n    estimation.\n","children":[{"ref":{"name":"AutoDirectionHandlerTarget","refId":"dart_web_toolkit_i18n/AutoDirectionHandlerTarget"},"kind":"param","name":"target","id":"target"},{"ref":{"name":"DirectionEstimator","refId":"dart_web_toolkit_i18n/DirectionEstimator"},"kind":"param","name":"directionEstimator","id":"directionEstimator"}],"line":"75"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/auto_direction_handler.dart","line":"12"},{"superclass":{"name":"HasHorizontalAlignment","refId":"dart_web_toolkit_i18n/HasHorizontalAlignment"},"isAbstract":true,"kind":"class","name":"HasAutoHorizontalAlignment","id":"HasAutoHorizontalAlignment","comment":"\nA widget that implements this interface can be configured to be aligned\naccording to its contents' direction, in addition to the static alignment\noptions offered by {@link HasHorizontalAlignment}.\n","children":[{"returnType":{"name":"AutoHorizontalAlignmentConstant","refId":"dart_web_toolkit_i18n/AutoHorizontalAlignmentConstant"},"kind":"method","name":"getAutoHorizontalAlignment","id":"getAutoHorizontalAlignment0()","comment":"\nGets the horizontal auto-alignment setting. This may be one of the\nauto-alignment values above that depend on content direction (e.g.\n{@link HasAutoHorizontalAlignment#ALIGN_CONTENT_START}), or one of the\n\"static\" {@link HasHorizontalAlignment.HorizontalAlignmentConstant}\nalignment values (e.g. {@link HasHorizontalAlignment#ALIGN_LOCALE_START}).\nIt may be set by either {@code setAutoHorizontalAlignment} or {@code\nHasHorizontalAlignment#setHorizontalAlignment}. The default is null,\nindicating that no specific horizontal alignment has been set, allowing it\nto be determined by the usual HTML and CSS mechanisms.\n\n@return the current automatic horizontal alignment policy.\n","line":"39"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setAutoHorizontalAlignment","id":"setAutoHorizontalAlignment1()","comment":"\nSets the horizontal alignment, allowing in addition to the \"static\"\n{@link HasHorizontalAlignment.HorizontalAlignmentConstant} values, the\n\"automatic\" {@link HasHorizontalAlignment.AutoHorizontalAlignmentConstant}\nvalues that depend on the content direction. Determines the values returned\nby both {@link #getAutoHorizontalAlignment} and\n{@link HasHorizontalAlignment#getHorizontalAlignment()}.\n<p> For the {@code ALIGN_CONTENT_START} and {@code ALIGN_CONTENT_END}\nvalues, sets the horizontal alignment (including the value of {@code\nHasHorizontalAlignment#getHorizontalAlignment()}) to the start or end edge\nof the current content's direction, respectively, and continues to\nautomatically update it whenever the content direction changes.\n<p> For other values, operates like {@link #setHorizontalAlignment}.\n<p> For {@code null}, the horizontal alignment is cleared, allowing it to\nbe determined by the standard HTML mechanisms such as inheritance and CSS\nrules.\n@see HasHorizontalAlignment\n\n@param autoHorizontalAlignment the new automatic horizontal alignment\n       policy\n","children":[{"ref":{"name":"AutoHorizontalAlignmentConstant","refId":"dart_web_toolkit_i18n/AutoHorizontalAlignmentConstant"},"kind":"param","name":"autoHorizontalAlignment","id":"autoHorizontalAlignment"}],"line":"62"},{"ref":{"name":"AutoHorizontalAlignmentConstant","refId":"dart_web_toolkit_i18n/AutoHorizontalAlignmentConstant"},"isStatic":true,"kind":"variable","name":"ALIGN_CONTENT_START","id":"ALIGN_CONTENT_START","comment":"\nSpecifies that the widget's contents should be aligned left for LTR\ncontent, right for RTL content, and if the content's direction is DEFAULT,\nlike {@link #ALIGN_LOCALE_START}.\n","line":"17"},{"ref":{"name":"AutoHorizontalAlignmentConstant","refId":"dart_web_toolkit_i18n/AutoHorizontalAlignmentConstant"},"isStatic":true,"kind":"variable","name":"ALIGN_CONTENT_END","id":"ALIGN_CONTENT_END","comment":"\nSpecifies that the widget's contents should be aligned right for LTR\ncontent, left for RTL content, and if the content's direction is DEFAULT,\nlike {@link #ALIGN_LOCALE_END}.\n","line":"24"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/has_auto_horizontal_alignment.dart","line":"11"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"VerticalAlignmentConstant","id":"VerticalAlignmentConstant","comment":"\nHorizontal alignment constant.\n","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"getVerticalAlignString","id":"getVerticalAlignString0()","comment":"\nGets the CSS 'vertical-align' string associated with this constant.\n\n@return the CSS 'vertical-align' value\n","line":"76"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"_verticalAlignString","id":"_verticalAlignString","isPrivate":true,"line":"67"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"_verticalAlignString","refId":"dart_web_toolkit_i18n/VerticalAlignmentConstant/_verticalAlignString"},"kind":"param","name":"_verticalAlignString","id":"_verticalAlignString","isPrivate":true}],"line":"69"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/has_vertical_alignment.dart","line":"65"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"HasVerticalAlignment","id":"HasVerticalAlignment","comment":"\nCharacteristic interface which indicates that a widget has an associated\nvertical alignment.\n\n<h3>Use in UiBinder Templates</h3>\n\n<p>\nThe names of the static members of {@link VerticalAlignmentConstant}, as well\nas simple alignment names (<code>top</code>, <code>middle</code>,\n<code>bottom</code>), can be used as values for a\n<code>verticalAlignment</code> attribute of any widget that implements this\ninterface. (In fact, this will work for any widget method that takes a single\nVerticalAlignmentConstant value.)\n<p>\nFor example,\n\n<pre>\n&lt;g:VerticalPanel verticalAlignment='ALIGN_BOTTOM' />\n&lt;g:VerticalPanel verticalAlignment='bottom' />\n</pre>\n","children":[{"returnType":{"name":"VerticalAlignmentConstant","refId":"dart_web_toolkit_i18n/VerticalAlignmentConstant"},"kind":"method","name":"getVerticalAlignment","id":"getVerticalAlignment0()","comment":"\nGets the vertical alignment.\n\n@return the current vertical alignment.\n","line":"49"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setVerticalAlignment","id":"setVerticalAlignment1()","comment":"\nSets the vertical alignment.\n\n@param align the vertical alignment (\n         {@link HasVerticalAlignment#ALIGN_TOP},\n         {@link HasVerticalAlignment#ALIGN_MIDDLE}, or\n         {@link HasVerticalAlignment#ALIGN_BOTTOM}).\n","children":[{"ref":{"name":"VerticalAlignmentConstant","refId":"dart_web_toolkit_i18n/VerticalAlignmentConstant"},"kind":"param","name":"align","id":"align"}],"line":"59"},{"ref":{"name":"VerticalAlignmentConstant","refId":"dart_web_toolkit_i18n/VerticalAlignmentConstant"},"isStatic":true,"kind":"variable","name":"ALIGN_BOTTOM","id":"ALIGN_BOTTOM","comment":"\nSpecifies that the widget's contents should be aligned to the bottom.\n","line":"32"},{"ref":{"name":"VerticalAlignmentConstant","refId":"dart_web_toolkit_i18n/VerticalAlignmentConstant"},"isStatic":true,"kind":"variable","name":"ALIGN_MIDDLE","id":"ALIGN_MIDDLE","comment":"\nSpecifies that the widget's contents should be aligned in the middle.\n","line":"37"},{"ref":{"name":"VerticalAlignmentConstant","refId":"dart_web_toolkit_i18n/VerticalAlignmentConstant"},"isStatic":true,"kind":"variable","name":"ALIGN_TOP","id":"ALIGN_TOP","comment":"\nSpecifies that the widget's contents should be aligned to the top.\n","line":"42"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/has_vertical_alignment.dart","line":"27"},{"superclass":{"name":"AutoHorizontalAlignmentConstant","refId":"dart_web_toolkit_i18n/AutoHorizontalAlignmentConstant"},"kind":"class","name":"HorizontalAlignmentConstant","id":"HorizontalAlignmentConstant","comment":"\nPossible return values for {@link #getHorizontalAlignment}, and parameter\nvalues for {@link #setHorizontalAlignment}.\n","children":[{"returnType":{"name":"HorizontalAlignmentConstant","refId":"dart_web_toolkit_i18n/HorizontalAlignmentConstant"},"isStatic":true,"kind":"method","name":"endOf","id":"endOf1()","children":[{"ref":{"name":"Direction","refId":"dart_web_toolkit_i18n/Direction"},"kind":"param","name":"direction","id":"direction"}],"line":"116"},{"returnType":{"name":"HorizontalAlignmentConstant","refId":"dart_web_toolkit_i18n/HorizontalAlignmentConstant"},"isStatic":true,"kind":"method","name":"startOf","id":"startOf1()","children":[{"ref":{"name":"Direction","refId":"dart_web_toolkit_i18n/Direction"},"kind":"param","name":"direction","id":"direction"}],"line":"120"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"getTextAlignString","id":"getTextAlignString0()","comment":"\nGets the CSS 'text-align' string associated with this constant.\n\n@return the CSS 'text-align' value\n","line":"133"},{"ref":{"name":"TextAlign","refId":"dart_web_toolkit_util/TextAlign"},"isFinal":true,"kind":"variable","name":"_textAlign","id":"_textAlign","isPrivate":true,"line":"124"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"TextAlign","refId":"dart_web_toolkit_util/TextAlign"},"initializedField":{"name":"_textAlign","refId":"dart_web_toolkit_i18n/HorizontalAlignmentConstant/_textAlign"},"kind":"param","name":"_textAlign","id":"_textAlign","isPrivate":true}],"line":"126"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/has_horizontal_alignment.dart","line":"114"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"AutoHorizontalAlignmentConstant","id":"AutoHorizontalAlignmentConstant","comment":"\nType for values defined and used in {@link HasAutoHorizontalAlignment}.\nDefined here so that HorizontalAlignmentConstant can be derived from it,\nthus allowing HasAutoHorizontalAlignment methods to accept and return both\nAutoHorizontalAlignmentConstant and HorizontalAlignmentConstant values -\nwithout allowing the methods defined here to accept or return\nAutoHorizontalAlignmentConstant values.\n","children":[{"kind":"constructor","name":"internal","id":"internal0()","line":"107"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/has_horizontal_alignment.dart","line":"104"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"HasHorizontalAlignment","id":"HasHorizontalAlignment","comment":"\nCharacteristic interface which indicates that a widget can be aligned\nhorizontally.\n\n<h3>Use in UiBinder Templates</h3>\n\n<p>\nThe names of the static members of {@link HorizontalAlignmentConstant}, as\nwell as simple alignment names (<code>left</code>, <code>center</code>,\n<code>right</code>, <code>justify</code>), can be used as values for a\n<code>horizontalAlignment</code> attribute of any widget that implements this\ninterface. (In fact, this will work for any widget method that takes a single\nHorizontalAlignmentConstant value.)\n<p>\nFor example,\n\n<pre>\n&lt;g:Label horizontalAlignment='ALIGN_RIGHT'>Hi there.&lt;/g:Label>\n&lt;g:Label horizontalAlignment='right'>Hi there.&lt;/g:Label>\n</pre>\n","children":[{"returnType":{"name":"HorizontalAlignmentConstant","refId":"dart_web_toolkit_i18n/HorizontalAlignmentConstant"},"kind":"method","name":"getHorizontalAlignment","id":"getHorizontalAlignment0()","comment":"\nGets the horizontal alignment.\n\n@return the current horizontal alignment (\n        {@link HasHorizontalAlignment#ALIGN_LEFT},\n        {@link HasHorizontalAlignment#ALIGN_CENTER},\n        {@link HasHorizontalAlignment#ALIGN_RIGHT},\n        {@link HasHorizontalAlignment#ALIGN_JUSTIFY}, or\n        null).\n","line":"77"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setHorizontalAlignment","id":"setHorizontalAlignment1()","comment":"\nSets the horizontal alignment.\n<p> Use {@code null} to clear horizontal alignment, allowing it to be\ndetermined by the standard HTML mechanisms such as inheritance and CSS\nrules.\n\n@param align the horizontal alignment (\n        {@link HasHorizontalAlignment#ALIGN_LEFT},\n        {@link HasHorizontalAlignment#ALIGN_CENTER},\n        {@link HasHorizontalAlignment#ALIGN_RIGHT},\n        {@link HasHorizontalAlignment#ALIGN_JUSTIFY},\n        {@link HasHorizontalAlignment#ALIGN_LOCALE_START}, or\n        {@link HasHorizontalAlignment#ALIGN_LOCALE_END}).\n","children":[{"ref":{"name":"HorizontalAlignmentConstant","refId":"dart_web_toolkit_i18n/HorizontalAlignmentConstant"},"kind":"param","name":"align","id":"align"}],"line":"93"},{"ref":{"name":"HorizontalAlignmentConstant","refId":"dart_web_toolkit_i18n/HorizontalAlignmentConstant"},"isStatic":true,"kind":"variable","name":"ALIGN_CENTER","id":"ALIGN_CENTER","comment":"\nSpecifies that the widget's contents should be aligned in the center.\n","line":"31"},{"ref":{"name":"HorizontalAlignmentConstant","refId":"dart_web_toolkit_i18n/HorizontalAlignmentConstant"},"isStatic":true,"kind":"variable","name":"ALIGN_JUSTIFY","id":"ALIGN_JUSTIFY","comment":"\nSpecifies that the widget's contents should be aligned as justify.\n","line":"36"},{"ref":{"name":"HorizontalAlignmentConstant","refId":"dart_web_toolkit_i18n/HorizontalAlignmentConstant"},"isStatic":true,"kind":"variable","name":"ALIGN_LEFT","id":"ALIGN_LEFT","comment":"\nSpecifies that the widget's contents should be aligned to the left.\n","line":"41"},{"ref":{"name":"HorizontalAlignmentConstant","refId":"dart_web_toolkit_i18n/HorizontalAlignmentConstant"},"isStatic":true,"kind":"variable","name":"ALIGN_RIGHT","id":"ALIGN_RIGHT","comment":"\nSpecifies that the widget's contents should be aligned to the right.\n","line":"46"},{"ref":{"name":"HorizontalAlignmentConstant","refId":"dart_web_toolkit_i18n/HorizontalAlignmentConstant"},"isStatic":true,"kind":"variable","name":"ALIGN_LOCALE_START","id":"ALIGN_LOCALE_START","comment":"\nIn a RTL layout, specifies that the widget's contents should be aligned to\nthe right. In a LTR layout, specifies that the widget's constants should be\naligned to the left.\n","line":"53"},{"ref":{"name":"HorizontalAlignmentConstant","refId":"dart_web_toolkit_i18n/HorizontalAlignmentConstant"},"isStatic":true,"kind":"variable","name":"ALIGN_LOCALE_END","id":"ALIGN_LOCALE_END","comment":"\nIn a RTL layout, specifies that the widget's contents should be aligned to\nthe left. In a LTR layout, specifies that the widget's constants should be\naligned to the right.\n","line":"60"},{"ref":{"name":"HorizontalAlignmentConstant","refId":"dart_web_toolkit_i18n/HorizontalAlignmentConstant"},"isStatic":true,"kind":"variable","name":"ALIGN_DEFAULT","id":"ALIGN_DEFAULT","comment":"\nSynonym of {@link #ALIGN_LOCALE_START}.\n","line":"65"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/has_horizontal_alignment.dart","line":"27"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"interfaces":[{"name":"HasVerticalAlignment","refId":"dart_web_toolkit_i18n/HasVerticalAlignment"},{"name":"HasHorizontalAlignment","refId":"dart_web_toolkit_i18n/HasHorizontalAlignment"}],"kind":"class","name":"HasAlignment","id":"HasAlignment","comment":"\nA widget that implements this interface has an intrinsic alignment which\ncan be manipulated using these methods and constants.\n","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/has_alignment.dart","line":"10"},{"superclass":{"name":"Enum","refId":"dart_web_toolkit_util/Enum","arguments":[{"name":"int","refId":"dart_web_toolkit_i18n/TextDirection/int"}]},"kind":"class","name":"TextDirection","id":"TextDirection","comment":"\nPossible return values for {@link HasDirection#getDirection()} and parameter values for\n{@link HasDirection#setDirection(Direction)}.Widgets that implement this interface can\neither have a direction that is right-to-left (RTL), left-to-right (LTR), or default\n(which means that their directionality is inherited from their parent widget).\n","children":[{"ref":{"name":"TextDirection","refId":"dart_web_toolkit_i18n/TextDirection"},"isStatic":true,"kind":"variable","name":"RTL","id":"RTL","line":"28"},{"ref":{"name":"TextDirection","refId":"dart_web_toolkit_i18n/TextDirection"},"isStatic":true,"kind":"variable","name":"LTR","id":"LTR","line":"29"},{"ref":{"name":"TextDirection","refId":"dart_web_toolkit_i18n/TextDirection"},"isStatic":true,"kind":"variable","name":"DEFAULT","id":"DEFAULT","line":"30"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"int","refId":"dart_web_toolkit_i18n/TextDirection/int"},"kind":"param","name":"type","id":"type"}],"line":"26"},{"kind":"typeparam","name":"int","id":"int"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/has_text_direction.dart","line":"24"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"HasTextDirection","id":"HasTextDirection","comment":"\nA widget that implements this interface has the ability to override\nthe document directionality for its root element.\n\nWidgets that implement this interface should be leaf widgets. More\nspecifically, they should not implement the\n{@link com.google.gwt.user.client.ui.HasWidgets} interface.\n","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/has_text_direction.dart","line":"14"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"HasDirection","id":"HasDirection","comment":"\nA widget that implements this interface has the ability to override\nthe document directionality for its root element.\n\nWidgets that implement this interface should be leaf widgets. More\nspecifically, they should not implement the\n{@link com.google.gwt.user.client.ui.HasWidgets} interface.\n","children":[{"returnType":{"name":"void","refId":"void"},"isSetter":true,"kind":"method","name":"direction=","id":"direction=1()","comment":"\nSets the directionality for a widget.\n\n@param value <code>RTL</code> if the directionality should be set to right-to-left,\n                 <code>LTR</code> if the directionality should be set to left-to-right\n                 <code>DEFAULT</code> if the directionality should not be explicitly set\n","children":[{"ref":{"name":"Direction","refId":"dart_web_toolkit_i18n/Direction"},"kind":"param","name":"value","id":"value"}],"line":"23"},{"ref":{"name":"Direction","refId":"dart_web_toolkit_i18n/Direction"},"kind":"property","name":"direction","id":"direction","comment":"\nGets the directionality of the widget.\n\n@return <code>RTL</code> if the directionality is right-to-left,\n        <code>LTR</code> if the directionality is left-to-right, or\n        <code>DEFAULT</code> if the directionality is not explicitly specified\n","line":"32"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/has_direction.dart","line":"14"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"Dictionary","id":"Dictionary","comment":"\nProvides dynamic string lookup of key/value string pairs defined in server side JSON file.\n\n<p>\nUnlike the family of interfaces that extend [Localizable] which support static\ninternationalization, the <code>Dictionary</code> class is fully dynamic.\nAs a result, a variety of error conditions (particularly those involving key\nmismatches) cannot be caught until runtime. Similarly, the DWT compiler is\nunable discard unused dictionary values since the structure cannot be\nstatically analyzed.\n</p>\n\n<h3>A Caveat Regarding Locale</h3>\nThe JSON file completely determines the mappings defined for each\ndictionary without regard to the <code>locale</code> client property. Thus,\n<code>Dictionary</code> is the most flexible of the internationalization\ntypes and may provide the simplest form of integration with existing\nlocalization systems which were not specifically designed to use DWT's\n<code>locale</code> client property.\n\n<p>\nSee [Localizable] for background on the <code>locale</code> client property.\n</p>\n\n","children":[{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"Dictionary","refId":"dart_web_toolkit_i18n/Dictionary"}]},"isStatic":true,"kind":"method","name":"getDictionary","id":"getDictionary1()","comment":"\nReturns the <code>Dictionary</code> object associated with the given\n[url].\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"url","id":"url"}],"line":"39"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"get","id":"get1()","comment":"\nGet the value associated with the given Dictionary [key].\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"key","id":"key"}],"line":"82"},{"returnType":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"method","name":"keySet","id":"keySet0()","comment":"\nThe set of keys associated with this dictionary.\n","line":"99"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"108"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"method","name":"values","id":"values0()","comment":"\nCollection of values associated with this dictionary.\n","line":"115"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"Map","refId":"dart.core/Map"}]},"kind":"method","name":"_read","id":"_read1()","comment":"\nRead JSON file from [url], parse it and return as future. \n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"url","id":"url"}],"isPrivate":true,"line":"127"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"Dictionary","refId":"dart_web_toolkit_i18n/Dictionary"}]},"isStatic":true,"kind":"variable","name":"_cache","id":"_cache","isPrivate":true,"line":"33"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"String","refId":"dart.core/String"}]},"kind":"variable","name":"_dict","id":"_dict","comment":"\nDictionary pairs.\n","isPrivate":true,"line":"54"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"_label","id":"_label","comment":"\nName of dictionary.\n","isPrivate":true,"line":"59"},{"kind":"constructor","name":"_internal","id":"_internal2()","comment":"\nConstructor for <code>Dictionary</code>.\n","children":[{"ref":{"name":"Completer","refId":"dart.async/Completer","arguments":[{"name":"Dictionary","refId":"dart_web_toolkit_i18n/Dictionary"}]},"kind":"param","name":"completer","id":"completer"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"url","id":"url"}],"isPrivate":true,"line":"64"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/dictionary.dart","line":"31"},{"superclass":{"name":"BidiPolicyImpl","refId":"dart_web_toolkit_i18n/BidiPolicyImpl"},"kind":"class","name":"BidiPolicyImplOn","id":"BidiPolicyImplOn","comment":"\nImplementation class for {@link BidiPolicy} used when bidi is always on.\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"isBidiEnabled","id":"isBidiEnabled0()","line":"34"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/bidi_policy.dart","line":"33"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"BidiPolicyImpl","id":"BidiPolicyImpl","comment":"\nImplementation class for {@link BidiPolicy}.\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"isBidiEnabled","id":"isBidiEnabled0()","line":"25"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/bidi_policy.dart","line":"24"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"BidiPolicy","id":"BidiPolicy","comment":"\nProvides low-level functionality to determine whether to support bidi.\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"isStatic":true,"kind":"method","name":"isBidiEnabled","id":"isBidiEnabled0()","comment":"\nReturns true if bidi is enabled, false if disabled.\n","line":"16"},{"ref":{"name":"BidiPolicyImpl","refId":"dart_web_toolkit_i18n/BidiPolicyImpl"},"isStatic":true,"kind":"variable","name":"impl","id":"impl","line":"11"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/bidi_policy.dart","line":"9"},{"superclass":{"name":"DirectionEstimator","refId":"dart_web_toolkit_i18n/DirectionEstimator"},"kind":"class","name":"WordCountDirectionEstimator","id":"WordCountDirectionEstimator","comment":"\nDirection estimator that uses the \"word count\" heuristic.\n\n<p> Note: this is probably the recommended estimator for most use cases.\n","children":[{"returnType":{"name":"WordCountDirectionEstimator","refId":"dart_web_toolkit_i18n/WordCountDirectionEstimator"},"isStatic":true,"kind":"method","name":"get","id":"get0()","comment":"\nGet an instance of WordCountDirectionEstimator.\n\n@return An instance of WordCountDirectionEstimator.\n","line":"23"},{"returnType":{"name":"Direction","refId":"dart_web_toolkit_i18n/Direction"},"kind":"method","name":"estimateDirection","id":"estimateDirection2()","comment":"\nEstimates the direction of a given string using the \"word count\" heuristic,\nas defined at {@link BidiUtils#estimateDirection}.\n\n@param str Input string.\n@return Direction The estimated direction of {@code str}.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"str","id":"str"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"kind":"param","name":"isHtml","id":"isHtml"}],"line":"34"},{"ref":{"name":"WordCountDirectionEstimator","refId":"dart_web_toolkit_i18n/WordCountDirectionEstimator"},"isStatic":true,"isFinal":true,"kind":"variable","name":"instance","id":"instance","comment":"\nAn instance of WordCountDirectionEstimator, to be returned by {@link #get}.\n","line":"16"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/word_count_direction_estimator.dart","line":"11"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"DirectionEstimator","id":"DirectionEstimator","comment":"\nInterface for direction estimators.\n","children":[{"returnType":{"name":"Direction","refId":"dart_web_toolkit_i18n/Direction"},"kind":"method","name":"estimateDirection","id":"estimateDirection1()","comment":"\nEstimates the direction of a plain-text string.\n\n@param str The string to check.\n@return {@code str}'s estimated direction.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"str","id":"str"}],"line":"17"},{"returnType":{"name":"Direction","refId":"dart_web_toolkit_i18n/Direction"},"kind":"method","name":"estimateStringDirection","id":"estimateStringDirection2()","comment":"\nEstimates the direction of a string.\n\n@param str The string to check.\n@param isHtml Whether {@code str} is HTML / HTML-escaped. {@code false}\n       means that {@code str} is plain-text.\n@return {@code str}'s estimated direction.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"str","id":"str"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"kind":"param","name":"isHtml","id":"isHtml"}],"line":"27"},{"returnType":{"name":"Direction","refId":"dart_web_toolkit_i18n/Direction"},"kind":"method","name":"estimateSafetmlDirection","id":"estimateSafetmlDirection1()","comment":"\nEstimates the direction of a SafeHtml.\n\n@param html The string to check.\n@return {@code html}'s estimated direction.\n","children":[{"ref":{"name":"SafeHtml","refId":"dart_web_toolkit_util/SafeHtml"},"kind":"param","name":"html","id":"html"}],"line":"37"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/direction_estimator.dart","line":"9"},{"superclass":{"name":"Enum","refId":"dart_web_toolkit_util/Enum","arguments":[{"name":"String","refId":"dart_web_toolkit_i18n/Direction/String"}]},"kind":"class","name":"Direction","id":"Direction","comment":"\nPossible return values for {@link HasDirection#getDirection()} and parameter values for\n{@link HasDirection#setDirection(Direction)}.Widgets that implement this interface can\neither have a direction that is right-to-left (RTL), left-to-right (LTR), or default\n(which means that their directionality is inherited from their parent widget).\n","children":[{"ref":{"name":"Direction","refId":"dart_web_toolkit_i18n/Direction"},"isStatic":true,"kind":"variable","name":"RTL","id":"RTL","line":"16"},{"ref":{"name":"Direction","refId":"dart_web_toolkit_i18n/Direction"},"isStatic":true,"kind":"variable","name":"LTR","id":"LTR","line":"17"},{"ref":{"name":"Direction","refId":"dart_web_toolkit_i18n/Direction"},"isStatic":true,"kind":"variable","name":"DEFAULT","id":"DEFAULT","line":"18"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"String","refId":"dart_web_toolkit_i18n/Direction/String"},"kind":"param","name":"type","id":"type"}],"line":"14"},{"kind":"typeparam","name":"String","id":"String"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/direction.dart","line":"12"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"interfaces":[{"name":"CurrencyData","refId":"dart_web_toolkit_i18n/CurrencyData"}],"kind":"class","name":"DefaultCurrencyData","id":"DefaultCurrencyData","comment":"\nA default {@link CurrencyData} implementation, so new methods can be added\nto the interface without breaking implementors if a reasonable default is\navailable.\n","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"getCurrencyCode","id":"getCurrencyCode0()","line":"28"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"getCurrencySymbol","id":"getCurrencySymbol0()","line":"32"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"getDefaultFractionDigits","id":"getDefaultFractionDigits0()","line":"36"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"getPortableCurrencySymbol","id":"getPortableCurrencySymbol0()","line":"40"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"getSimpleCurrencySymbol","id":"getSimpleCurrencySymbol0()","line":"44"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"isDeprecated","id":"isDeprecated0()","line":"48"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"isSpaceForced","id":"isSpaceForced0()","line":"52"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"isSpacingFixed","id":"isSpacingFixed0()","line":"56"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"isSymbolPositionFixed","id":"isSymbolPositionFixed0()","line":"60"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"isSymbolPrefix","id":"isSymbolPrefix0()","line":"64"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"currencyCode","id":"currencyCode","line":"13"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"currencySymbol","id":"currencySymbol","line":"14"},{"ref":{"name":"int","refId":"dart.core/int"},"isFinal":true,"kind":"variable","name":"fractionDigits","id":"fractionDigits","line":"15"},{"kind":"constructor","name":"","id":"3()","comment":"\nCreate a default default {@link CurrencyData} instance, returning {@code\nfalse} for all {@code isFoo} methods and using the standard symbol for the\nportable symbol.\n\n@param currencyCode ISO 4217 currency code\n@param currencySymbol symbol to use for this currency\n@param fractionDigits default number of fraction digits\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"currencyCode","refId":"dart_web_toolkit_i18n/DefaultCurrencyData/currencyCode"},"kind":"param","name":"currencyCode","id":"currencyCode"},{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"currencySymbol","refId":"dart_web_toolkit_i18n/DefaultCurrencyData/currencySymbol"},"kind":"param","name":"currencySymbol","id":"currencySymbol"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"2","isOptional":true,"initializedField":{"name":"fractionDigits","refId":"dart_web_toolkit_i18n/DefaultCurrencyData/fractionDigits"},"kind":"param","name":"fractionDigits","id":"fractionDigits"}],"line":"26"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/default_currency_data.dart","line":"11"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"CurrencyListInstance","id":"CurrencyListInstance","comment":"\nInner class to avoid CurrencyList.clinit calls and allow this to be\ncompletely removed from the generated code if instance isn't referenced\n(such as when all you call is CurrencyList.get().getDefault() ).\n","children":[{"ref":{"name":"CurrencyList","refId":"dart_web_toolkit_i18n/CurrencyList"},"isStatic":true,"kind":"variable","name":"instance","id":"instance","line":"312"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/currency_list.dart","line":"311"},{"superclass":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"CurrencyData","refId":"dart_web_toolkit_i18n/CurrencyData"}]},"kind":"class","name":"CurrencyList","id":"CurrencyList","comment":"\nGenerated class containing all the CurrencyImpl instances.  This is just\nthe fallback in case the I18N module is not included.\n","children":[{"returnType":{"name":"CurrencyList","refId":"dart_web_toolkit_i18n/CurrencyList"},"isStatic":true,"kind":"method","name":"get","id":"get0()","comment":"\nReturn the singleton instance of CurrencyList.\n","line":"15"},{"returnType":{"name":"Map","refId":"dart.core/Map"},"isStatic":true,"kind":"method","name":"overrideMap","id":"overrideMap2()","comment":"\nAdd all entries in {@code override} to the original map, replacing\nany existing entries.  This is used by subclasses that need to slightly\nalter the data used by the parent locale.\n","children":[{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"original","id":"original"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"override","id":"override"}],"line":"25"},{"returnType":{"name":"CurrencyData","refId":"dart_web_toolkit_i18n/CurrencyData"},"kind":"method","name":"getDefault","id":"getDefault0()","comment":"\nJS map of currency codes to localized currency names. This is kept separate\nfrom {@link #dataMapNative} above so that the names can be completely\nremoved by the compiler if they are not used. Each currency code is assumed\nto be a valid JS object key.\n\n\nReturn the default currency data for this locale.\n\nGenerated implementations override this method.\n","line":"102"},{"returnType":{"name":"CurrencyData","refId":"dart_web_toolkit_i18n/CurrencyData"},"kind":"method","name":"lookup","id":"lookup1()","comment":"\nLookup a currency based on the ISO4217 currency code.\n\n@param currencyCode ISO4217 currency code\n@return currency data, or null if code not found\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"currencyCode","id":"currencyCode"}],"line":"146"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"lookupName","id":"lookupName1()","comment":"\nLookup a currency name based on the ISO4217 currency code.\n\n@param currencyCode ISO4217 currency code\n@return name of the currency, or null if code not found\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"currencyCode","id":"currencyCode"}],"line":"161"},{"returnType":{"name":"CurrencyData","refId":"dart_web_toolkit_i18n/CurrencyData"},"kind":"method","name":"getDefaultJava","id":"getDefaultJava0()","comment":"\nReturn the default currency data for this locale.\n\nGenerated implementations override this method.\n","line":"176"},{"returnType":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"CurrencyData","refId":"dart_web_toolkit_i18n/CurrencyData"}]},"kind":"method","name":"loadCurrencyMapJava","id":"loadCurrencyMapJava0()","comment":"\nReturn the default currency data for this locale.\n\nGenerated implementations override this method.\n\n\nLoads the currency map.\n\nGenerated implementations override this method.\n","line":"194"},{"returnType":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"String","refId":"dart.core/String"}]},"kind":"method","name":"loadNamesMapJava","id":"loadNamesMapJava0()","comment":"\nLoads the currency map from a JS object literal.\n\nGenerated implementations override this method.\n\n\nLoads the currency names map.\n\nGenerated implementations override this method.\n","line":"224"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"ensureCurrencyMap","id":"ensureCurrencyMap0()","comment":"\nLoads the currency names map from a JS object literal.\n\nGenerated implementations override this method.\n\n\nEnsure that the map of currency data has been initialized.\n","line":"251"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"ensureNamesMap","id":"ensureNamesMap0()","comment":"\nEnsure that the map of currency data has been initialized.\n","line":"266"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"contains","id":"contains1()","children":[{"ref":{"name":"CurrencyData","refId":"dart_web_toolkit_i18n/CurrencyData"},"kind":"param","name":"element","id":"element"}],"line":"280"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"method","name":"map","id":"map1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"CurrencyData","refId":"dart_web_toolkit_i18n/CurrencyData"},"kind":"param","name":"element","id":"element","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/currency_list.dart","line":"286"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"286"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"CurrencyData","refId":"dart_web_toolkit_i18n/CurrencyData"}]},"kind":"method","name":"where","id":"where1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"CurrencyData","refId":"dart_web_toolkit_i18n/CurrencyData"},"kind":"param","name":"element","id":"element","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/currency_list.dart","line":"287"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"287"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"method","name":"expand","id":"expand1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"CurrencyData","refId":"dart_web_toolkit_i18n/CurrencyData"},"kind":"param","name":"element","id":"element","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/currency_list.dart","line":"288"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"288"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"forEach","id":"forEach1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"CurrencyData","refId":"dart_web_toolkit_i18n/CurrencyData"},"kind":"param","name":"element","id":"element","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/currency_list.dart","line":"289"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"289"},{"returnType":{"name":"CurrencyData","refId":"dart_web_toolkit_i18n/CurrencyData"},"kind":"method","name":"reduce","id":"reduce1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"combine","id":"combine","children":[{"returnType":{"name":"CurrencyData","refId":"dart_web_toolkit_i18n/CurrencyData"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"CurrencyData","refId":"dart_web_toolkit_i18n/CurrencyData"},"kind":"param","name":"value","id":"value","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/currency_list.dart","line":"290"},{"ref":{"name":"CurrencyData","refId":"dart_web_toolkit_i18n/CurrencyData"},"kind":"param","name":"element","id":"element","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/currency_list.dart","line":"290"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"290"},{"kind":"method","name":"fold","id":"fold2()","children":[{"kind":"param","name":"initialValue","id":"initialValue"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"combine","id":"combine","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"previousValue","id":"previousValue","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/currency_list.dart","line":"291"},{"ref":{"name":"CurrencyData","refId":"dart_web_toolkit_i18n/CurrencyData"},"kind":"param","name":"element","id":"element","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/currency_list.dart","line":"291"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"291"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"every","id":"every1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"CurrencyData","refId":"dart_web_toolkit_i18n/CurrencyData"},"kind":"param","name":"element","id":"element","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/currency_list.dart","line":"292"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"292"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"any","id":"any1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"CurrencyData","refId":"dart_web_toolkit_i18n/CurrencyData"},"kind":"param","name":"element","id":"element","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/currency_list.dart","line":"293"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"293"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"CurrencyData","refId":"dart_web_toolkit_i18n/CurrencyData"}]},"kind":"method","name":"toList","id":"toList1()","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"isNamed":true,"kind":"param","name":"growable","id":"growable"}],"line":"294"},{"returnType":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"CurrencyData","refId":"dart_web_toolkit_i18n/CurrencyData"}]},"kind":"method","name":"toSet","id":"toSet0()","line":"295"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"CurrencyData","refId":"dart_web_toolkit_i18n/CurrencyData"}]},"kind":"method","name":"take","id":"take1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"n","id":"n"}],"line":"296"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"CurrencyData","refId":"dart_web_toolkit_i18n/CurrencyData"}]},"kind":"method","name":"takeWhile","id":"takeWhile1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"CurrencyData","refId":"dart_web_toolkit_i18n/CurrencyData"},"kind":"param","name":"value","id":"value","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/currency_list.dart","line":"297"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"297"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"CurrencyData","refId":"dart_web_toolkit_i18n/CurrencyData"}]},"kind":"method","name":"skip","id":"skip1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"n","id":"n"}],"line":"298"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"CurrencyData","refId":"dart_web_toolkit_i18n/CurrencyData"}]},"kind":"method","name":"skipWhile","id":"skipWhile1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"CurrencyData","refId":"dart_web_toolkit_i18n/CurrencyData"},"kind":"param","name":"value","id":"value","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/currency_list.dart","line":"299"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"299"},{"returnType":{"name":"CurrencyData","refId":"dart_web_toolkit_i18n/CurrencyData"},"kind":"method","name":"firstWhere","id":"firstWhere2()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"CurrencyData","refId":"dart_web_toolkit_i18n/CurrencyData"},"kind":"param","name":"value","id":"value","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/currency_list.dart","line":"300"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"orElse","id":"orElse","children":[{"returnType":{"name":"CurrencyData","refId":"dart_web_toolkit_i18n/CurrencyData"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"300"},{"returnType":{"name":"CurrencyData","refId":"dart_web_toolkit_i18n/CurrencyData"},"kind":"method","name":"lastWhere","id":"lastWhere2()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"CurrencyData","refId":"dart_web_toolkit_i18n/CurrencyData"},"kind":"param","name":"value","id":"value","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/currency_list.dart","line":"301"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"orElse","id":"orElse","children":[{"returnType":{"name":"CurrencyData","refId":"dart_web_toolkit_i18n/CurrencyData"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"301"},{"returnType":{"name":"CurrencyData","refId":"dart_web_toolkit_i18n/CurrencyData"},"kind":"method","name":"singleWhere","id":"singleWhere1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"CurrencyData","refId":"dart_web_toolkit_i18n/CurrencyData"},"kind":"param","name":"value","id":"value","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/currency_list.dart","line":"302"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"302"},{"returnType":{"name":"CurrencyData","refId":"dart_web_toolkit_i18n/CurrencyData"},"kind":"method","name":"elementAt","id":"elementAt1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"}],"line":"303"},{"ref":{"name":"Iterator","refId":"dart.core/Iterator","arguments":[{"name":"CurrencyData","refId":"dart_web_toolkit_i18n/CurrencyData"}]},"kind":"property","name":"iterator","id":"iterator","comment":"\nReturns an iterator for the list of currencies, optionally including\ndeprecated ones.\n\n@param includeDeprecated true if deprecated currencies should be included\n","line":"116"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"length","id":"length","line":"279"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isEmpty","id":"isEmpty","line":"281"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isNotEmpty","id":"isNotEmpty","line":"282"},{"ref":{"name":"CurrencyData","refId":"dart_web_toolkit_i18n/CurrencyData"},"kind":"property","name":"first","id":"first","line":"283"},{"ref":{"name":"CurrencyData","refId":"dart_web_toolkit_i18n/CurrencyData"},"kind":"property","name":"last","id":"last","line":"284"},{"ref":{"name":"CurrencyData","refId":"dart_web_toolkit_i18n/CurrencyData"},"kind":"property","name":"single","id":"single","line":"285"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"CurrencyData","refId":"dart_web_toolkit_i18n/CurrencyData"}]},"kind":"variable","name":"dataMapJava","id":"dataMapJava","comment":"\nAdd currency codes contained in the map to an ArrayList.\n\n/      if (map.hasOwnProperty(key)) {\n/      }\n\nDirectly reference an entry in the currency names map JSO.\n\n@param code ISO4217 currency code\n@return currency name, or the currency code if not known\n\n\nDirectly reference an entry in the currency map JSO.\n\n@param code ISO4217 currency code\n@return currency data\n\n\nMap of currency codes to CurrencyData.\n","line":"72"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"String","refId":"dart.core/String"}]},"kind":"variable","name":"namesMapJava","id":"namesMapJava","comment":"\nJS map of currency codes to CurrencyData objects. Each currency code is\nassumed to be a valid JS object key.\n\n\nMap of currency codes to localized currency names. This is kept separate\nfrom {@link #dataMapJava} above so that the names can be completely removed by\nthe compiler if they are not used.\n","line":"86"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/currency_list.dart","line":"10"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"CurrencyData","id":"CurrencyData","comment":"\nInformation about a currency.\n","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"getCurrencyCode","id":"getCurrencyCode0()","comment":"\nReturns the ISO4217 code for this currency.\n","line":"14"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"getCurrencySymbol","id":"getCurrencySymbol0()","comment":"\nReturns the default symbol to use for this currency.\n","line":"19"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"getDefaultFractionDigits","id":"getDefaultFractionDigits0()","comment":"\nReturns the default number of decimal positions for this currency.\n","line":"24"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"getPortableCurrencySymbol","id":"getPortableCurrencySymbol0()","comment":"\nReturns the default symbol to use for this currency, intended to be\nrecognizable in most locales.  If such a symbol is not available, it is\nacceptable to return the same value as {@link #getCurrencySymbol()}.\n","line":"31"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"getSimpleCurrencySymbol","id":"getSimpleCurrencySymbol0()","comment":"\nReturns the simplest symbol to use for this currency, which is not guaranteed\nto be unique -- for example, this might return \"$\" for both USD and CAD.  It\nis acceptable to return the same value as {@link #getCurrencySymbol()}.\n","line":"38"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"isDeprecated","id":"isDeprecated0()","comment":"\nReturns true if this currency is deprecated and should not be returned by\ndefault in currency lists.\n","line":"44"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"isSpaceForced","id":"isSpaceForced0()","comment":"\nReturns true if there should always be a space between the currency symbol\nand the number, false if there should be no space.  Ignored unless\n{@link #isSpacingFixed()} returns true.\n","line":"51"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"isSpacingFixed","id":"isSpacingFixed0()","comment":"\nReturns true if the spacing between the currency symbol and the number is\nfixed regardless of locale defaults.  In this case, spacing will be\ndetermined by {@link #isSpaceForced()}.\n","line":"58"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"isSymbolPositionFixed","id":"isSymbolPositionFixed0()","comment":"\nReturns true if the position of the currency symbol relative to the number\nis fixed regardless of locale defaults.  In this case, the position will be\ndetermined by {@link #isSymbolPrefix()}.\n","line":"65"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"isSymbolPrefix","id":"isSymbolPrefix0()","comment":"\nReturns true if the currency symbol should go before the number, false if\nit should go after the number.  This is ignored unless\n{@link #isSymbolPositionFixed()} is true.\n","line":"72"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/currency_data.dart","line":"9"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"DefaultStringValue","id":"DefaultStringValue","comment":"\nDefault string value to be used if no translation is found (and also used as the\nsource for translation).  No quoting (other than normal Java string quoting)\nis done.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"value","id":"value","line":"285"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/constants.dart","line":"284"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"DefaultStringMapValue","id":"DefaultStringMapValue","comment":"\nDefault string map value to be used if no translation is found (and also\nused as the source for translation). No quoting (other than normal Java\nstring quoting) is done.  The strings for the map are supplied in key/value\npairs.\n\nNote that in the corresponding properties/etc file, new keys can be supplied\nwith the name of the method (or its corresponding key) listing the set of keys\nfor the map separated by commas (commas can be part of the keys by preceding\nthem with a backslash).  In either case, further entries have keys matching\nthe key in this map.\n","children":[{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"String","refId":"dart.core/String"}]},"kind":"property","name":"value","id":"value","comment":"\nMust be key-value pairs.\n","line":"276"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/constants.dart","line":"272"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"DefaultStringListValue","id":"DefaultStringListValue","comment":"\nDefault string array value to be used if no translation is found (and also\nused as the source for translation). No quoting (other than normal Java\nstring quoting) is done.\n\nNote that in the corresponding properties/etc file, commas are used to separate\nelements of the array unless they are preceded with a backslash.\n","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"property","name":"value","id":"value","line":"257"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/constants.dart","line":"256"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"DefaultIntValue","id":"DefaultIntValue","comment":"\nDefault integer value to be used if no translation is found (and also used as the\nsource for translation).  No quoting (other than normal Java string quoting)\nis done.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"value","id":"value","line":"245"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/constants.dart","line":"244"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"DefaultDoubleValue","id":"DefaultDoubleValue","comment":"\nDefault double value to be used if no translation is found (and also used as the\nsource for translation).  No quoting (other than normal Java string quoting)\nis done.\n","children":[{"ref":{"name":"double","refId":"dart.core/double"},"kind":"property","name":"value","id":"value","line":"236"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/constants.dart","line":"235"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"DefaultBoolValue","id":"DefaultBoolValue","comment":"\nDefault boolean value to be used if no translation is found (and also used as the\nsource for translation).  No quoting (other than normal Java string quoting)\nis done.\n","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"value","id":"value","line":"227"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/constants.dart","line":"226"},{"superclass":{"name":"LocalizableResource","refId":"dart_web_toolkit_i18n/LocalizableResource"},"isAbstract":true,"kind":"class","name":"Constants","id":"Constants","comment":"\nA tag interface that facilitates locale-sensitive, compile-time binding of\nconstant values supplied from properties files. Using\n<code>GWT.create(<i>class</i>)</code> to \"instantiate\" an interface that\nextends <code>Constants</code> returns an instance of an automatically\ngenerated subclass that is implemented using values from a property file\nselected based on locale.\n\n<p>\nLocale is specified at run time using a meta tag or query string as described\nfor {@link com.google.gwt.i18n.client.Localizable}.\n</p>\n\n<h3>Extending <code>Constants</code></h3>\nTo use <code>Constants</code>, begin by defining an interface that extends\nit. Each interface method is referred to as a <i>constant accessor</i>, and\nits corresponding localized value is loaded based on the key for that method.\nThe default key is simply the unqualified name of the method, but can be specified\ndirectly with an {@code @Key} annotation or a different generation method using\n{@code @GenerateKeys}.  Also, the default value can be specified in an annotation\nrather than a default properties file (and some key generators may require the value\nto be given in the source file via annotations). For example,\n\n{@example com.google.gwt.examples.i18n.NumberFormatConstants}\n\nexpects to find properties named <code>decimalSeparator</code> and\n<code>thousandsSeparator</code> in an associated properties file. For\nexample, the following properties would be used for a German locale:\n\n{@gwt.include com/google/gwt/examples/i18n/NumberFormatConstants_de_DE.properties}\n\n<p>\nThe following example demonstrates how to use constant accessors defined in\nthe interface above:\n\n{@example com.google.gwt.examples.i18n.NumberFormatConstantsExample#useNumberFormatConstants()}\n</p>\n\n<p>\nHere is the same example using annotations to store the default values:\n\n{@example com.google.gwt.examples.i18n.NumberFormatConstantsAnnot}\n</p>\n\n<p>\nIt is also possible to change the property name bound to a constant accessor\nusing the {@code @Key} annotation. For example,\n{@example com.google.gwt.examples.i18n.NumberFormatConstantsWithAltKey}\n\nwould match the names of the following properties:\n\n{@gwt.include com/google/gwt/examples/i18n/NumberFormatConstantsWithAltKey_en.properties}\n</p>\n\n<h3>Defining Constant Accessors</h3>\nConstant accessors must be of the form\n\n<pre>T methodName()</pre>\n\nwhere <code>T</code> is one of the return types in the following table:\n\n<table>\n<tr>\n<th><nobr>If the return type is...&#160;&#160;&#160;</nobr></th>\n<th>The property value is interpreted as...</th>\n<th>Annotation to use for default value</th>\n</tr>\n\n<tr>\n<td><code>String</code></td>\n<td>A plain string value</td>\n<td>{@code @DefaultStringValue}</td>\n</tr>\n\n<tr>\n<td><code>String[]</code></td>\n<td>A comma-separated array of strings; use '<code>\\\\,</code>' to escape\ncommas</td>\n<td>{@code @DefaultStringArrayValue}</td>\n</tr>\n\n<tr>\n<td><code>int</code></td>\n<td>An <code>int</code> value, checked during compilation</td>\n<td>{@code @DefaultIntValue}</td>\n</tr>\n\n<tr>\n<td><code>float</code></td>\n<td>A <code>float</code> value, checked during compilation</td>\n<td>{@code @DefaultFloatValue}</td>\n</tr>\n\n<tr>\n<td><code>double</code></td>\n<td>A <code>double</code> value, checked during compilation</td>\n<td>{@code @DefaultDoubleValue}</td>\n</tr>\n\n<tr>\n<td><code>boolean</code></td>\n<td>A <code>boolean</code> value (\"true\" or \"false\"), checked during\ncompilation</td>\n<td>{@code @DefaultBooleanValue}</td>\n</tr>\n\n<tr>\n<td><code>Map</code></td>\n<td>A comma-separated list of property names, each of which is a key into a\ngenerated map; the value mapped to given key is the value of the property\nhaving named by that key</td>\n<td>{@code @DefaultStringMapValue}</td>\n</tr>\n\n</table>\n\n<p>\nAs an example of a <code>Map</code>, for the following property file:\n</p>\n\n<pre>\na = X\nb = Y\nc = Z\nsomeMap = a, b, c\n</pre>\n\n<p>\nthe constant accessor <code>someMap()</code> would return a\n<code>Map</code> that maps <code>\"a\"</code> onto <code>\"X\"</code>,\n<code>\"b\"</code> onto <code>\"Y\"</code>, and <code>\"c\"</code> onto\n<code>\"Z\"</code>. Iterating through this <code>Map</code> will return\nthe keys or entries in declaration order.\n</p>\n\n<p>The benefit of using annotations, aside from not having to switch to\na different file to enter the default values, is that you can make use\nof compile-time constants and not worrying about quoting commas.  For example:\n\n{@example com.google.gwt.examples.i18n.AnnotConstants}\n</p>\n\n<h3>Binding to Properties Files</h3>\nIf an interface <code>org.example.foo.Intf</code> extends\n<code>Constants</code> and the following code is used to create an object\nfrom <code>Intf</code> as follows:\n\n<pre class=\"code\">Intf constants = (Intf)GWT.create(Intf.class);</pre>\n\nthen <code>constants</code> will be assigned an instance of a generated\nclass whose constant accessors are implemented by extracting values from a\nset of matching properties files. Property values are sought using a\nbest-match algorithm, and candidate properties files are those which (1)\nreside in the same package as the interface (<code>org/example/foo/</code>),\n(2) have a base filename matching the interface name (<code>Intf</code>),\nand (3) have a suffix that most closely matches the locale. Suffixes are\nmatched as follows:\n\n<table>\n\n<tr>\n<th align='left'><nobr>If <code>locale</code> is...&#160;&#160;</nobr></th>\n<th align='left'>The properties file that binds to\n<code>org.example.foo.Intf</code> is...</th>\n</tr>\n\n<tr>\n<td><i>unspecified</i></td>\n<td><code>org/example/foo/Intf.properties</code></td>\n</tr>\n\n<tr>\n<td><code>x</code></td>\n<td><code>org/example/foo/Intf_x.properties</code> if it exists and\ndefines the property being sought, otherwise treated as if\n<code>locale</code> were <i>unspecified</i></td>\n</tr>\n\n<tr>\n<td><code>x_Y</code></td>\n<td><code>org/example/foo/Intf_x_Y.properties</code> if it exists and\ndefines the property being sought, otherwise treated as if\n<code>locale</code> were <code>x</code></td>\n</tr>\n\n</table> where <code>x</code> and <code>Y</code> are language and locale\ncodes, as described in the documentation for\n{@link com.google.gwt.i18n.client.Localizable}.  Note that default values\nsupplied in the source file in annotations take precedence over those in\nthe default properties file, if it is also present.\n\n<p>\nNote that the matching algorithm is applied independently for each constant\naccessor. It is therefore possible to create a hierarchy of related\nproperties files such that an unlocalized properties file acts as a baseline,\nand locale-specific properties files may redefine a subset of those\nproperties, relying on the matching algorithm to prefer localized properties\nwhile still finding unlocalized properties.\n</p>\n\n<h3>Required Module</h3>\nModules that use this interface should inherit\n<code>com.google.gwt.i18n.I18N</code>.\n\n{@gwt.include com/google/gwt/examples/i18n/InheritsExample.gwt.xml}\n\n<h3>Note</h3>\nYou should not directly implement this interface or interfaces derived from\nit since an implementation is generated automatically when message interfaces\nare created using {@link com.google.gwt.core.client.GWT#create(Class)}.\n","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/constants.dart","line":"217"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Meaning","id":"Meaning","comment":"\nSpecifies the meaning of the translated string.  For example, to\ndistinguish between multiple meanings of a word or phrase.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"value","id":"value","line":"148"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/localizable_resource.dart","line":"147"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Key","id":"Key","comment":"\nThe key used for lookup of translated strings.  If not present, the\nkey will be generated based on the {@code @GenerateKeys} annotation,\nor the unqualified method name if it is not present.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"value","id":"value","line":"140"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/localizable_resource.dart","line":"139"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"GenerateKeys","id":"GenerateKeys","comment":"\nRequests that the keys for messages be generated automatically.  If the\nannotation is supplied with no value, the default is to use an MD5 hash of\nthe text and meaning.  If this annotation is not supplied, the keys will be\nthe unqualified method names.\n\n<p>The value is either the name of an inner class of {@code KeyGenerator} or the\nfully-qualified class name of some implementation of {@code KeyGenerator}.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"value","id":"value","line":"131"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/localizable_resource.dart","line":"130"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"GeneratedFrom","id":"GeneratedFrom","comment":"\nAnnotation indicating this is a generated file and the source file it was\ngenerated from.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"value","id":"value","line":"118"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/localizable_resource.dart","line":"117"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Generate","id":"Generate","comment":"\nRequests that a translation source file be generated from the annotated\ninterface.  The file type is determined by the format argument, and the\nfile name by the optional fileName argument.  Some file formats support\naggregating messages from multiple interfaces into one file, while others\ndo not; also, additional parameters may be specified via format-specific\nannotations -- see the documentation of the MessageCatalogFormat implementation\nfor details.\n\nExamples:\n<ul>\n<li>&#64;Generate(format = \"com.google.gwt.i18n.server.PropertyCatalogFactory\")\n<br>generates properties files for all locales, and the names will be\n     of the form MyMessages_locale.properties\n<li>&#64;Generate(format = {\"com.example.ProprietaryFormat1\",\n   \"com.example.ProprietaryFormat2\"},\n   fileName = \"myapp_translate_source\", locales = {\"default\"})\n<br>generates default files in two proprietary formats, with filenames like\n     myapp_translate_source.p1 and myapp_translate_source.p2\n</pre></code>\n","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"property","name":"format","id":"format","comment":"\nFully-qualified class names of the generator classes. Each class must\nimplement com.google.gwt.i18n.server.MessageCatalogFactory\n(com.google.gwt.i18n.rebind.format.MessageCatalogFormat still works, but\nis deprecated).\n\nStrings are used here instead of class literals because the generators\nwill likely contain non-translatable code and thus can't be referenced\nfrom translatable code directly.\n\nEach generator may define additional annotations to supply other\nnecessary parameters.\n","line":"85"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"fileName","id":"fileName","comment":"\nA platform-specific filename for output. If not present, the file will be\nnamed based on the fully-qualified name of the annotated interface. File\nnames without a slash are given a relative name based on the\nfully-qualified package name of the annotated interface. Relative\npathnames are generated in the auxiliary module directory (moduleName-aux\nin the output directory, which is specified by the \"-out\" flag to the\ncompiler, or the current directory if not present) -- absolute path names\nare not allowed. Unless exactly one locale is specified for locales (not\njust only one locale happened to be compiled for), the locale will be\nappended to the name (such as _default [for the default locale], _en_US,\netc) as well as the proper extension for the specified format.\n\nNote that if multiple generators are used, they will have the same base\nfilename so the extensions must be different.\n","line":"103"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"property","name":"locales","id":"locales","comment":"\nA list of locales for which to generate this output file.  If no locales\nare specified, all locales for which the application is compiled for will\nbe generated. Note that the default locale is \"default\".\n","line":"110"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"DEFAULT","id":"DEFAULT","comment":"\nPlaceholder used to detect that no value was supplied for the fileName\nparameter.\n","line":"70"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/localizable_resource.dart","line":"64"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Description","id":"Description","comment":"\nSpecifies a description of the string to be translated, such as a note\nabout the context.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"value","id":"value","line":"40"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/localizable_resource.dart","line":"39"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"DefaultLocale","id":"DefaultLocale","comment":"\nSpecifies the default locale for messages in this file.  If not\nspecified, the default is <code>DEFAULT_LOCALE</code>.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"value","id":"value","line":"32"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"DEFAULT_LOCALE","id":"DEFAULT_LOCALE","line":"30"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/localizable_resource.dart","line":"28"},{"superclass":{"name":"Localizable","refId":"dart_web_toolkit_i18n/Localizable"},"isAbstract":true,"kind":"class","name":"LocalizableResource","id":"LocalizableResource","comment":"\nThis is the common superinterface to Messages and Constants.\n\nEach (and the Constants subinterface ConstantsWithLookup) provide\ncompile-time localization of various forms of data.  Messages is\nused for <code>MessageFormat</code>-style strings which can have\nparameters (including support for plural forms), while Constants\ncan be other types, have simplified quoting requirements, and do\nnot take any parameters.\n\nThe annotations defined here are common to both -- see the individual\nsubinterfaces for additional annotations which apply only to each\none.\n","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/localizable_resource.dart","line":"20"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"NumberFormat","id":"NumberFormat","comment":"\nFormats and parses numbers using locale-sensitive patterns.\n\nThis class provides comprehensive and flexible support for a wide variety of\nlocalized formats, including\n<ul>\n<li><b>Locale-specific symbols</b> such as decimal point, group separator,\ndigit representation, currency symbol, percent, and permill</li>\n<li><b>Numeric variations</b> including integers (\"123\"), fixed-point\nnumbers (\"123.4\"), scientific notation (\"1.23E4\"), percentages (\"12%\"), and\ncurrency amounts (\"$123\")</li>\n<li><b>Predefined standard patterns</b> that can be used both for parsing\nand formatting, including {@link #getDecimalFormat() decimal},\n{@link #getCurrencyFormat() currency},\n{@link #getPercentFormat() percentages}, and\n{@link #getScientificFormat() scientific}</li>\n<li><b>Custom patterns</b> and supporting features designed to make it\npossible to parse and format numbers in any locale, including support for\nWestern, Arabic, and Indic digits</li>\n</ul>\n\n<h3>Patterns</h3>\n<p>\nFormatting and parsing are based on customizable patterns that can include a\ncombination of literal characters and special characters that act as\nplaceholders and are replaced by their localized counterparts. Many\ncharacters in a pattern are taken literally; they are matched during parsing\nand output unchanged during formatting. Special characters, on the other\nhand, stand for other characters, strings, or classes of characters. For\nexample, the '<code>#</code>' character is replaced by a localized digit.\n</p>\n\n<p>\nOften the replacement character is the same as the pattern character. In the\nU.S. locale, for example, the '<code>,</code>' grouping character is\nreplaced by the same character '<code>,</code>'. However, the replacement\nis still actually happening, and in a different locale, the grouping\ncharacter may change to a different character, such as '<code>.</code>'.\nSome special characters affect the behavior of the formatter by their\npresence. For example, if the percent character is seen, then the value is\nmultiplied by 100 before being displayed.\n</p>\n\n<p>\nThe characters listed below are used in patterns. Localized symbols use the\ncorresponding characters taken from corresponding locale symbol collection,\nwhich can be found in the properties files residing in the\n<code><nobr>com.google.gwt.i18n.client.constants</nobr></code>. To insert\na special character in a pattern as a literal (that is, without any special\nmeaning) the character must be quoted. There are some exceptions to this\nwhich are noted below.\n</p>\n\n<table>\n<tr>\n<th>Symbol</th>\n<th>Location</th>\n<th>Localized?</th>\n<th>Meaning</th>\n</tr>\n\n<tr>\n<td><code>0</code></td>\n<td>Number</td>\n<td>Yes</td>\n<td>Digit</td>\n</tr>\n\n<tr>\n<td><code>#</code></td>\n<td>Number</td>\n<td>Yes</td>\n<td>Digit, zero shows as absent</td>\n</tr>\n\n<tr>\n<td><code>.</code></td>\n<td>Number</td>\n<td>Yes</td>\n<td>Decimal separator or monetary decimal separator</td>\n</tr>\n\n<tr>\n<td><code>-</code></td>\n<td>Number</td>\n<td>Yes</td>\n<td>Minus sign</td>\n</tr>\n\n<tr>\n<td><code>,</code></td>\n<td>Number</td>\n<td>Yes</td>\n<td>Grouping separator</td>\n</tr>\n\n<tr>\n<td><code>E</code></td>\n<td>Number</td>\n<td>Yes</td>\n<td>Separates mantissa and exponent in scientific notation; need not be\nquoted in prefix or suffix</td>\n</tr>\n\n<tr>\n<td><code>;</code></td>\n<td>Subpattern boundary</td>\n<td>Yes</td>\n<td>Separates positive and negative subpatterns</td>\n</tr>\n\n<tr>\n<td><code>%</code></td>\n<td>Prefix or suffix</td>\n<td>Yes</td>\n<td>Multiply by 100 and show as percentage</td>\n</tr>\n\n<tr>\n<td><nobr><code>\\u2030</code> (\\u005Cu2030)</nobr></td>\n<td>Prefix or suffix</td>\n<td>Yes</td>\n<td>Multiply by 1000 and show as per mille</td>\n</tr>\n\n<tr>\n<td><nobr><code>\\u00A4</code> (\\u005Cu00A4)</nobr></td>\n<td>Prefix or suffix</td>\n<td>No</td>\n<td>Currency sign, replaced by currency symbol; if doubled, replaced by\ninternational currency symbol; if present in a pattern, the monetary decimal\nseparator is used instead of the decimal separator</td>\n</tr>\n\n<tr>\n<td><code>'</code></td>\n<td>Prefix or suffix</td>\n<td>No</td>\n<td>Used to quote special characters in a prefix or suffix; for example,\n<code>\"'#'#\"</code> formats <code>123</code> to <code>\"#123\"</code>;\nto create a single quote itself, use two in succession, such as\n<code>\"# o''clock\"</code></td>\n</tr>\n\n</table>\n\n<p>\nA <code>NumberFormat</code> pattern contains a postive and negative\nsubpattern separated by a semicolon, such as\n<code>\"#,##0.00;(#,##0.00)\"</code>. Each subpattern has a prefix, a\nnumeric part, and a suffix. If there is no explicit negative subpattern, the\nnegative subpattern is the localized minus sign prefixed to the positive\nsubpattern. That is, <code>\"0.00\"</code> alone is equivalent to\n<code>\"0.00;-0.00\"</code>. If there is an explicit negative subpattern, it\nserves only to specify the negative prefix and suffix; the number of digits,\nminimal digits, and other characteristics are ignored in the negative\nsubpattern. That means that <code>\"#,##0.0#;(#)\"</code> has precisely the\nsame result as <code>\"#,##0.0#;(#,##0.0#)\"</code>.\n</p>\n\n<p>\nThe prefixes, suffixes, and various symbols used for infinity, digits,\nthousands separators, decimal separators, etc. may be set to arbitrary\nvalues, and they will appear properly during formatting. However, care must\nbe taken that the symbols and strings do not conflict, or parsing will be\nunreliable. For example, the decimal separator and thousands separator should\nbe distinct characters, or parsing will be impossible.\n</p>\n\n<p>\nThe grouping separator is a character that separates clusters of integer\ndigits to make large numbers more legible. It commonly used for thousands,\nbut in some locales it separates ten-thousands. The grouping size is the\nnumber of digits between the grouping separators, such as 3 for \"100,000,000\"\nor 4 for \"1 0000 0000\".\n</p>\n\n<h3>Pattern Grammar (BNF)</h3>\n<p>\nThe pattern itself uses the following grammar:\n</p>\n\n<table>\n<tr>\n<td>pattern</td>\n<td>:=</td>\n<td style=\"white-space: nowrap\">subpattern ('<code>;</code>'\nsubpattern)?</td>\n</tr>\n<tr>\n<td>subpattern</td>\n<td>:=</td>\n<td>prefix? number exponent? suffix?</td>\n</tr>\n<tr>\n<td>number</td>\n<td>:=</td>\n<td style=\"white-space: nowrap\">(integer ('<code>.</code>' fraction)?) |\nsigDigits</td>\n</tr>\n<tr>\n<td>prefix</td>\n<td>:=</td>\n<td style=\"white-space: nowrap\">'<code>\\u005Cu0000</code>'..'<code>\\u005CuFFFD</code>' -\nspecialCharacters</td>\n</tr>\n<tr>\n<td>suffix</td>\n<td>:=</td>\n<td style=\"white-space: nowrap\">'<code>\\u005Cu0000</code>'..'<code>\\u005CuFFFD</code>' -\nspecialCharacters</td>\n</tr>\n<tr>\n<td>integer</td>\n<td>:=</td>\n<td style=\"white-space: nowrap\">'<code>#</code>'* '<code>0</code>'*'<code>0</code>'</td>\n</tr>\n<tr>\n<td>fraction</td>\n<td>:=</td>\n<td style=\"white-space: nowrap\">'<code>0</code>'* '<code>#</code>'*</td>\n</tr>\n<tr>\n<td>sigDigits</td>\n<td>:=</td>\n<td style=\"white-space: nowrap\">'<code>#</code>'* '<code>@</code>''<code>@</code>'* '<code>#</code>'*</td>\n</tr>\n<tr>\n<td>exponent</td>\n<td>:=</td>\n<td style=\"white-space: nowrap\">'<code>E</code>' '<code>+</code>'? '<code>0</code>'* '<code>0</code>'</td>\n</tr>\n<tr>\n<td>padSpec</td>\n<td>:=</td>\n<td style=\"white-space: nowrap\">'<code>*</code>' padChar</td>\n</tr>\n<tr>\n<td>padChar</td>\n<td>:=</td>\n<td>'<code>\\u005Cu0000</code>'..'<code>\\u005CuFFFD</code>' - quote</td>\n</tr>\n</table>\n\n<p>\nNotation:\n</p>\n\n<table>\n<tr>\n<td>X*</td>\n<td style=\"white-space: nowrap\">0 or more instances of X</td>\n</tr>\n\n<tr>\n<td>X?</td>\n<td style=\"white-space: nowrap\">0 or 1 instances of X</td>\n</tr>\n\n<tr>\n<td>X|Y</td>\n<td style=\"white-space: nowrap\">either X or Y</td>\n</tr>\n\n<tr>\n<td>C..D</td>\n<td style=\"white-space: nowrap\">any character from C up to D, inclusive</td>\n</tr>\n\n<tr>\n<td>S-T</td>\n<td style=\"white-space: nowrap\">characters in S, except those in T</td>\n</tr>\n</table>\n\n<p>\nThe first subpattern is for positive numbers. The second (optional)\nsubpattern is for negative numbers.\n</p>\n\n <h3>Example</h3> {@example com.google.gwt.examples.NumberFormatExample}\n\n\n","children":[{"returnType":{"name":"NumberFormat","refId":"dart_web_toolkit_i18n/NumberFormat"},"isStatic":true,"kind":"method","name":"getDecimalFormat","id":"getDecimalFormat0()","line":"294"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"formatDouble","id":"formatDouble1()","comment":"\nThis method formats a double to produce a string.\n\n@param number The double to format\n@return the formatted number string\n","children":[{"ref":{"name":"double","refId":"dart.core/double"},"kind":"param","name":"number","id":"number"}],"line":"309"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"formatInt","id":"formatInt1()","comment":"\nThis method formats a Number to produce a string.\n<p>\nAny {@link Number} which is not a {@link BigDecimal}, {@link BigInteger},\nor {@link Long} instance is formatted as a {@code double} value.\n\n@param number The Number instance to format\n@return the formatted number string\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"number","id":"number"}],"line":"325"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"format","id":"format1()","comment":"\nThis method formats a Number to produce a string.\n<p>\nAny {@link Number} which is not a {@link BigDecimal}, {@link BigInteger},\nor {@link Long} instance is formatted as a {@code double} value.\n\n@param number The Number instance to format\n@return the formatted number string\n","children":[{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"number","id":"number"}],"line":"341"},{"ref":{"name":"NumberFormat","refId":"dart_web_toolkit_i18n/NumberFormat"},"isStatic":true,"kind":"variable","name":"_cachedDecimalFormat","id":"_cachedDecimalFormat","isPrivate":true,"line":"292"},{"kind":"constructor","name":"_internal","id":"_internal0()","isPrivate":true,"line":"301"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/number_format.dart","line":"290"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"TimeZoneInfo","id":"TimeZoneInfo","comment":"\nA JavaScript Overlay type on top of the JSON data describing everything we\nneed to know about a particular timezone. The relevant strings of JSON can\nbe found in TimeZoneConstants, or versions localized for non-en locales can\nbe downloaded elsewhere.\n","children":[{"returnType":{"name":"TimeZoneInfo","refId":"dart_web_toolkit_i18n/TimeZoneInfo"},"isStatic":true,"kind":"method","name":"buildTimeZoneData","id":"buildTimeZoneData1()","comment":"\nConstruct a TimeZoneData javascript overlay object given some json text.\nThis method directly evaluates the String that you pass in; no error or\nsafety checking is performed, so be very careful about the source of\nyour data.\n\n@param json JSON text describing a time zone, like what comes from\n{@link  com.google.gwt.i18n.client.constants.TimeZoneConstants}.\n@return a TimeZoneInfo object made from the supplied JSON.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"json","id":"json"}],"line":"24"},{"returnType":{"name":"Object","refId":"dart.core/Object"},"isStatic":true,"kind":"method","name":"eval","id":"eval1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"json","id":"json"}],"line":"28"},{"kind":"constructor","name":"","id":"0()","line":"32"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/time_zone_info.dart","line":"12"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"TimeZone","id":"TimeZone","comment":"\nThe TimeZone class implements a time zone information source for client\napplications. The time zone object is instantiated from a TimeZoneData object,\nwhich is made from a JSON string that contains all the data needed for\nthe specified time zone. Applications can instantiate a time zone statically,\nin which case the data could be retrieved from\nthe {@link com.google.gwt.i18n.client.constants.TimeZoneConstants TimeZoneConstants}\nclass. Applications can also choose to instantiate from a string obtained\nfrom a server. The time zone string contains locale specific data. If the\napplication only uses a short representation, the English data will usually\nsatisfy the user's need. In the case that only the time zone offset is known,\nthere is a decent fallback that only uses the time zone offset to create a\nTimeZone object.\n","children":[{"returnType":{"name":"TimeZone","refId":"dart_web_toolkit_i18n/TimeZone"},"isStatic":true,"kind":"method","name":"createTimeZone","id":"createTimeZone1()","comment":"\nThis factory method provides a decent fallback to create a time zone object\njust based on a given time zone offset.\n\n@param timeZoneOffsetInMinutes time zone offset in minutes\n@return a new time zone object\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"timeZoneOffsetInMinutes","id":"timeZoneOffsetInMinutes"}],"line":"34"},{"returnType":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"method","name":"_composeGMTString","id":"_composeGMTString1()","comment":"\nThis factory method creates a time zone instance from a JSON string that\ncontains the time zone information for desired time zone. Applications can\nget such a string from the TimeZoneConstants class, or it can request the\nstring from the server. Either way, the application obtains the original\nstring from the data provided in the TimeZoneConstant.properties file,\nwhich was carefully prepared from CLDR and Olson time zone database.\n\n@param tzJSON JSON string that contains time zone data\n@return a new time zone object\n\n\nIn GMT representation, +/- has reverse sign of time zone offset.\nwhen offset == 480, it should output GMT-08:00.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"offset","id":"offset"}],"isPrivate":true,"line":"99"},{"returnType":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"method","name":"_composePOSIXTimeZoneID","id":"_composePOSIXTimeZoneID1()","comment":"\nPOSIX time zone ID as fallback.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"offset","id":"offset"}],"isPrivate":true,"line":"115"},{"returnType":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"method","name":"_composeUTCString","id":"_composeUTCString1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"offset","id":"offset"}],"isPrivate":true,"line":"129"},{"returnType":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"method","name":"_offsetDisplay","id":"_offsetDisplay1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"offset","id":"offset"}],"isPrivate":true,"line":"143"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"getDaylightAdjustment","id":"getDaylightAdjustment1()","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"kind":"param","name":"date","id":"date"}],"line":"164"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"getGMTString","id":"getGMTString1()","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"kind":"param","name":"date","id":"date"}],"line":"180"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"getID","id":"getID0()","line":"187"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"getISOTimeZoneString","id":"getISOTimeZoneString1()","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"kind":"param","name":"date","id":"date"}],"line":"194"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"getLongName","id":"getLongName1()","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"kind":"param","name":"date","id":"date"}],"line":"212"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"getOffset","id":"getOffset1()","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"kind":"param","name":"date","id":"date"}],"line":"219"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"getRFCTimeZoneString","id":"getRFCTimeZoneString1()","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"kind":"param","name":"date","id":"date"}],"line":"226"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"getShortName","id":"getShortName1()","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"kind":"param","name":"date","id":"date"}],"line":"244"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"getStandardOffset","id":"getStandardOffset0()","line":"251"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"isDaylightTime","id":"isDaylightTime1()","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"kind":"param","name":"date","id":"date"}],"line":"258"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"isFinal":true,"kind":"variable","name":"_STD_SHORT_NAME","id":"_STD_SHORT_NAME","isPrivate":true,"line":"22"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"isFinal":true,"kind":"variable","name":"_STD_LONG_NAME","id":"_STD_LONG_NAME","isPrivate":true,"line":"23"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"isFinal":true,"kind":"variable","name":"_DLT_SHORT_NAME","id":"_DLT_SHORT_NAME","isPrivate":true,"line":"24"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"isFinal":true,"kind":"variable","name":"_DLT_LONG_NAME","id":"_DLT_LONG_NAME","isPrivate":true,"line":"25"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"_timezoneID","id":"_timezoneID","isPrivate":true,"line":"152"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_standardOffset","id":"_standardOffset","isPrivate":true,"line":"153"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"variable","name":"_tzNames","id":"_tzNames","isPrivate":true,"line":"154"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"variable","name":"_transitionPoints","id":"_transitionPoints","isPrivate":true,"line":"155"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"variable","name":"_adjustments","id":"_adjustments","isPrivate":true,"line":"156"},{"kind":"constructor","name":"","id":"0()","line":"158"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/time_zone.dart","line":"20"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Localizable","id":"Localizable","comment":"\nA tag interface that serves as the root of a family of types used in static\ninternationalization. Using <code>GWT.create(<i>class</i>)</code> to\ninstantiate a type that directly extends or implements\n<code>Localizable</code> invites locale-sensitive type substitution.\n\n<h3>Locale-sensitive Type Substitution</h3>\nIf a type <code>Type</code> directly extends or implements\n<code>Localizable</code> (as opposed to\n{@link com.google.gwt.i18n.client.Constants} or\n{@link com.google.gwt.i18n.client.Messages}) and the following code is used\nto create an object from <code>Type</code> as follows:\n\n<pre class=\"code\">Type localized = (Type)GWT.create(Type.class);</pre>\n\nthen <code>localized</code> will be assigned an instance of a localized\nsubclass, selected based on the value of the <code>locale</code> client\nproperty. The choice of subclass is determined by the following naming\npattern:\n\n<table>\n\n<tr>\n<th align='left'>If <code>locale</code> is...&#160;&#160;&#160;&#160;</th>\n<th align='left'>The substitute class for <code>Type</code> is...</th>\n</tr>\n\n<tr>\n<td><i>unspecified</i></td>\n<td><code>Type</code> itself, or <code>Type_</code> if <code>Type</code>\nis an interface</td>\n</tr>\n\n<tr>\n<td><code>x</code></td>\n<td>Class <code>Type_x</code> if it exists, otherwise treated as if\n<code>locale</code> were <i>unspecified</i></td>\n</tr>\n\n<tr>\n<td><code>x_Y</code></td>\n<td>Class <code>Type_x_Y</code> if it exists, otherwise treated as if\n<code>locale</code> were <code>x</code></td>\n</tr>\n\n</table>\n\nwhere in the table above <code>x</code> is a <a\nhref=\"http://ftp.ics.uci.edu/pub/ietf/http/related/iso639.txt\">ISO language\ncode</a> and <code>Y</code> is a two-letter <a\nhref=\"http://userpage.chemie.fu-berlin.de/diverse/doc/ISO_3166.html\">ISO\ncountry code</a>.\n\n<h3>Specifying Locale</h3>\nThe locale of a module is specified using the <code>locale</code> client\nproperty, which can be specified using either a meta tag or as part of the\nquery string in the host page's URL. If both are specified, the query string\ntakes precedence.\n\n<p>\nTo specify the <code>locale</code> client property using a meta tag in the\nhost HTML, use <code>gwt:property</code> as follows:\n\n<pre>&lt;meta name=\"gwt:property\" content=\"locale=x_Y\"&gt;</pre>\n\nFor example, the following host HTML page sets the locale to \"ja_JP\":\n\n{@gwt.include com/google/gwt/examples/i18n/ColorNameLookupExample_ja_JP.html}\n</p>\n\n<p>\nTo specify the <code>locale</code> client property using a query string,\nspecify a value for the name <code>locale</code>. For example,\n\n<pre>http://www.example.org/myapp.html?locale=fr_CA</pre>\n\n</p>\n\n<h3>For More Information</h3>\nSee the GWT Developer Guide for an introduction to internationalization.\n\n@see com.google.gwt.i18n.client.Constants\n@see com.google.gwt.i18n.client.ConstantsWithLookup\n@see com.google.gwt.i18n.client.Messages\n@see com.google.gwt.i18n.client.Dictionary\n","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/localizable.dart","line":"92"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"interfaces":[{"name":"DateTimeFormatInfo","refId":"dart_web_toolkit_i18n/DateTimeFormatInfo"}],"kind":"class","name":"DefaultDateTimeFormatInfo","id":"DefaultDateTimeFormatInfo","comment":"\nDefault implementation of DateTimeFormatInfo interface, using values from\nthe CLDR root locale.\n<p>\nUsers who need to create their own DateTimeFormatInfo implementation are\nencouraged to extend this class so their implementation won't break when\nnew methods are added.\n","children":[{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"method","name":"ampms","id":"ampms0()","line":"18"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"dateFormat","id":"dateFormat0()","line":"23"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"dateFormatFull","id":"dateFormatFull0()","line":"28"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"dateFormatLong","id":"dateFormatLong0()","line":"33"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"dateFormatMedium","id":"dateFormatMedium0()","line":"38"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"dateFormatShort","id":"dateFormatShort0()","line":"43"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"dateTime","id":"dateTime2()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"timePattern","id":"timePattern"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"datePattern","id":"datePattern"}],"line":"48"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"dateTimeFull","id":"dateTimeFull2()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"timePattern","id":"timePattern"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"datePattern","id":"datePattern"}],"line":"53"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"dateTimeLong","id":"dateTimeLong2()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"timePattern","id":"timePattern"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"datePattern","id":"datePattern"}],"line":"58"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"dateTimeMedium","id":"dateTimeMedium2()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"timePattern","id":"timePattern"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"datePattern","id":"datePattern"}],"line":"63"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"dateTimeShort","id":"dateTimeShort2()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"timePattern","id":"timePattern"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"datePattern","id":"datePattern"}],"line":"68"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"method","name":"erasFull","id":"erasFull0()","line":"73"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"method","name":"erasShort","id":"erasShort0()","line":"78"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"firstDayOfTheWeek","id":"firstDayOfTheWeek0()","line":"83"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"formatDay","id":"formatDay0()","line":"88"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"formatHour12Minute","id":"formatHour12Minute0()","line":"93"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"formatHour12MinuteSecond","id":"formatHour12MinuteSecond0()","line":"98"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"formatHour24Minute","id":"formatHour24Minute0()","line":"103"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"formatHour24MinuteSecond","id":"formatHour24MinuteSecond0()","line":"108"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"formatMinuteSecond","id":"formatMinuteSecond0()","line":"113"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"formatMonthAbbrev","id":"formatMonthAbbrev0()","line":"118"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"formatMonthAbbrevDay","id":"formatMonthAbbrevDay0()","line":"123"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"formatMonthFull","id":"formatMonthFull0()","line":"128"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"formatMonthFullDay","id":"formatMonthFullDay0()","line":"133"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"formatMonthFullWeekdayDay","id":"formatMonthFullWeekdayDay0()","line":"138"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"formatMonthNumDay","id":"formatMonthNumDay0()","line":"143"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"formatYear","id":"formatYear0()","line":"148"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"formatYearMonthAbbrev","id":"formatYearMonthAbbrev0()","line":"153"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"formatYearMonthAbbrevDay","id":"formatYearMonthAbbrevDay0()","line":"158"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"formatYearMonthFull","id":"formatYearMonthFull0()","line":"163"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"formatYearMonthFullDay","id":"formatYearMonthFullDay0()","line":"168"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"formatYearMonthNum","id":"formatYearMonthNum0()","line":"173"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"formatYearMonthNumDay","id":"formatYearMonthNumDay0()","line":"178"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"formatYearMonthWeekdayDay","id":"formatYearMonthWeekdayDay0()","line":"183"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"formatYearQuarterFull","id":"formatYearQuarterFull0()","line":"188"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"formatYearQuarterShort","id":"formatYearQuarterShort0()","line":"193"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"method","name":"monthsFull","id":"monthsFull0()","line":"198"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"method","name":"monthsFullStandalone","id":"monthsFullStandalone0()","line":"215"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"method","name":"monthsNarrow","id":"monthsNarrow0()","line":"220"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"method","name":"monthsNarrowStandalone","id":"monthsNarrowStandalone0()","line":"237"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"method","name":"monthsShort","id":"monthsShort0()","line":"242"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"method","name":"monthsShortStandalone","id":"monthsShortStandalone0()","line":"260"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"method","name":"quartersFull","id":"quartersFull0()","line":"265"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"method","name":"quartersShort","id":"quartersShort0()","line":"275"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"timeFormat","id":"timeFormat0()","line":"285"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"timeFormatFull","id":"timeFormatFull0()","line":"290"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"timeFormatLong","id":"timeFormatLong0()","line":"295"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"timeFormatMedium","id":"timeFormatMedium0()","line":"300"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"timeFormatShort","id":"timeFormatShort0()","line":"305"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"method","name":"weekdaysFull","id":"weekdaysFull0()","line":"310"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"method","name":"weekdaysFullStandalone","id":"weekdaysFullStandalone0()","line":"323"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"method","name":"weekdaysNarrow","id":"weekdaysNarrow0()","line":"328"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"method","name":"weekdaysNarrowStandalone","id":"weekdaysNarrowStandalone0()","line":"341"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"method","name":"weekdaysShort","id":"weekdaysShort0()","line":"346"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"method","name":"weekdaysShortStandalone","id":"weekdaysShortStandalone0()","line":"359"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"weekendEnd","id":"weekendEnd0()","line":"364"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"weekendStart","id":"weekendStart0()","line":"369"},{"kind":"constructor","name":"","id":"0()","line":"16"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/default_date_time_format_info.dart","line":"14"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"DateTimeFormatInfo","id":"DateTimeFormatInfo","comment":"\nInformation required for formatting and parsing localized date/time values.\n\n<p>Implementors should subclass {@link DefaultDateTimeFormatInfo} so when\nmethods are added they will get reasonable defaults and not break.  See the\nsame class for example values returned by these methods.\n","children":[{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"method","name":"ampms","id":"ampms0()","comment":"\nReturns array of strings containing abbreviations for Ante Meridiem and\nPost Meridiem.\n","line":"18"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"dateFormat","id":"dateFormat0()","comment":"\nReturns a safe default date format.\n","line":"23"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"dateFormatFull","id":"dateFormatFull0()","comment":"\nReturns a \"full\" date format.\n","line":"28"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"dateFormatLong","id":"dateFormatLong0()","comment":"\nReturns a \"long\" date format.\n","line":"33"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"dateFormatMedium","id":"dateFormatMedium0()","comment":"\nReturns a \"medium\" date format.\n","line":"38"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"dateFormatShort","id":"dateFormatShort0()","comment":"\nReturns a \"short\" date format.\n","line":"43"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"dateTime","id":"dateTime2()","comment":"\nReturns a date/time format from a date format pattern and a time format\npattern, using the locale default joining.\n\n@param timePattern the time pattern String\n@param datePattern the data pattern String\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"timePattern","id":"timePattern"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"datePattern","id":"datePattern"}],"line":"52"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"dateTimeFull","id":"dateTimeFull2()","comment":"\nReturns a date/time format from a date format pattern and a time format\npattern, using \"full\" joining.\n\n@param timePattern the time pattern String\n@param datePattern the data pattern String\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"timePattern","id":"timePattern"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"datePattern","id":"datePattern"}],"line":"61"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"dateTimeLong","id":"dateTimeLong2()","comment":"\nReturns a date/time format from a date format pattern and a time format\npattern, using \"full\" joining.\n\n@param timePattern the time pattern String\n@param datePattern the data pattern String\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"timePattern","id":"timePattern"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"datePattern","id":"datePattern"}],"line":"70"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"dateTimeMedium","id":"dateTimeMedium2()","comment":"\nReturns a date/time format from a date format pattern and a time format\npattern, using \"full\" joining.\n\n@param timePattern the time pattern String\n@param datePattern the data pattern String\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"timePattern","id":"timePattern"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"datePattern","id":"datePattern"}],"line":"79"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"dateTimeShort","id":"dateTimeShort2()","comment":"\nReturns a date/time format from a date format pattern and a time format\npattern, using \"full\" joining.\n\n@param timePattern the time pattern String\n@param datePattern the data pattern String\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"timePattern","id":"timePattern"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"datePattern","id":"datePattern"}],"line":"88"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"method","name":"erasFull","id":"erasFull0()","comment":"\nReturns an array of the full era names.\n","line":"93"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"method","name":"erasShort","id":"erasShort0()","comment":"\nReturns abbreviations of the era names.\n","line":"98"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"firstDayOfTheWeek","id":"firstDayOfTheWeek0()","comment":"\nReturns the day which generally comes first in a weekly calendar view, as\nan index into the return value of {@link #weekdaysFull()}.\n","line":"104"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"formatDay","id":"formatDay0()","comment":"\nReturns localized format equivalent to the \"d\" skeleton pattern.\n","line":"109"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"formatHour12Minute","id":"formatHour12Minute0()","comment":"\nReturns localized format equivalent to the \"hm\" skeleton pattern.\n","line":"114"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"formatHour12MinuteSecond","id":"formatHour12MinuteSecond0()","comment":"\nReturns localized format equivalent to the \"hms\" skeleton pattern.\n","line":"119"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"formatHour24Minute","id":"formatHour24Minute0()","comment":"\nReturns localized format equivalent to the \"Hm\" skeleton pattern.\n","line":"124"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"formatHour24MinuteSecond","id":"formatHour24MinuteSecond0()","comment":"\nReturns localized format equivalent to the \"Hms\" skeleton pattern.\n","line":"129"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"formatMinuteSecond","id":"formatMinuteSecond0()","comment":"\nReturns localized format equivalent to the \"ms\" skeleton pattern.\n","line":"134"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"formatMonthAbbrev","id":"formatMonthAbbrev0()","comment":"\nReturns localized format equivalent to the \"MMM\" skeleton pattern.\n","line":"139"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"formatMonthAbbrevDay","id":"formatMonthAbbrevDay0()","comment":"\nReturns localized format equivalent to the \"MMMd\" skeleton pattern.\n","line":"144"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"formatMonthFull","id":"formatMonthFull0()","comment":"\nReturns localized format equivalent to the \"MMMM\" skeleton pattern.\n","line":"149"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"formatMonthFullDay","id":"formatMonthFullDay0()","comment":"\nReturns localized format equivalent to the \"MMMMd\" skeleton pattern.\n","line":"154"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"formatMonthFullWeekdayDay","id":"formatMonthFullWeekdayDay0()","comment":"\nReturns localized format equivalent to the \"MMMMEEEEd\" skeleton pattern.\n","line":"159"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"formatMonthNumDay","id":"formatMonthNumDay0()","comment":"\nReturns localized format equivalent to the \"Md\" skeleton pattern.\n","line":"164"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"formatYear","id":"formatYear0()","comment":"\nReturns localized format equivalent to the \"y\" skeleton pattern.\n","line":"169"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"formatYearMonthAbbrev","id":"formatYearMonthAbbrev0()","comment":"\nReturns localized format equivalent to the \"yMMM\" skeleton pattern.\n","line":"174"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"formatYearMonthAbbrevDay","id":"formatYearMonthAbbrevDay0()","comment":"\nReturns localized format equivalent to the \"yMMMd\" skeleton pattern.\n","line":"179"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"formatYearMonthFull","id":"formatYearMonthFull0()","comment":"\nReturns localized format equivalent to the \"yMMMM\" skeleton pattern.\n","line":"184"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"formatYearMonthFullDay","id":"formatYearMonthFullDay0()","comment":"\nReturns localized format equivalent to the \"yMMMMd\" skeleton pattern.\n","line":"189"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"formatYearMonthNum","id":"formatYearMonthNum0()","comment":"\nReturns localized format equivalent to the \"yM\" skeleton pattern.\n","line":"194"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"formatYearMonthNumDay","id":"formatYearMonthNumDay0()","comment":"\nReturns localized format equivalent to the \"yMd\" skeleton pattern.\n","line":"199"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"formatYearMonthWeekdayDay","id":"formatYearMonthWeekdayDay0()","comment":"\nReturns localized format equivalent to the \"yMMMEEEd\" skeleton pattern.\n","line":"204"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"formatYearQuarterFull","id":"formatYearQuarterFull0()","comment":"\nReturns localized format equivalent to the \"yQQQQ\" skeleton pattern.\n","line":"209"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"formatYearQuarterShort","id":"formatYearQuarterShort0()","comment":"\nReturns localized format equivalent to the \"yQ\" skeleton pattern.\n","line":"214"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"method","name":"monthsFull","id":"monthsFull0()","comment":"\nReturns an array of full month names.\n","line":"219"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"method","name":"monthsFullStandalone","id":"monthsFullStandalone0()","comment":"\nReturns an array of month names for use in a stand-alone context.\n","line":"224"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"method","name":"monthsNarrow","id":"monthsNarrow0()","comment":"\nReturns an array of the shortest abbreviations for months, typically a\nsingle character and not guaranteed to be unique.\n","line":"230"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"method","name":"monthsNarrowStandalone","id":"monthsNarrowStandalone0()","comment":"\nReturns an array of the shortest abbreviations for months suitable for use\nin a stand-alone context, typically a single character and not guaranteed\nto be unique.\n","line":"237"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"method","name":"monthsShort","id":"monthsShort0()","comment":"\nReturns an array of month abbreviations.\n","line":"242"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"method","name":"monthsShortStandalone","id":"monthsShortStandalone0()","comment":"\nReturns an array of month abbreviations, suitable for use in a stand-alone\ncontext.\n","line":"248"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"method","name":"quartersFull","id":"quartersFull0()","comment":"\nReturns an array of full quarter names.\n","line":"253"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"method","name":"quartersShort","id":"quartersShort0()","comment":"\nReturns an array of abbreviations for quarters.\n","line":"258"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"timeFormat","id":"timeFormat0()","comment":"\nReturns a safe default time format.\n","line":"263"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"timeFormatFull","id":"timeFormatFull0()","comment":"\nReturns a \"full\" time format.\n","line":"268"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"timeFormatLong","id":"timeFormatLong0()","comment":"\nReturns a \"long\" time format.\n","line":"273"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"timeFormatMedium","id":"timeFormatMedium0()","comment":"\nReturns a \"medium\" time format.\n","line":"278"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"timeFormatShort","id":"timeFormatShort0()","comment":"\nReturns a \"short\" time format.\n","line":"283"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"method","name":"weekdaysFull","id":"weekdaysFull0()","comment":"\nReturns an array of the full names of weekdays.\n","line":"288"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"method","name":"weekdaysFullStandalone","id":"weekdaysFullStandalone0()","comment":"\nReturns an array of the full names of weekdays, suitable for use in a\nstand-alone context.\n","line":"294"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"method","name":"weekdaysNarrow","id":"weekdaysNarrow0()","comment":"\nReturns an array of the shortest abbreviations for weekdays, typically a\nsingle character and not guaranteed to be unique.\n","line":"300"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"method","name":"weekdaysNarrowStandalone","id":"weekdaysNarrowStandalone0()","comment":"\nReturns an array of the shortest abbreviations for weekdays suitable for\nuse in a stand-alone context, typically a single character and not\nguaranteed to be unique.\n","line":"307"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"method","name":"weekdaysShort","id":"weekdaysShort0()","comment":"\nReturns an array of abbreviations for weekdays.\n","line":"312"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"method","name":"weekdaysShortStandalone","id":"weekdaysShortStandalone0()","comment":"\nReturns an array of abbreviations for weekdays, suitable for use in a\nstand-alone context.\n","line":"318"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"weekendEnd","id":"weekendEnd0()","comment":"\nReturns the day which ends the weekend, as an index into the return value\nof {@link #weekdaysFull()}.\n\n<p>Note that this value may be numerically less than\n{@link #weekendStart()} - for example, {@link #weekendStart()} of 6 and\n{@link #weekendEnd()} of 0 means Saturday and Sunday are the weekend.\n","line":"328"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"weekendStart","id":"weekendStart0()","comment":"\nReturns the day which starts the weekend, as an index into the return value\nof {@link #weekdaysFull()}.\n","line":"334"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/date_time_format_info.dart","line":"13"},{"superclass":{"name":"Enum","refId":"dart_web_toolkit_util/Enum"},"kind":"class","name":"PredefinedFormat","id":"PredefinedFormat","comment":"\nPredefined date/time formats -- see {@link CustomDateTimeFormat} if you\nneed some format that isn't supplied here.\n","children":[{"ref":{"name":"PredefinedFormat","refId":"dart_web_toolkit_i18n/PredefinedFormat"},"isStatic":true,"kind":"variable","name":"ISO_8601","id":"ISO_8601","comment":"\nISO 8601 date format, fixed across all locales.\n<p>Example: {@code 2008-10-03T10:29:40.046-04:00}\n<p>http://code.google.com/p/google-web-toolkit/issues/detail?id=3068\n<p>http://www.iso.org/iso/support/faqs/faqs_widely_used_standards/widely_used_standards_other/date_and_time_format.htm\n","line":"415"},{"ref":{"name":"PredefinedFormat","refId":"dart_web_toolkit_i18n/PredefinedFormat"},"isStatic":true,"kind":"variable","name":"RFC_2822","id":"RFC_2822","comment":"\nRFC 2822 date format, fixed across all locales.\n<p>Example: {@code Thu, 20 May 2010 17:54:50 -0700}\n<p>http://tools.ietf.org/html/rfc2822#section-3.3\n","line":"422"},{"ref":{"name":"PredefinedFormat","refId":"dart_web_toolkit_i18n/PredefinedFormat"},"isStatic":true,"kind":"variable","name":"DATE_FULL","id":"DATE_FULL","line":"424"},{"ref":{"name":"PredefinedFormat","refId":"dart_web_toolkit_i18n/PredefinedFormat"},"isStatic":true,"kind":"variable","name":"DATE_LONG","id":"DATE_LONG","line":"425"},{"ref":{"name":"PredefinedFormat","refId":"dart_web_toolkit_i18n/PredefinedFormat"},"isStatic":true,"kind":"variable","name":"DATE_MEDIUM","id":"DATE_MEDIUM","line":"426"},{"ref":{"name":"PredefinedFormat","refId":"dart_web_toolkit_i18n/PredefinedFormat"},"isStatic":true,"kind":"variable","name":"DATE_SHORT","id":"DATE_SHORT","line":"427"},{"ref":{"name":"PredefinedFormat","refId":"dart_web_toolkit_i18n/PredefinedFormat"},"isStatic":true,"kind":"variable","name":"TIME_FULL","id":"TIME_FULL","line":"429"},{"ref":{"name":"PredefinedFormat","refId":"dart_web_toolkit_i18n/PredefinedFormat"},"isStatic":true,"kind":"variable","name":"TIME_LONG","id":"TIME_LONG","line":"430"},{"ref":{"name":"PredefinedFormat","refId":"dart_web_toolkit_i18n/PredefinedFormat"},"isStatic":true,"kind":"variable","name":"TIME_MEDIUM","id":"TIME_MEDIUM","line":"431"},{"ref":{"name":"PredefinedFormat","refId":"dart_web_toolkit_i18n/PredefinedFormat"},"isStatic":true,"kind":"variable","name":"TIME_SHORT","id":"TIME_SHORT","line":"432"},{"ref":{"name":"PredefinedFormat","refId":"dart_web_toolkit_i18n/PredefinedFormat"},"isStatic":true,"kind":"variable","name":"DATE_TIME_FULL","id":"DATE_TIME_FULL","line":"434"},{"ref":{"name":"PredefinedFormat","refId":"dart_web_toolkit_i18n/PredefinedFormat"},"isStatic":true,"kind":"variable","name":"DATE_TIME_LONG","id":"DATE_TIME_LONG","line":"435"},{"ref":{"name":"PredefinedFormat","refId":"dart_web_toolkit_i18n/PredefinedFormat"},"isStatic":true,"kind":"variable","name":"DATE_TIME_MEDIUM","id":"DATE_TIME_MEDIUM","line":"436"},{"ref":{"name":"PredefinedFormat","refId":"dart_web_toolkit_i18n/PredefinedFormat"},"isStatic":true,"kind":"variable","name":"DATE_TIME_SHORT","id":"DATE_TIME_SHORT","line":"437"},{"ref":{"name":"PredefinedFormat","refId":"dart_web_toolkit_i18n/PredefinedFormat"},"isStatic":true,"kind":"variable","name":"DAY","id":"DAY","line":"439"},{"ref":{"name":"PredefinedFormat","refId":"dart_web_toolkit_i18n/PredefinedFormat"},"isStatic":true,"kind":"variable","name":"HOUR_MINUTE","id":"HOUR_MINUTE","line":"440"},{"ref":{"name":"PredefinedFormat","refId":"dart_web_toolkit_i18n/PredefinedFormat"},"isStatic":true,"kind":"variable","name":"HOUR_MINUTE_SECOND","id":"HOUR_MINUTE_SECOND","line":"441"},{"ref":{"name":"PredefinedFormat","refId":"dart_web_toolkit_i18n/PredefinedFormat"},"isStatic":true,"kind":"variable","name":"HOUR24_MINUTE","id":"HOUR24_MINUTE","line":"442"},{"ref":{"name":"PredefinedFormat","refId":"dart_web_toolkit_i18n/PredefinedFormat"},"isStatic":true,"kind":"variable","name":"HOUR24_MINUTE_SECOND","id":"HOUR24_MINUTE_SECOND","line":"443"},{"ref":{"name":"PredefinedFormat","refId":"dart_web_toolkit_i18n/PredefinedFormat"},"isStatic":true,"kind":"variable","name":"MINUTE_SECOND","id":"MINUTE_SECOND","line":"444"},{"ref":{"name":"PredefinedFormat","refId":"dart_web_toolkit_i18n/PredefinedFormat"},"isStatic":true,"kind":"variable","name":"MONTH","id":"MONTH","line":"445"},{"ref":{"name":"PredefinedFormat","refId":"dart_web_toolkit_i18n/PredefinedFormat"},"isStatic":true,"kind":"variable","name":"MONTH_ABBR","id":"MONTH_ABBR","line":"446"},{"ref":{"name":"PredefinedFormat","refId":"dart_web_toolkit_i18n/PredefinedFormat"},"isStatic":true,"kind":"variable","name":"MONTH_ABBR_DAY","id":"MONTH_ABBR_DAY","line":"447"},{"ref":{"name":"PredefinedFormat","refId":"dart_web_toolkit_i18n/PredefinedFormat"},"isStatic":true,"kind":"variable","name":"MONTH_DAY","id":"MONTH_DAY","line":"448"},{"ref":{"name":"PredefinedFormat","refId":"dart_web_toolkit_i18n/PredefinedFormat"},"isStatic":true,"kind":"variable","name":"MONTH_NUM_DAY","id":"MONTH_NUM_DAY","line":"449"},{"ref":{"name":"PredefinedFormat","refId":"dart_web_toolkit_i18n/PredefinedFormat"},"isStatic":true,"kind":"variable","name":"MONTH_WEEKDAY_DAY","id":"MONTH_WEEKDAY_DAY","line":"450"},{"ref":{"name":"PredefinedFormat","refId":"dart_web_toolkit_i18n/PredefinedFormat"},"isStatic":true,"kind":"variable","name":"YEAR","id":"YEAR","line":"451"},{"ref":{"name":"PredefinedFormat","refId":"dart_web_toolkit_i18n/PredefinedFormat"},"isStatic":true,"kind":"variable","name":"YEAR_MONTH","id":"YEAR_MONTH","line":"452"},{"ref":{"name":"PredefinedFormat","refId":"dart_web_toolkit_i18n/PredefinedFormat"},"isStatic":true,"kind":"variable","name":"YEAR_MONTH_ABBR","id":"YEAR_MONTH_ABBR","line":"453"},{"ref":{"name":"PredefinedFormat","refId":"dart_web_toolkit_i18n/PredefinedFormat"},"isStatic":true,"kind":"variable","name":"YEAR_MONTH_ABBR_DAY","id":"YEAR_MONTH_ABBR_DAY","line":"454"},{"ref":{"name":"PredefinedFormat","refId":"dart_web_toolkit_i18n/PredefinedFormat"},"isStatic":true,"kind":"variable","name":"YEAR_MONTH_DAY","id":"YEAR_MONTH_DAY","line":"455"},{"ref":{"name":"PredefinedFormat","refId":"dart_web_toolkit_i18n/PredefinedFormat"},"isStatic":true,"kind":"variable","name":"YEAR_MONTH_NUM","id":"YEAR_MONTH_NUM","line":"456"},{"ref":{"name":"PredefinedFormat","refId":"dart_web_toolkit_i18n/PredefinedFormat"},"isStatic":true,"kind":"variable","name":"YEAR_MONTH_NUM_DAY","id":"YEAR_MONTH_NUM_DAY","line":"457"},{"ref":{"name":"PredefinedFormat","refId":"dart_web_toolkit_i18n/PredefinedFormat"},"isStatic":true,"kind":"variable","name":"YEAR_MONTH_WEEKDAY_DAY","id":"YEAR_MONTH_WEEKDAY_DAY","line":"458"},{"ref":{"name":"PredefinedFormat","refId":"dart_web_toolkit_i18n/PredefinedFormat"},"isStatic":true,"kind":"variable","name":"YEAR_QUARTER","id":"YEAR_QUARTER","line":"459"},{"ref":{"name":"PredefinedFormat","refId":"dart_web_toolkit_i18n/PredefinedFormat"},"isStatic":true,"kind":"variable","name":"YEAR_QUARTER_ABBR","id":"YEAR_QUARTER_ABBR","line":"460"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"int","refId":"dart_web_toolkit_i18n/PredefinedFormat/int"},"kind":"param","name":"type","id":"type"}],"line":"405"},{"kind":"typeparam","name":"int","id":"int"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/date_time_format.dart","line":"403"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"DateTimeFormat","id":"DateTimeFormat","comment":"\nFormats and parses dates and times using locale-sensitive patterns.\n\n<h3>Patterns</h3>\nc\n<table>\n<tr>\n<th>Symbol</th>\n<th>Meaning</th>\n<th>Presentation</th>\n<th>Example</th>\n</tr>\n\n<tr>\n<td><code>G</code></td>\n<td>era designator</td>\n<td>Text</td>\n<td><code>AD</code></td>\n</tr>\n\n<tr>\n<td><code>y</code></td>\n<td>year</td>\n<td>Number</td>\n<td><code>1996</code></td>\n</tr>\n\n<tr>\n<td><code>L</code></td>\n<td>standalone month in year</td>\n<td>Text or Number</td>\n<td><code>July (or) 07</code></td>\n</tr>\n\n<tr>\n<td><code>M</code></td>\n<td>month in year</td>\n<td>Text or Number</td>\n<td><code>July (or) 07</code></td>\n</tr>\n\n<tr>\n<td><code>d</code></td>\n<td>day in month</td>\n<td>Number</td>\n<td><code>10</code></td>\n</tr>\n\n<tr>\n<td><code>h</code></td>\n<td>hour in am/pm (1-12)</td>\n<td>Number</td>\n<td><code>12</code></td>\n</tr>\n\n<tr>\n<td><code>H</code></td>\n<td>hour in day (0-23)</td>\n<td>Number</td>\n<td><code>0</code></td>\n</tr>\n\n<tr>\n<td><code>m</code></td>\n<td>minute in hour</td>\n<td>Number</td>\n<td><code>30</code></td>\n</tr>\n\n<tr>\n<td><code>s</code></td>\n<td>second in minute</td>\n<td>Number</td>\n<td><code>55</code></td>\n</tr>\n\n<tr>\n<td><code>S</code></td>\n<td>fractional second</td>\n<td>Number</td>\n<td><code>978</code></td>\n</tr>\n\n<tr>\n<td><code>E</code></td>\n<td>day of week</td>\n<td>Text</td>\n<td><code>Tuesday</code></td>\n</tr>\n\n<tr>\n<td><code>c</code></td>\n<td>standalone day of week</td>\n<td>Text</td>\n<td><code>Tuesday</code></td>\n</tr>\n\n<tr>\n<td><code>a</code></td>\n<td>am/pm marker</td>\n<td>Text</td>\n<td><code>PM</code></td>\n</tr>\n\n<tr>\n<td><code>k</code></td>\n<td>hour in day (1-24)</td>\n<td>Number</td>\n<td><code>24</code></td>\n</tr>\n\n<tr>\n<td><code>K</code></td>\n<td>hour in am/pm (0-11)</td>\n<td>Number</td>\n<td><code>0</code></td>\n</tr>\n\n<tr>\n<td><code>z</code></td>\n<td>time zone</td>\n<td>Text</td>\n<td><code>Pacific Standard Time(see comment)</code></td>\n</tr>\n\n<tr>\n<td><code>Z</code></td>\n<td>time zone (RFC 822)</td>\n<td>Text</td>\n<td><code>-0800(See comment)</code></td>\n</tr>\n\n<tr>\n<td><code>v</code></td>\n<td>time zone id</td>\n<td>Text</td>\n<td><code>America/Los_Angeles(See comment)</code></td>\n</tr>\n\n<tr>\n<td><code>'</code></td>\n<td>escape for text</td>\n<td>Delimiter</td>\n<td><code>'Date='</code></td>\n</tr>\n\n<tr>\n<td><code>''</code></td>\n<td>single quote</td>\n<td>Literal</td>\n<td><code>'o''clock'</code></td>\n</tr>\n</table>\n\n<p>\nThe number of pattern letters influences the format, as follows:\n</p>\n\n<dl>\n<dt>Text</dt>\n<dd>if 4 or more, then use the full form; if less than 4, use short or\nabbreviated form if it exists (e.g., <code>\"EEEE\"</code> produces\n<code>\"Monday\"</code>, <code>\"EEE\"</code> produces <code>\"Mon\"</code>)</dd>\n\n<dt>Number</dt>\n<dd>the minimum number of digits. Shorter numbers are zero-padded to this\namount (e.g. if <code>\"m\"</code> produces <code>\"6\"</code>, <code>\"mm\"</code>\nproduces <code>\"06\"</code>). Year is handled specially; that is, if the count\nof 'y' is 2, the Year will be truncated to 2 digits. (e.g., if\n<code>\"yyyy\"</code> produces <code>\"1997\"</code>, <code>\"yy\"</code> produces\n<code>\"97\"</code>.) Unlike other fields, fractional seconds are padded on the\nright with zero.</dd>\n\n<dt>Text or Number</dt>\n<dd>3 or more, use text, otherwise use number. (e.g. <code>\"M\"</code>\nproduces <code>\"1\"</code>, <code>\"MM\"</code> produces <code>\"01\"</code>,\n<code>\"MMM\"</code> produces <code>\"Jan\"</code>, and <code>\"MMMM\"</code>\nproduces <code>\"January\"</code>.  Some pattern letters also treat a count\nof 5 specially, meaning a single-letter abbreviation: <code>L</code>,\n<code>M</code>, <code>E</code>, and <code>c</code>.</dd>\n</dl>\n\n<p>\nAny characters in the pattern that are not in the ranges of ['<code>a</code>\n'..'<code>z</code>'] and ['<code>A</code>'..'<code>Z</code>'] will be treated\nas quoted text. For instance, characters like '<code>:</code>', '\n<code>.</code>', '<code> </code>' (space), '<code>#</code>' and '\n<code>@</code>' will appear in the resulting time text even they are not\nembraced within single quotes.\n</p>\n\n<p>\n[Time Zone Handling] Web browsers don't provide all the information we need\nfor proper time zone formating -- so GWT has a copy of the required data, for\nyour convenience. For simpler cases, one can also use a fallback\nimplementation that only keeps track of the current timezone offset. These\ntwo approaches are called, respectively, Common TimeZones and Simple\nTimeZones, although both are implemented with the same TimeZone class.\n\n\"TimeZone createTimeZone(String timezoneData)\" returns a Common TimeZone\nobject, and \"TimeZone createTimeZone(int timeZoneOffsetInMinutes)\" returns a\nSimple TimeZone object. The one provided by OS fall into to Simple TimeZone\ncategory. For formatting purpose, following table shows the behavior of GWT\nDateTimeFormat.\n</p>\n<table>\n<tr>\n<th>Pattern</th>\n<th>Common TimeZone</th>\n<th>Simple TimeZone</th>\n</tr>\n<tr>\n<td>z, zz, zzz</td>\n<td>PDT</td>\n<td>UTC-7</td>\n</tr>\n<tr>\n<td>zzzz</td>\n<td>Pacific Daylight Time</td>\n<td>UTC-7</td>\n</tr>\n<tr>\n<td>Z, ZZ</td>\n<td>-0700</td>\n<td>-0700</td>\n</tr>\n<tr>\n<td>ZZZ</td>\n<td>-07:00</td>\n<td>-07:00</td>\n</tr>\n<tr>\n<td>ZZZZ</td>\n<td>GMT-07:00</td>\n<td>GMT-07:00</td>\n</tr>\n<tr>\n<td>v, vv, vvv, vvvv</td>\n<td>America/Los_Angeles</td>\n<td>Etc/GMT+7</td>\n</tr>\n</table>\n\n<h3>Parsing Dates and Times</h3>\n<p>\nThe pattern does not need to specify every field.  If the year, month, or\nday is missing from the pattern, the corresponding value will be taken from\nthe current date.  If the month is specified but the day is not, the day will\nbe constrained to the last day within the specified month.  If the hour,\nminute, or second is missing, the value defaults to zero.\n</p>\n\n<p>\nAs with formatting (described above), the count of pattern letters determines\nthe parsing behavior.\n</p>\n\n<dl>\n<dt>Text</dt>\n<dd>4 or more pattern letters--use full form, less than 4--use short or\nabbreviated form if one exists. In parsing, we will always try long format,\nthen short.</dd>\n\n<dt>Number</dt>\n<dd>the minimum number of digits.</dd>\n\n<dt>Text or Number</dt>\n<dd>3 or more characters means use text, otherwise use number</dd>\n</dl>\n\n<p>\nAlthough the current pattern specification doesn't not specify behavior for\nall letters, it may in the future. It is strongly discouraged to use\nunspecified letters as literal text without quoting them.\n</p>\n<p>\n[Note on TimeZone] The time zone support for parsing is limited. Only\nstandard GMT and RFC format are supported. Time zone specification using time\nzone id (like America/Los_Angeles), time zone names (like PST, Pacific\nStandard Time) are not supported. Normally, it is too much a burden for a\nclient application to load all the time zone symbols. And in almost all those\ncases, it is a better choice to do such parsing on server side through\ncertain RPC mechanism. This decision is based on particular use cases we have\nstudied; in principle, it could be changed in future versions.\n</p>\n\n<h3>Examples</h3>\n<table>\n<tr>\n<th>Pattern</th>\n<th>Formatted Text</th>\n</tr>\n\n<tr>\n<td><code>\"yyyy.MM.dd G 'at' HH:mm:ss vvvv\"</code></td>\n<td><code>1996.07.10 AD at 15:08:56 America/Los_Angeles</code></td>\n</tr>\n\n<tr>\n<td><code>\"EEE, MMM d, ''yy\"</code></td>\n<td><code>Wed, July 10, '96</code></td>\n</tr>\n\n<tr>\n<td><code>\"h:mm a\"</code></td>\n<td><code>12:08 PM</code></td>\n</tr>\n\n<tr>\n<td><code>\"hh 'o''clock' a, zzzz\"</code></td>\n<td><code> 12 o'clock PM, Pacific Daylight Time</code></td>\n</tr>\n\n<tr>\n<td><code>\"K:mm a, vvvv\"</code></td>\n<td><code> 0:00 PM, America/Los_Angeles</code></td>\n</tr>\n\n<tr>\n<td><code>\"yyyyy.MMMMM.dd GGG hh:mm aaa\"</code></td>\n<td><code>01996.July.10 AD 12:08 PM</code></td>\n</tr>\n</table>\n\n<h3>Additional Parsing Considerations</h3>\n<p>\nWhen parsing a date string using the abbreviated year pattern (\n<code>\"yy\"</code>), the parser must interpret the abbreviated year relative\nto some century. It does this by adjusting dates to be within 80 years before\nand 20 years after the time the parser instance is created. For example,\nusing a pattern of <code>\"MM/dd/yy\"</code> and a <code>DateTimeFormat</code>\nobject created on Jan 1, 1997, the string <code>\"01/11/12\"</code> would be\ninterpreted as Jan 11, 2012 while the string <code>\"05/04/64\"</code> would be\ninterpreted as May 4, 1964. During parsing, only strings consisting of\nexactly two digits, as defined by {@link java.lang.Character#isDigit(char)},\nwill be parsed into the default century. If the year pattern does not have\nexactly two 'y' characters, the year is interpreted literally, regardless of\nthe number of digits. For example, using the pattern\n<code>\"MM/dd/yyyy\"</code>, \"01/11/12\" parses to Jan 11, 12 A.D.\n</p>\n\n<p>\nWhen numeric fields abut one another directly, with no intervening delimiter\ncharacters, they constitute a run of abutting numeric fields. Such runs are\nparsed specially. For example, the format \"HHmmss\" parses the input text\n\"123456\" to 12:34:56, parses the input text \"12345\" to 1:23:45, and fails to\nparse \"1234\". In other words, the leftmost field of the run is flexible,\nwhile the others keep a fixed width. If the parse fails anywhere in the run,\nthen the leftmost field is shortened by one character, and the entire run is\nparsed again. This is repeated until either the parse succeeds or the\nleftmost field is one character in length. If the parse still fails at that\npoint, the parse of the run fails.\n</p>\n\n<p>\nIn the current implementation, timezone parsing only supports\n<code>GMT:hhmm</code>, <code>GMT:+hhmm</code>, and <code>GMT:-hhmm</code>.\n</p>\n\n<h3>Example</h3> {@example com.google.gwt.examples.DateTimeFormatExample}\n\n","children":[{"returnType":{"name":"DateTimeFormat","refId":"dart_web_toolkit_i18n/DateTimeFormat"},"isStatic":true,"kind":"method","name":"getPredefinedFormat","id":"getPredefinedFormat1()","comment":"\nGet a DateTimeFormat instance for a predefined format.\n\n<p>See {@link CustomDateTimeFormat} if you need a localized format that is\nnot supported here.\n\n@param predef {@link PredefinedFormat} describing desired format\n@return a DateTimeFormat instance for the specified format\n","children":[{"ref":{"name":"PredefinedFormat","refId":"dart_web_toolkit_i18n/PredefinedFormat"},"kind":"param","name":"predef","id":"predef"}],"line":"380"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"format","id":"format2()","comment":"\nFormat a date object using specified time zone.\n\n@param date the date object being formatted\n@param timeZone a TimeZone object that holds time zone information, or\n    {@code null} to use the default\n\n@return string representation for this date in the format defined by this\n        object\n","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"kind":"param","name":"date","id":"date"},{"ref":{"name":"TimeZone","refId":"dart_web_toolkit_i18n/TimeZone"},"defaultValue":"null","isOptional":true,"kind":"param","name":"timeZone","id":"timeZone"}],"line":"394"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/date_time_format.dart","line":"369"},{"superclass":{"name":"BidiFormatterBase","refId":"dart_web_toolkit_i18n/BidiFormatterBase"},"kind":"class","name":"BidiFormatter","id":"BidiFormatter","comment":"\nUtility class for formatting text for display in a potentially\nopposite-direction context without garbling. The direction of the context is\nset at formatter creation and the direction of the text can be either\nestimated or passed in when known. Provides the following functionality:\n<p>\n1. BiDi Wrapping: When text in one language is mixed into a document in\nanother, opposite-direction language, e.g. when an English business name is\nembedded in a Hebrew web page, both the inserted string and the text\nfollowing it may be displayed incorrectly unless the inserted string is\nexplicitly separated from the surrounding text in a \"wrapper\" that declares\nits direction at the start and then resets it back at the end. This wrapping\ncan be done in HTML mark-up (e.g. a 'span dir=rtl' tag) or - only in contexts\nwhere mark-up cannot be used - in Unicode BiDi formatting codes (LRE|RLE and\nPDF). Optionally, the mark-up can be inserted even when the direction is the\nsame, in order to keep the DOM structure more stable. Providing such wrapping\nservices is the basic purpose of the BiDi formatter.\n<p>\n2. Direction estimation: How does one know whether a string about to be\ninserted into surrounding text has the same direction? Well, in many cases,\none knows that this must be the case when writing the code doing the\ninsertion, e.g. when a localized message is inserted into a localized page.\nIn such cases there is no need to involve the BiDi formatter at all. In some\nother cases, it need not be the same as the context, but is either constant\n(e.g. urls are always LTR) or otherwise known. In the remaining cases, e.g.\nwhen the string is user-entered or comes from a database, the language of the\nstring (and thus its direction) is not known a priori, and must be estimated\nat run-time. The BiDi formatter can do this automatically.\n<p>\n3. Escaping: When wrapping plain text - i.e. text that is not already HTML or\nHTML-escaped - in HTML mark-up, the text must first be HTML-escaped to\nprevent XSS attacks and other nasty business. This of course is always true,\nbut the escaping can not be done after the string has already been wrapped in\nmark-up, so the BiDi formatter also serves as a last chance and includes\nescaping services.\n<p>\nThus, in a single call, the formatter will escape the input string as\nspecified, determine its direction, and wrap it as necessary. It is then up\nto the caller to insert the return value in the output.\n\n","children":[{"returnType":{"name":"BidiFormatter","refId":"dart_web_toolkit_i18n/BidiFormatter"},"isStatic":true,"kind":"method","name":"getInstance","id":"getInstance2()","comment":"\nFactory for creating an instance of BidiFormatter given the context\ndirection and the desired span wrapping behavior (see below).\n\n@param rtlContext Whether the context direction is RTL. See an example of\n         a simple use case at {@link #getInstance(boolean)}\n@param alwaysSpan Whether {@link #spanWrap} (and its variations) should\n         always use a 'span' tag, even when the input direction is neutral\n         or matches the context, so that the DOM structure of the output\n         does not depend on the combination of directions\n","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"rtlContext","id":"rtlContext"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"kind":"param","name":"alwaysSpan","id":"alwaysSpan"}],"line":"61"},{"returnType":{"name":"BidiFormatter","refId":"dart_web_toolkit_i18n/BidiFormatter"},"isStatic":true,"kind":"method","name":"getInstanceForCurrentLocale","id":"getInstanceForCurrentLocale1()","comment":"\nFactory for creating an instance of BidiFormatter whose context direction\nmatches the current locale's direction, and given the desired span wrapping\nbehavior (see below).\n\n@param alwaysSpan Whether {@link #spanWrap} (and its variations) should\n         always use a 'span' tag, even when the input direction is neutral\n         or matches the context, so that the DOM structure of the output\n         does not depend on the combination of directions\n","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"kind":"param","name":"alwaysSpan","id":"alwaysSpan"}],"line":"75"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"spanWrapWithKnownDir","id":"spanWrapWithKnownDir4()","comment":"\nFormats a string of given direction for use in HTML output of the context\ndirection, so an opposite-direction string is neither garbled nor garbles\nwhat follows it.\n<p>\nThe algorithm: estimates the direction of input argument {@code str}. In\ncase its direction doesn't match the context direction, wraps it with a\n'span' tag and adds a \"dir\" attribute (either 'dir=rtl' or 'dir=ltr').\n<p>\nIf {@code setAlwaysSpan(true)} was used, the input is always wrapped with\n'span', skipping just the dir attribute when it's not needed.\n<p>\nIf {@code dirReset}, and if the overall direction or the exit direction of\n{@code str} are opposite to the context direction, a trailing unicode BiDi\nmark matching the context direction is appended (LRM or RLM).\n<p>\nIf !{@code isHtml}, HTML-escapes {@code str} regardless of wrapping.\n\n@param dir {@code str}'s direction\n@param str The input string\n@param isHtml Whether {@code str} is HTML / HTML-escaped\n@param dirReset Whether to append a trailing unicode bidi mark matching the\n         context direction, when needed, to prevent the possible garbling\n         of whatever may follow {@code str}\n@return Input string after applying the above processing.\n","children":[{"ref":{"name":"Direction","refId":"dart_web_toolkit_i18n/Direction"},"kind":"param","name":"dir","id":"dir"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"str","id":"str"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"kind":"param","name":"isHtml","id":"isHtml"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"kind":"param","name":"dirReset","id":"dirReset"}],"line":"114"},{"kind":"constructor","name":"","id":"2()","comment":"\n@param contextDir The context direction\n@param alwaysSpan Whether {@link #spanWrap} (and its variations) should\n         always use a 'span' tag, even when the input direction is neutral\n         or matches the context, so that the DOM structure of the output\n         does not depend on the combination of directions\n","children":[{"ref":{"name":"Direction","refId":"dart_web_toolkit_i18n/Direction"},"kind":"param","name":"contextDir","id":"contextDir"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"alwaysSpan","id":"alwaysSpan"}],"line":"86"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/bidi_formatter.dart","line":"48"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Format","id":"Format","comment":"\nA container class for direction-related string constants, e.g. Unicode\nformatting characters.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"isFinal":true,"kind":"variable","name":"LEFT","id":"LEFT","comment":"\n\"left\" string constant.\n","line":"89"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"isFinal":true,"kind":"variable","name":"LRE","id":"LRE","comment":"\nUnicode \"Left-To-Right Embedding\" (LRE) character.\n","line":"94"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"isFinal":true,"kind":"variable","name":"LRM","id":"LRM","comment":"\nUnicode \"Left-To-Right Mark\" (LRM) character.\n","line":"99"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"isFinal":true,"kind":"variable","name":"LRM_STRING","id":"LRM_STRING","comment":"\nString representation of LRM.\n","line":"104"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"isFinal":true,"kind":"variable","name":"PDF","id":"PDF","comment":"\nUnicode \"Pop Directional Formatting\" (PDF) character.\n","line":"109"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"isFinal":true,"kind":"variable","name":"RIGHT","id":"RIGHT","comment":"\n\"right\" string constant.\n","line":"114"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"isFinal":true,"kind":"variable","name":"RLE","id":"RLE","comment":"\nUnicode \"Right-To-Left Embedding\" (RLE) character.\n","line":"119"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"isFinal":true,"kind":"variable","name":"RLM","id":"RLM","comment":"\nUnicode \"Right-To-Left Mark\" (RLM) character.\n","line":"124"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"isFinal":true,"kind":"variable","name":"RLM_STRING","id":"RLM_STRING","comment":"\nString representation of RLM.\n","line":"129"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/bidi_formatter_base.dart","line":"85"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"BidiFormatterBase","id":"BidiFormatterBase","comment":"\nBase class for {@link BidiFormatter} and {@link SafeHtmlBidiFormatter} that\ncontains their common implementation.\n","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"spanWrapWithKnownDirBase","id":"spanWrapWithKnownDirBase4()","comment":"\n@see BidiFormatter#spanWrapWithKnownDir(HasDirection.Direction, String, boolean, boolean)\n\n@param dir {@code str}'s direction\n@param str The input string\n@param isHtml Whether {@code str} is HTML / HTML-escaped\n@param dirReset Whether to append a trailing unicode bidi mark matching the\n         context direction, when needed, to prevent the possible garbling\n         of whatever may follow {@code str}\n@return Input string after applying the above processing.\n","children":[{"ref":{"name":"Direction","refId":"dart_web_toolkit_i18n/Direction"},"kind":"param","name":"dir","id":"dir"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"str","id":"str"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"isHtml","id":"isHtml"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"dirReset","id":"dirReset"}],"line":"28"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"dirResetIfNeeded","id":"dirResetIfNeeded4()","comment":"\nReturns a unicode BiDi mark matching the context direction (LRM or RLM) if\n{@code dirReset}, and if the overall direction or the exit direction of\n{@code str} are opposite to the context direction. Otherwise returns the\nempty string.\n\n@param str The input string\n@param dir {@code str}'s overall direction\n@param isHtml Whether {@code str} is HTML / HTML-escaped\n@param dirReset Whether to perform the reset\n@return A unicode BiDi mark or the empty string.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"str","id":"str"},{"ref":{"name":"Direction","refId":"dart_web_toolkit_i18n/Direction"},"kind":"param","name":"dir","id":"dir"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"isHtml","id":"isHtml"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"dirReset","id":"dirReset"}],"line":"65"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"alwaysSpan","id":"alwaysSpan","line":"12"},{"ref":{"name":"Direction","refId":"dart_web_toolkit_i18n/Direction"},"kind":"variable","name":"contextDir","id":"contextDir","line":"13"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"Direction","refId":"dart_web_toolkit_i18n/Direction"},"initializedField":{"name":"contextDir","refId":"dart_web_toolkit_i18n/BidiFormatterBase/contextDir"},"kind":"param","name":"contextDir","id":"contextDir"},{"ref":{"name":"bool","refId":"dart.core/bool"},"initializedField":{"name":"alwaysSpan","refId":"dart_web_toolkit_i18n/BidiFormatterBase/alwaysSpan"},"kind":"param","name":"alwaysSpan","id":"alwaysSpan"}],"line":"15"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/bidi_formatter_base.dart","line":"10"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"BidiUtils","id":"BidiUtils","comment":"\nUtility functions for performing common Bidi tests on strings.\n","children":[{"returnType":{"name":"BidiUtils","refId":"dart_web_toolkit_i18n/BidiUtils"},"isStatic":true,"kind":"method","name":"get","id":"get0()","comment":"\nGet an instance of BidiUtils.\n@return An instance of BidiUtils\n","line":"20"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"stripHtmlIfNeeded","id":"stripHtmlIfNeeded2()","comment":"\nReturns the input text with spaces instead of HTML tags or HTML escapes, if\nisStripNeeded is true. Else returns the input as is.\nUseful for text directionality estimation.\nNote: the function should not be used in other contexts; it is not 100%\ncorrect, but rather a good-enough implementation for directionality\nestimation purposes.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"str","id":"str"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"isStripNeeded","id":"isStripNeeded"}],"line":"114"},{"returnType":{"name":"Direction","refId":"dart_web_toolkit_i18n/Direction"},"isStatic":true,"kind":"method","name":"getDirectionOnElement","id":"getDirectionOnElement1()","comment":"\nGets the directionality of an element.\n\n@param  elem  the element on which to check the directionality property\n@return <code>RTL</code> if the directionality is right-to-left,\n        <code>LTR</code> if the directionality is left-to-right, or\n        <code>DEFAULT</code> if the directionality is not explicitly set\n","children":[{"ref":{"name":"Element","refId":"dart.dom.html/Element"},"kind":"param","name":"elem","id":"elem"}],"line":"137"},{"returnType":{"name":"void","refId":"void"},"isStatic":true,"kind":"method","name":"setDirectionOnElement","id":"setDirectionOnElement2()","comment":"\nSets the directionality property for an element.\n\n@param elem  the element on which to set the property\n@param direction <code>RTL</code> if the directionality should be set to right-to-left,\n                 <code>LTR</code> if the directionality should be set to left-to-right\n                 <code>DEFAULT</code> if the directionality should be removed from the element\n","children":[{"ref":{"name":"Element","refId":"dart.dom.html/Element"},"kind":"param","name":"elem","id":"elem"},{"ref":{"name":"Direction","refId":"dart_web_toolkit_i18n/Direction"},"kind":"param","name":"direction","id":"direction"}],"line":"157"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"endsWithLtr","id":"endsWithLtr2()","comment":"\nCheck whether the last strongly-directional character in the string is LTR.\n@param str the string to check\n@param isHtml whether str is HTML / HTML-escaped\n@return whether LTR exit directionality was detected\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"str","id":"str"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"kind":"param","name":"isHtml","id":"isHtml"}],"line":"181"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"endsWithRtl","id":"endsWithRtl2()","comment":"\nCheck whether the last strongly-directional character in the string is RTL.\n@param str the string to check\n@param isHtml whether str is HTML / HTML-escaped\n@return whether RTL exit directionality was detected\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"str","id":"str"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"kind":"param","name":"isHtml","id":"isHtml"}],"line":"194"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"startsWithRtl","id":"startsWithRtl2()","comment":"\nCheck whether the first strongly-directional character in the string is\nRTL.\n@param str the string to check\n@param isHtml whether {@code str} is HTML / HTML-escaped\n@return whether RTL exit directionality was detected\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"str","id":"str"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"kind":"param","name":"isHtml","id":"isHtml"}],"line":"208"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"hasAnyLtr","id":"hasAnyLtr2()","comment":"\nChecks if the given string has any LTR characters in it.\n@param str the string to be tested\n@param isHtml whether str is HTML / HTML-escaped\n@return whether the string contains any LTR characters\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"str","id":"str"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"kind":"param","name":"isHtml","id":"isHtml"}],"line":"221"},{"returnType":{"name":"Direction","refId":"dart_web_toolkit_i18n/Direction"},"kind":"method","name":"estimateDirection","id":"estimateDirection2()","comment":"\nEstimates the directionality of a string based on relative word counts.\nIf the number of RTL words is above a certain percentage of the total\nnumber of strongly directional words, returns RTL.\nOtherwise, if any words are strongly or weakly LTR, returns LTR.\nOtherwise, returns DEFAULT, which is used to mean \"neutral\".\nNumbers are counted as weakly LTR.\n@param str the string to check\n@param isHtml whether {@code str} is HTML / HTML-escaped. Use this to\n       ignore HTML tags and escapes that would otherwise be mistaken for\n       LTR text.\n@return the string's directionality\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"str","id":"str"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"kind":"param","name":"isHtml","id":"isHtml"}],"line":"241"},{"ref":{"name":"BidiUtils","refId":"dart_web_toolkit_i18n/BidiUtils"},"isStatic":true,"isFinal":true,"kind":"variable","name":"_INSTANCE","id":"_INSTANCE","comment":"\nAn instance of BidiUtils, to be returned by {@link #get()}.\n","isPrivate":true,"line":"14"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"variable","name":"LTR_CHARS","id":"LTR_CHARS","comment":"\nA practical pattern to identify strong LTR characters. This pattern is not\ncompletely correct according to the Unicode standard. It is simplified\nfor performance and small code size.\n<p>\nThis is volatile to prevent the compiler from inlining this constant in\nvarious references below.\n","line":"32"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"variable","name":"RTL_CHARS","id":"RTL_CHARS","comment":"\nA practical pattern to identify strong RTL characters. This pattern is not\ncompletely correct according to the Unicode standard. It is simplified for\nperformance and small code size.\n<p>\nThis is volatile to prevent the compiler from inlining this constant in\nvarious references below.\n","line":"42"},{"ref":{"name":"RegExp","refId":"dart.core/RegExp"},"isStatic":true,"isFinal":true,"kind":"variable","name":"SKIP_HTML_RE","id":"SKIP_HTML_RE","comment":"\nSimplified regular expression for an HTML tag (opening or closing) or an\nHTML escape. We might want to skip over such expressions when estimating\nthe text directionality.\n","line":"49"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"isFinal":true,"kind":"variable","name":"DIR_PROPERTY_VALUE_RTL","id":"DIR_PROPERTY_VALUE_RTL","comment":"\nThe name of the element property which controls element directionality.\n\n\nThe value for the directionality property which will set the element directionality\nto right-to-left.\n","line":"60"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"isFinal":true,"kind":"variable","name":"DIR_PROPERTY_VALUE_LTR","id":"DIR_PROPERTY_VALUE_LTR","comment":"\nThe value for the directionality property which will set the element directionality\nto left-to-right.\n","line":"66"},{"ref":{"name":"RegExp","refId":"dart.core/RegExp"},"isStatic":true,"isFinal":true,"kind":"variable","name":"LAST_STRONG_IS_RTL_RE","id":"LAST_STRONG_IS_RTL_RE","comment":"\nRegular expressions to check if the last strongly-directional character in\na piece of text is RTL.\n","line":"72"},{"ref":{"name":"RegExp","refId":"dart.core/RegExp"},"isStatic":true,"isFinal":true,"kind":"variable","name":"LAST_STRONG_IS_LTR_RE","id":"LAST_STRONG_IS_LTR_RE","comment":"\nRegular expressions to check if the last strongly-directional character in\na piece of text is LTR.\n","line":"78"},{"ref":{"name":"RegExp","refId":"dart.core/RegExp"},"isStatic":true,"isFinal":true,"kind":"variable","name":"FIRST_STRONG_IS_RTL_RE","id":"FIRST_STRONG_IS_RTL_RE","comment":"\nRegular expression to check if the first strongly directional character in\na string is RTL.\n","line":"84"},{"ref":{"name":"RegExp","refId":"dart.core/RegExp"},"isStatic":true,"isFinal":true,"kind":"variable","name":"IS_REQUIRED_LTR_RE","id":"IS_REQUIRED_LTR_RE","comment":"\nRegular expression to check if a string looks like something that must\nalways be LTR even in RTL text, e.g. a URL. When estimating the\ndirectionality of text containing these, we treat these as weakly LTR, like\nnumbers.\n","line":"92"},{"ref":{"name":"RegExp","refId":"dart.core/RegExp"},"isStatic":true,"isFinal":true,"kind":"variable","name":"HAS_NUMERALS_RE","id":"HAS_NUMERALS_RE","comment":"\nRegular expression to check if a string contains any numerals. Used to\ndifferentiate between completely neutral strings and those containing\nnumbers, which are weakly LTR.\n","line":"99"},{"ref":{"name":"RegExp","refId":"dart.core/RegExp"},"isStatic":true,"isFinal":true,"kind":"variable","name":"HAS_ANY_LTR_RE","id":"HAS_ANY_LTR_RE","comment":"\nRegular expression to check if a string contains any LTR characters.\n","line":"104"},{"ref":{"name":"RegExp","refId":"dart.core/RegExp"},"isStatic":true,"isFinal":true,"kind":"variable","name":"WORD_SEPARATOR_RE","id":"WORD_SEPARATOR_RE","comment":"\nRegular expression to split a string into \"words\" for directionality\nestimation based on relative word counts.\n","line":"122"},{"ref":{"name":"double","refId":"dart.core/double"},"isStatic":true,"isFinal":true,"kind":"variable","name":"RTL_DETECTION_THRESHOLD","id":"RTL_DETECTION_THRESHOLD","comment":"\nThis constant defines the threshold of RTL directionality.\n","line":"127"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/bidi_utils.dart","line":"9"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"LocaleInfo","id":"LocaleInfo","children":[{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"isStatic":true,"kind":"method","name":"getAvailableLocaleNames","id":"getAvailableLocaleNames0()","comment":"\nReturns an array of available locale names.\n","line":"18"},{"returnType":{"name":"LocaleInfo","refId":"dart_web_toolkit_i18n/LocaleInfo"},"isStatic":true,"kind":"method","name":"getCurrentLocale","id":"getCurrentLocale0()","comment":"\nReturns a LocaleInfo instance for the current locale.\n","line":"36"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"isStatic":true,"kind":"method","name":"hasAnyRTL","id":"hasAnyRTL0()","comment":"\nReturns true if any locale supported by this build of the app is RTL.\n","line":"49"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"isRTL","id":"isRTL0()","comment":"\nReturns true if this locale is right-to-left instead of left-to-right.\n","line":"71"},{"returnType":{"name":"DateTimeFormatInfo","refId":"dart_web_toolkit_i18n/DateTimeFormatInfo"},"kind":"method","name":"getDateTimeFormatInfo","id":"getDateTimeFormatInfo0()","comment":"\nReturns a DateTimeConstants instance for this locale.\n","line":"78"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"ensureDateTimeFormatInfo","id":"ensureDateTimeFormatInfo0()","line":"83"},{"returnType":{"name":"NumberConstants","refId":"dart_web_toolkit_i18n/NumberConstants"},"kind":"method","name":"getNumberConstants","id":"getNumberConstants0()","comment":"\nReturns a NumberConstants instance for this locale.\n","line":"92"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"ensureNumberConstants","id":"ensureNumberConstants0()","line":"97"},{"ref":{"name":"LocaleInfo","refId":"dart_web_toolkit_i18n/LocaleInfo"},"isStatic":true,"kind":"variable","name":"instance","id":"instance","comment":"\nCurrently we only support getting the currently running locale, so this\nis a static.  In the future, we would need a hash map from locale names\nto LocaleInfo instances.\n","line":"13"},{"ref":{"name":"LocaleInfoImpl","refId":"dart_web_toolkit_i18n/LocaleInfoImpl"},"kind":"variable","name":"infoImpl","id":"infoImpl","line":"53"},{"ref":{"name":"DateTimeFormatInfo","refId":"dart_web_toolkit_i18n/DateTimeFormatInfo"},"kind":"variable","name":"dateTimeFormatInfo","id":"dateTimeFormatInfo","line":"56"},{"ref":{"name":"NumberConstants","refId":"dart_web_toolkit_i18n/NumberConstants"},"kind":"variable","name":"numberConstants","id":"numberConstants","line":"58"},{"kind":"constructor","name":"","id":"1()","comment":"\nCreate a LocaleInfo instance, passing in the implementation classes.\n\n@param impl LocaleInfoImpl instance to use\n@param cldr CldrImpl instance to use\n","children":[{"ref":{"name":"LocaleInfoImpl","refId":"dart_web_toolkit_i18n/LocaleInfoImpl"},"defaultValue":"null","isOptional":true,"initializedField":{"name":"infoImpl","refId":"dart_web_toolkit_i18n/LocaleInfo/infoImpl"},"kind":"param","name":"infoImpl","id":"infoImpl"}],"line":"66"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/i18n/locale_info.dart","line":"6"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/i18n.dart","line":"7"}
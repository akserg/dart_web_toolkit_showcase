{"dependencies":[{"kind":"library","name":"dart:core","id":"dart.core","comment":"\n\nBuilt-in types, collections,\nand other core functionality for every Dart program.\n\nThis library is automatically imported.\n\nSome classes in this library,\nsuch as [String] and [num],\nsupport Dart's built-in data types.\nOther classes, such as [List] and [Map], provide data structures\nfor managing collections of objects.\nAnd still other classes represent commonly used types of data\nsuch as URIs, dates and times, and errors.\n\n## Numbers and booleans\n\n[int] and [double] provide support for Dart's built-in numerical data types:\nintegers and double-precision floating point numbers, respectively.\nAn object of type [bool] is either true or false.\nVariables of these types can be constructed from literals:\n\n    int meaningOfLife = 42;\n    double valueOfPi  = 3.141592;\n    bool visible      = true;\n\n## Strings and regular expressions\n\nA [String] is immutable and represents a sequence of characters.\n\n    String shakespeareQuote = \"All the world's a stage, ...\";\n\n[StringBuffer] provides a way to construct strings efficiently.\n\n    StringBuffer moreShakespeare = new StringBuffer();\n    moreShakespeare.write('And all the men and women ');\n    moreShakespeare.write('merely players; ...');\n\nThe String and StringBuffer classes implement string concatenation,\ninterpolation, and other string manipulation features.\n\n    String philosophy = 'Live on ';\n    String get palindrome => philosophy + philosophy.split('').reversed.join();\n\n[RegExp] implements Dart regular expressions,\nwhich provide a grammar for matching patterns within text.\nFor example, here's a regular expression that matches\na string of one or more digits:\n\n    var numbers = new RegExp(r'\\d+');\n\nDart regular expressions have the same syntax and semantics as\nJavaScript regular expressions. See\n<http://ecma-international.org/ecma-262/5.1/#sec-15.10>\nfor the specification of JavaScript regular expressions.\n\n## Collections\n\nThe dart:core library provides basic collections,\nsuch as [List], [Map], and [Set].\n\nA List is an ordered collection of objects, with a length.\nLists are sometimes called arrays.\nUse a List when you need to access objects by index.\n\n    List superheroes = [ 'Batman', 'Superman', 'Harry Potter' ];\n\nA Set is an unordered collection of unique objects.\nYou cannot get an item by index (position).\nAdding a duplicate item has no effect.\n\n    Set villians = new Set();\n    villians.add('Joker');\n    villians.addAll( ['Lex Luther', 'Voldemort'] );\n\nA Map is an unordered collection of key-value pairs.\nMaps are sometimes called associative arrays because\nmaps associate a key to some value for easy retrieval.\nKeys are unique.\nUse a Map when you need to access objects\nby a unique identifier.\n\n    Map sidekicks = { 'Batman': 'Robin',\n                      'Superman': 'Lois Lane',\n                      'Harry Potter': 'Ron and Hermione' };\n\nIn addition to these classes,\ndart:core contains [Iterable],\nan interface that defines functionality\ncommon in collections of objects.\nExamples include the ability\nto run a function on each element in the collection,\nto apply a test to each element, \nto retrieve an object, and to determine length.\n\nIterable is implemented by List and Set,\nand used by Map for its keys and values.\n\nFor other kinds of collections, check out the\n[dart:collection](#dart-collection) library.\n\n## Date and time\n\nUse [DateTime] to represent a point in time\nand [Duration] to represent a span of time.\n\nYou can create DateTime objects with constructors\nor by parsing a correctly formatted string.\n\n    DateTime now = new DateTime.now();\n    DateTime berlinWallFell = new DateTime(1989, 11, 9);\n    DateTime moonLanding = DateTime.parse(\"1969-07-20\");\n\nCreate a Duration object specifying the individual time units.\n\n    Duration timeRemaining = new Duration(hours:56, minutes:14);\n\nIn addition to DateTime and Duration,\ndart:core contains the [Stopwatch] class for measuring elapsed time.\n    \n## Uri\n\nA [Uri] object represents a uniform resource identifier,\nwhich identifies a resource on the web.\n\n    Uri dartlang = Uri.parse('http://dartlang.org/');\n    \n## Errors\n\nThe [Error] class represents the occurrence of an error\nduring runtime.\nSubclasses of this class represent specific kinds of errors.\n\n## Other documentation\n\nFor more information about how to use the built-in types, refer to\n[Built-in Types](http://www.dartlang.org/docs/dart-up-and-running/contents/ch02.html#built-in-types)\nin Chapter 2 of\n[Dart: Up and Running](http://www.dartlang.org/docs/dart-up-and-running/).\n\nAlso, see\n[dart:core - Numbers, Collections, Strings, and More](http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-dartcore---strings-collections-and-more)\nfor more coverage of classes in this package.\n\nThe \n[Dart Language Specification](https://www.dartlang.org/docs/spec/)\nprovides technical details.\n","children":[{"kind":"class","name":"Object","id":"Object","comment":"\nEverything in Dart is an [Object].\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"==","id":"==1()","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nOverride this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:\n\n * Total: It must return a boolean for all arguments. It should never throw\n   or return `null`.\n\n * Reflexive: For all objects `o`, `o == o` must be true.\n\n * Symmetric: For all objects `o1` and `o2`, `o1 == o2` and `o2 == o1` must\n   either both be true, or both be false.\n\n * Transitive: For all objects `o1`, `o2`, and `o3`, if `o1 == o2` and\n   `o2 == o3` are true, then `o1 == o3` must be true.\n\nThe method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","children":[{"kind":"param","name":"other","id":"other"}],"line":"48"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","comment":"\nReturns a string representation of this object.\n","line":"67"},{"kind":"method","name":"noSuchMethod","id":"noSuchMethod1()","comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","children":[{"ref":{"name":"Invocation","refId":"dart.core/Invocation"},"kind":"param","name":"invocation","id":"invocation"}],"line":"79"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"hashCode","id":"hashCode","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","line":"62"},{"ref":{"name":"Type","refId":"dart.core/Type"},"kind":"property","name":"runtimeType","id":"runtimeType","comment":"\nA representation of the runtime type of the object.\n","line":"84"},{"kind":"constructor","name":"","id":"0()","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","line":"18"}],"uri":"dart-sdk/lib/core/object.dart","line":"10"}],"uri":"dart-sdk/lib/core/core.dart","line":"153"},{"kind":"library","id":"dart_web_toolkit_util","comment":"\nDart Web Toolkit Util library.\n","children":[{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Enum","id":"Enum","comment":"\nEmulation of Java Enum class.\n\nExample:\n\nclass Meter<int> extends Enum<int> {\n\n const Meter(int val) : super (val);\n\n static const Meter HIGH = const Meter(100);\n static const Meter MIDDLE = const Meter(50);\n static const Meter LOW = const Meter(10);\n}\n\nand usage:\n\nassert (Meter.HIGH, 100);\nassert (Meter.HIGH is Meter);\n","children":[{"ref":{"name":"T","refId":"dart_web_toolkit_util/Enum/T"},"kind":"property","name":"value","id":"value","line":"31"},{"ref":{"name":"T","refId":"dart_web_toolkit_util/Enum/T"},"isFinal":true,"kind":"variable","name":"_value","id":"_value","isPrivate":true,"line":"27"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"T","refId":"dart_web_toolkit_util/Enum/T"},"initializedField":{"name":"_value","refId":"dart_web_toolkit_util/Enum/_value"},"kind":"param","name":"_value","id":"_value","isPrivate":true}],"line":"29"},{"kind":"typeparam","name":"T","id":"T"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/util/enum.dart","line":"25"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/util.dart","line":"7"}],"kind":"library","id":"dart_web_toolkit_role","comment":"\nDart Web Toolkit Role library.\n","children":[{"superclass":{"name":"Role","refId":"dart_web_toolkit_role/Role"},"interfaces":[{"name":"ButtonRole","refId":"dart_web_toolkit_role/ButtonRole"}],"kind":"class","name":"ButtonRoleImpl","id":"ButtonRoleImpl","comment":"\n<p>Implements {@link ButtonRole}.</p>\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setAriaPressedState","id":"setAriaPressedState2()","children":[{"ref":{"name":"Element","refId":"dart.dom.html/Element"},"kind":"param","name":"element","id":"element"},{"ref":{"name":"PressedValue","refId":"dart_web_toolkit_role/PressedValue"},"kind":"param","name":"value","id":"value"}],"line":"43"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"getAriaPressedState","id":"getAriaPressedState1()","children":[{"ref":{"name":"Element","refId":"dart.dom.html/Element"},"kind":"param","name":"element","id":"element"}],"line":"47"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"removeAriaPressedState","id":"removeAriaPressedState1()","children":[{"ref":{"name":"Element","refId":"dart.dom.html/Element"},"kind":"param","name":"element","id":"element"}],"line":"51"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"roleName","id":"roleName"}],"line":"37"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/role/button_role.dart","line":"35"},{"superclass":{"name":"CommandRole","refId":"dart_web_toolkit_role/CommandRole"},"isAbstract":true,"kind":"class","name":"ButtonRole","id":"ButtonRole","comment":"\nButtonRole interface.\nThe interface defines methods for setting, getting, removing states and properties.\n<p>Allows ARIA Accessibility attributes to be added to widgets so that they can be identified by\nassistive technology.</p>\n\n<p>ARIA roles define widgets and page structure that can be interpreted by a reader\napplication/device. There is a set of abstract roles which are used as\nbuilding blocks of the roles hierarchy structural and define the common properties and states\nfor the concrete roles. Abstract roles cannot be set to HTML elements.</p>\n\n<p>There are states and properties that are defined for a role. As roles are organized in a\nhierarchy, a role has inherited and own properties and states which can be set to the\nelement.</p>\n\n<p>For more details about ARIA roles check <a href=\"http://www.w3.org/TR/wai-aria/roles\">\nThe Roles Model </a>.</p>\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setAriaPressedState","id":"setAriaPressedState2()","children":[{"ref":{"name":"Element","refId":"dart.dom.html/Element"},"kind":"param","name":"element","id":"element"},{"ref":{"name":"PressedValue","refId":"dart_web_toolkit_role/PressedValue"},"kind":"param","name":"value","id":"value"}],"line":"25"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"getAriaPressedState","id":"getAriaPressedState1()","children":[{"ref":{"name":"Element","refId":"dart.dom.html/Element"},"kind":"param","name":"element","id":"element"}],"line":"27"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"removeAriaPressedState","id":"removeAriaPressedState1()","children":[{"ref":{"name":"Element","refId":"dart.dom.html/Element"},"kind":"param","name":"element","id":"element"}],"line":"29"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/role/button_role.dart","line":"24"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"State","id":"State","comment":"\n<p>Class that contains constants for ARIA states. States combined with ARIA roles supply\ninformation about the changes in the web page that can be used for alerts, notification,\nnavigation assistance. The state is changed as a result of an user interaction and developers\nshould consider changing the widget state when handling user actions.</p>\n\n<p>The following groups of states exist:\n<ol>\n<li>Widget states -- specific to common user interface elements found on GUI systems or\nin rich Internet applications which receive user input and process user actions</li>\n<li>Live Region states -- specific to live regions in rich Internet applications; may be applied\nto any element; indicate that content changes may occur without the element having focus, and\nprovides assistive technologies with information on how to process those content updates. </li>\n<li>Drag-and-drop states -- indicates information about draggable elements and their drop\ntargets</li>\n</ol>\n</p>\n","children":[{"ref":{"name":"Attribute","refId":"dart_web_toolkit_role/Attribute","arguments":[{"name":"PressedValue","refId":"dart_web_toolkit_role/PressedValue"}]},"isStatic":true,"isFinal":true,"kind":"variable","name":"PRESSED","id":"PRESSED","line":"26"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/role/state.dart","line":"24"},{"superclass":{"name":"Enum","refId":"dart_web_toolkit_util/Enum","arguments":[{"name":"int","refId":"dart_web_toolkit_role/PressedValue/int"}]},"interfaces":[{"name":"AriaAttributeType","refId":"dart_web_toolkit_role/AriaAttributeType"}],"kind":"class","name":"PressedValue","id":"PressedValue","comment":"\nState enum for 'aria-pressed' values.\n","children":[{"returnType":{"name":"PressedValue","refId":"dart_web_toolkit_role/PressedValue"},"isStatic":true,"kind":"method","name":"of","id":"of1()","comment":"\nGets the enum constant corresponding to {@code value} for the token type\nPressedValue.\n\n@param value Boolean value for which we want to get the corresponding enum constant.\n","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"value","id":"value"}],"line":"25"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"getAriaValue","id":"getAriaValue0()","line":"29"},{"ref":{"name":"PressedValue","refId":"dart_web_toolkit_role/PressedValue"},"isStatic":true,"kind":"variable","name":"TRUE","id":"TRUE","line":"12"},{"ref":{"name":"PressedValue","refId":"dart_web_toolkit_role/PressedValue"},"isStatic":true,"kind":"variable","name":"FALSE","id":"FALSE","line":"13"},{"ref":{"name":"PressedValue","refId":"dart_web_toolkit_role/PressedValue"},"isStatic":true,"kind":"variable","name":"MIXED","id":"MIXED","line":"14"},{"ref":{"name":"PressedValue","refId":"dart_web_toolkit_role/PressedValue"},"isStatic":true,"kind":"variable","name":"UNDEFINED","id":"UNDEFINED","line":"15"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"int","refId":"dart_web_toolkit_role/PressedValue/int"},"kind":"param","name":"type","id":"type"}],"line":"17"},{"kind":"typeparam","name":"int","id":"int"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/role/pressed_value.dart","line":"9"},{"superclass":{"name":"Attribute","refId":"dart_web_toolkit_role/Attribute","arguments":[{"name":"T","refId":"dart_web_toolkit_role/AriaValueAttribute/T"}]},"kind":"class","name":"AriaValueAttribute","id":"AriaValueAttribute","comment":"\n ARIA specific type attribute.\n","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"getSingleValue","id":"getSingleValue1()","children":[{"ref":{"name":"T","refId":"dart_web_toolkit_role/AriaValueAttribute/T"},"kind":"param","name":"value","id":"value"}],"line":"13"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"name","id":"name"},{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"null","isOptional":true,"kind":"param","name":"defaultValue","id":"defaultValue"}],"line":"11"},{"kind":"typeparam","name":"T","id":"T"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/role/aria_value_attribute.dart","line":"9"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"AriaAttributeType","id":"AriaAttributeType","comment":"\nInterface that is and needs to be implemented by ALL non primitive attribute types\n","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"getAriaValue","id":"getAriaValue0()","line":"10"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/role/aria_attribute_type.dart","line":"9"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Attribute","id":"Attribute","comment":"\n<p>Class representing ARIA state/property attribute. Contains methods for setting, getting,\nremoving ARIA attributes for an HTML {@link com.google.gwt.dom.client.Element}.</p>\n\n<p>For more details about ARIA states and properties check the W3C ARIA documentation\n<a href=\"http://www.w3.org/TR/wai-aria/states_and_properties\"> Supported States and Properties\n</a>.</p>\n\n@param <T> The attribute value type\n","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"get","id":"get1()","comment":"\nGets the HTML attribute value for the attribute with name {@code name} for element\n{@code element}\n\n@param element HTM element\n@return The attribute value for {@code element}\n","children":[{"ref":{"name":"Element","refId":"dart.dom.html/Element"},"kind":"param","name":"element","id":"element"}],"line":"39"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"getName","id":"getName0()","comment":"\nGets the property/state name\n\n@return The attribute name\n","line":"49"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"remove","id":"remove1()","comment":"\nRemoves the state/property attribute for element {@code element}.\n\n@param element HTM element\n","children":[{"ref":{"name":"Element","refId":"dart.dom.html/Element"},"kind":"param","name":"element","id":"element"}],"line":"58"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"set","id":"set2()","comment":"\nSets the state/property {@code value} for the HTML element {@code element}.\n\n@param element HTML element\n@param values Attribute value\n","children":[{"ref":{"name":"Element","refId":"dart.dom.html/Element"},"kind":"param","name":"element","id":"element"},{"ref":{"name":"T","refId":"dart_web_toolkit_role/Attribute/T"},"kind":"param","name":"values","id":"values"}],"line":"69"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setDefault","id":"setDefault1()","comment":"\nSets the state/property value to the defaultValue if not null. If a list of default values is\nset, every default value is converted to string and the string values are concatenated in a\nstring token list. There is an assertion checking whether the default is null. Note that the\nasserts are enabled during development and testing but they will be stripped in production\nmode.\n\n@param element HTML element\n","children":[{"ref":{"name":"Element","refId":"dart.dom.html/Element"},"kind":"param","name":"element","id":"element"}],"line":"84"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"getSingleValue","id":"getSingleValue1()","children":[{"ref":{"name":"T","refId":"dart_web_toolkit_role/Attribute/T"},"kind":"param","name":"value","id":"value"}],"line":"90"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"_getAriaValue","id":"_getAriaValue1()","children":[{"ref":{"name":"T","refId":"dart_web_toolkit_role/Attribute/T"},"kind":"param","name":"value","id":"value"}],"isPrivate":true,"line":"92"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"name","id":"name","line":"18"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"defaultValue","id":"defaultValue","line":"19"},{"kind":"constructor","name":"","id":"2()","comment":"\nConstructs a state/property ARIA attribute with name {@code name} and {@code defaultValue}.\n\n@param name State/Property name\n@param defaultValue Default values\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"name","refId":"dart_web_toolkit_role/Attribute/name"},"kind":"param","name":"name","id":"name"},{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"null","isOptional":true,"kind":"param","name":"defaultValue","id":"defaultValue"}],"line":"27"},{"kind":"typeparam","name":"T","id":"T"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/role/attribute.dart","line":"16"},{"superclass":{"name":"WidgetRole","refId":"dart_web_toolkit_role/WidgetRole"},"isAbstract":true,"kind":"class","name":"CommandRole","id":"CommandRole","comment":"\nCommandRole interface.\nThe interface defines methods for setting, getting, removing states and properties.\n<p>Allows ARIA Accessibility attributes to be added to widgets so that they can be identified by\nassistive technology.</p>\n\n<p>ARIA roles define widgets and page structure that can be interpreted by a reader\napplication/device. There is a set of abstract roles which are used as\nbuilding blocks of the roles hierarchy structural and define the common properties and states\nfor the concrete roles. Abstract roles cannot be set to HTML elements.</p>\n\n<p>There are states and properties that are defined for a role. As roles are organized in a\nhierarchy, a role has inherited and own properties and states which can be set to the\nelement.</p>\n\n<p>For more details about ARIA roles check <a href=\"http://www.w3.org/TR/wai-aria/roles\">\nThe Roles Model </a>.</p>\n","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/role/command_role.dart","line":"24"},{"superclass":{"name":"RoletypeRole","refId":"dart_web_toolkit_role/RoletypeRole"},"isAbstract":true,"kind":"class","name":"WidgetRole","id":"WidgetRole","comment":"\nWidgetRole interface.\nThe interface defines methods for setting, getting, removing states and properties.\n<p>Allows ARIA Accessibility attributes to be added to widgets so that they can be identified by\nassistive technology.</p>\n\n<p>ARIA roles define widgets and page structure that can be interpreted by a reader\napplication/device. There is a set of abstract roles which are used as\nbuilding blocks of the roles hierarchy structural and define the common properties and states\nfor the concrete roles. Abstract roles cannot be set to HTML elements.</p>\n\n<p>There are states and properties that are defined for a role. As roles are organized in a\nhierarchy, a role has inherited and own properties and states which can be set to the\nelement.</p>\n\n<p>For more details about ARIA roles check <a href=\"http://www.w3.org/TR/wai-aria/roles\">\nThe Roles Model </a>.</p>\n","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/role/widget_role.dart","line":"24"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"RoletypeRole","id":"RoletypeRole","comment":"\nRoletypeRole interface.\nThe interface defines methods for setting, getting, removing states and properties.\n<p>Allows ARIA Accessibility attributes to be added to widgets so that they can be identified by\nassistive technology.</p>\n\n<p>ARIA roles define widgets and page structure that can be interpreted by a reader\napplication/device. There is a set of abstract roles which are used as\nbuilding blocks of the roles hierarchy structural and define the common properties and states\nfor the concrete roles. Abstract roles cannot be set to HTML elements.</p>\n\n<p>There are states and properties that are defined for a role. As roles are organized in a\nhierarchy, a role has inherited and own properties and states which can be set to the\nelement.</p>\n\n<p>For more details about ARIA roles check <a href=\"http://www.w3.org/TR/wai-aria/roles\">\nThe Roles Model </a>.</p>\n","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"get","id":"get1()","comment":"\nGets the role for the element {@code element}. If none is set, \"\" is returned.\n\n@param element HTML element\n@return The role attribute value\n","children":[{"ref":{"name":"Element","refId":"dart.dom.html/Element"},"kind":"param","name":"element","id":"element"}],"line":"32"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"getName","id":"getName0()","comment":"\nGets the role name\n\n@return The role name\n","line":"39"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"remove","id":"remove1()","comment":"\nRemoves the role for element {@code element}\n\n@param element HTML element\n","children":[{"ref":{"name":"Element","refId":"dart.dom.html/Element"},"kind":"param","name":"element","id":"element"}],"line":"46"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"set","id":"set1()","comment":"\nSets the role to element {@code element}\n\n@param element HTML element\n","children":[{"ref":{"name":"Element","refId":"dart.dom.html/Element"},"kind":"param","name":"element","id":"element"}],"line":"53"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/role/roletype_role.dart","line":"24"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"Roles","id":"Roles","comment":"\n<p>Class containing the ARIA roles as defined by <a href=\"http://www.w3.org/TR/wai-aria/\">\nW3C ARIA specification</a>. A WAI-ARIA role is set on an element using a <i>role</i> attribute.\nAn element role is constant and is not supposed to change.</p>\n\n<p>This is the central class in this ARIA API because it contains all defined roles which\ncan be set to HTML elements. Each role in this class is a {@link Role} instance.\nThe {@link Role} class contains methods for getting and setting states and properties.</p>\n\n<p>Lets say we have an image button widget and we want to make it visible to a reader as a\nbutton, accompanied with some help text for the button usage. For the purpose we need to add a\n'button' role to the image and set label that the reader can interpret. We set the 'button' role\nfor an image (img) with the call: Roles.getButtonRole.set(img.getElement()) and set the\n'aria-label' property by calling: Roles.getButtonRole().setAriaLabelProperty(img.getElement,\n\"test\")</p>\n\n<p>ARIA states are used similarly to ARIA properties by using the\nRoles.getButtonRole().setAriaEnabledState(img.getElement(), isEnabled) method.\nAlthough States and Properties are structurally the same, they are\nseparated in 2 classes in this API because they are semantically different and have different\nusage. There exist the concept of extra properties and for now the only\nexample is tabindex. If we want to set the tabindex to 0 for the button,\nwe need to call Roles.getButtonRole().setTabindexExtraAttribute(img.getElement(), 0).</p>\n\n<p>There are 4 groups of roles:\n<ol>\n<li>Abstract roles -- used as base types for applied roles. They are not used by Web Authors\nand would not be exposed as role definitions for incorporation into a Web page. Base classes are\nreferenced within the taxonomy and are used to build a picture of the role taxonomy class\nhierarchy within the taxonomy.</li>\n<li>Widget roles -- act as standalone user interface widgets or as part of larger,\n composite widgets</li>\n<li>Widget container roles -- act as composite user interface widgets. These roles typically act\n as containers that manage other, contained widgets</li>\n<li>Document structure roles -- describe structures that organize content in a page. Document\nstructures are not usually interactive</li>\n<li>Landmark Roles -- regions of the page intended as navigational landmarks</li>\n</ol>\n</p>\n\n<p>For more details about ARIA roles check <a href=\"http://www.w3.org/TR/wai-aria/roles\"></p>\n","children":[{"ref":{"name":"ButtonRole","refId":"dart_web_toolkit_role/ButtonRole"},"isStatic":true,"isFinal":true,"kind":"variable","name":"BUTTON","id":"BUTTON","line":"49"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/role/roles.dart","line":"48"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"Role","id":"Role","comment":"\n<p>Allows ARIA Accessibility attributes to be added to widgets so that they can be identified by\nassistive technology.</p>\n\n<p>ARIA roles define widgets and page structure that can be interpreted by a reader\napplication/device. There is a set of abstract roles which are used as\nbuilding blocks of the roles hierarchy structural and define the common properties and states\nfor the concrete roles. Abstract roles cannot be set to HTML elements.</p>\n\n<p>This class defines some of the supported operations for a role -- set/get/remove\nrole to/from a DOM element.</p>\n\n<p>For more details about ARIA roles check <a href=\"http://www.w3.org/TR/wai-aria/roles\">\nThe Roles Model </a>.</p>\n","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"get","id":"get1()","comment":"\nGets the role for the element {@code element}. If none is set, \"\" is returned.\n\n@param element HTML element\n@return The role attribute value\n","children":[{"ref":{"name":"Element","refId":"dart.dom.html/Element"},"kind":"param","name":"element","id":"element"}],"line":"37"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"getName","id":"getName0()","comment":"\nGets the role name\n\n@return The role name\n","line":"47"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"remove","id":"remove1()","comment":"\nRemoves the role for element {@code element}\n\n@param element HTML element\n","children":[{"ref":{"name":"Element","refId":"dart.dom.html/Element"},"kind":"param","name":"element","id":"element"}],"line":"56"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"set","id":"set1()","comment":"\nSets the role to element {@code element}\n\n@param element HTML element\n","children":[{"ref":{"name":"Element","refId":"dart.dom.html/Element"},"kind":"param","name":"element","id":"element"}],"line":"66"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"isFinal":true,"kind":"variable","name":"ATTR_NAME_ROLE","id":"ATTR_NAME_ROLE","line":"23"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"_roleName","id":"_roleName","isPrivate":true,"line":"24"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"roleName","id":"roleName"}],"line":"26"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/role/role.dart","line":"21"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/role.dart","line":"7"}
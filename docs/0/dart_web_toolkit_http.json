{"dependencies":[{"kind":"library","name":"dart:core","id":"dart.core","comment":"\n\nBuilt-in types, collections,\nand other core functionality for every Dart program.\n\nThis library is automatically imported.\n\nSome classes in this library,\nsuch as [String] and [num],\nsupport Dart's built-in data types.\nOther classes, such as [List] and [Map], provide data structures\nfor managing collections of objects.\nAnd still other classes represent commonly used types of data\nsuch as URIs, dates and times, and errors.\n\n## Numbers and booleans\n\n[int] and [double] provide support for Dart's built-in numerical data types:\nintegers and double-precision floating point numbers, respectively.\nAn object of type [bool] is either true or false.\nVariables of these types can be constructed from literals:\n\n    int meaningOfLife = 42;\n    double valueOfPi  = 3.141592;\n    bool visible      = true;\n\n## Strings and regular expressions\n\nA [String] is immutable and represents a sequence of characters.\n\n    String shakespeareQuote = \"All the world's a stage, ...\";\n\n[StringBuffer] provides a way to construct strings efficiently.\n\n    StringBuffer moreShakespeare = new StringBuffer();\n    moreShakespeare.write('And all the men and women ');\n    moreShakespeare.write('merely players; ...');\n\nThe String and StringBuffer classes implement string concatenation,\ninterpolation, and other string manipulation features.\n\n    String philosophy = 'Live on ';\n    String get palindrome => philosophy + philosophy.split('').reversed.join();\n\n[RegExp] implements Dart regular expressions,\nwhich provide a grammar for matching patterns within text.\nFor example, here's a regular expression that matches\na string of one or more digits:\n\n    var numbers = new RegExp(r'\\d+');\n\nDart regular expressions have the same syntax and semantics as\nJavaScript regular expressions. See\n<http://ecma-international.org/ecma-262/5.1/#sec-15.10>\nfor the specification of JavaScript regular expressions.\n\n## Collections\n\nThe dart:core library provides basic collections,\nsuch as [List], [Map], and [Set].\n\nA List is an ordered collection of objects, with a length.\nLists are sometimes called arrays.\nUse a List when you need to access objects by index.\n\n    List superheroes = [ 'Batman', 'Superman', 'Harry Potter' ];\n\nA Set is an unordered collection of unique objects.\nYou cannot get an item by index (position).\nAdding a duplicate item has no effect.\n\n    Set villians = new Set();\n    villians.add('Joker');\n    villians.addAll( ['Lex Luther', 'Voldemort'] );\n\nA Map is an unordered collection of key-value pairs.\nMaps are sometimes called associative arrays because\nmaps associate a key to some value for easy retrieval.\nKeys are unique.\nUse a Map when you need to access objects\nby a unique identifier.\n\n    Map sidekicks = { 'Batman': 'Robin',\n                      'Superman': 'Lois Lane',\n                      'Harry Potter': 'Ron and Hermione' };\n\nIn addition to these classes,\ndart:core contains [Iterable],\nan interface that defines functionality\ncommon in collections of objects.\nExamples include the ability\nto run a function on each element in the collection,\nto apply a test to each element, \nto retrieve an object, and to determine length.\n\nIterable is implemented by List and Set,\nand used by Map for its keys and values.\n\nFor other kinds of collections, check out the\n[dart:collection](#dart-collection) library.\n\n## Date and time\n\nUse [DateTime] to represent a point in time\nand [Duration] to represent a span of time.\n\nYou can create DateTime objects with constructors\nor by parsing a correctly formatted string.\n\n    DateTime now = new DateTime.now();\n    DateTime berlinWallFell = new DateTime(1989, 11, 9);\n    DateTime moonLanding = DateTime.parse(\"1969-07-20\");\n\nCreate a Duration object specifying the individual time units.\n\n    Duration timeRemaining = new Duration(hours:56, minutes:14);\n\nIn addition to DateTime and Duration,\ndart:core contains the [Stopwatch] class for measuring elapsed time.\n    \n## Uri\n\nA [Uri] object represents a uniform resource identifier,\nwhich identifies a resource on the web.\n\n    Uri dartlang = Uri.parse('http://dartlang.org/');\n    \n## Errors\n\nThe [Error] class represents the occurrence of an error\nduring runtime.\nSubclasses of this class represent specific kinds of errors.\n\n## Other documentation\n\nFor more information about how to use the built-in types, refer to\n[Built-in Types](http://www.dartlang.org/docs/dart-up-and-running/contents/ch02.html#built-in-types)\nin Chapter 2 of\n[Dart: Up and Running](http://www.dartlang.org/docs/dart-up-and-running/).\n\nAlso, see\n[dart:core - Numbers, Collections, Strings, and More](http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-dartcore---strings-collections-and-more)\nfor more coverage of classes in this package.\n\nThe \n[Dart Language Specification](http://www.dartlang.org/docs/spec/)\nprovides technical details.\n","children":[{"kind":"class","name":"Object","id":"Object","comment":"\nThe base class for all Dart objects.\n\nBecause Object is the root of the Dart class hierarchy,\nevery other Dart class is a subclass of Object.\n\nWhen you define a class, you should override [toString]\nto return a string describing an instance of that class.\nYou might also need to define [hashCode] and [==], as described in the\n[Implementing map keys]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-implementing-map-keys)\nsection of the [library tour]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html).\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"==","id":"==1()","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nOverride this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:\n\n * Total: It must return a boolean for all arguments. It should never throw\n   or return `null`.\n\n * Reflexive: For all objects `o`, `o == o` must be true.\n\n * Symmetric: For all objects `o1` and `o2`, `o1 == o2` and `o2 == o1` must\n   either both be true, or both be false.\n\n * Transitive: For all objects `o1`, `o2`, and `o3`, if `o1 == o2` and\n   `o2 == o3` are true, then `o1 == o3` must be true.\n\nThe method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","children":[{"kind":"param","name":"other","id":"other"}],"line":"59"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","comment":"\nReturns a string representation of this object.\n","line":"78"},{"kind":"method","name":"noSuchMethod","id":"noSuchMethod1()","comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","children":[{"ref":{"name":"Invocation","refId":"dart.core/Invocation"},"kind":"param","name":"invocation","id":"invocation"}],"line":"90"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"hashCode","id":"hashCode","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","line":"73"},{"ref":{"name":"Type","refId":"dart.core/Type"},"kind":"property","name":"runtimeType","id":"runtimeType","comment":"\nA representation of the runtime type of the object.\n","line":"95"},{"kind":"constructor","name":"","id":"0()","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","line":"29"}],"uri":"dart-sdk/lib/core/object.dart","line":"21"}],"uri":"dart-sdk/lib/core/core.dart","line":"153"}],"kind":"library","id":"dart_web_toolkit_http","children":[{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Header","id":"Header","comment":"\nClass for describing an HTTP header.\n\n<h3>Required Module</h3>\nModules that use this class should inherit\n<code>com.google.gwt.http.HTTP</code>.\n\n{@gwt.include com/google/gwt/examples/http/InheritsExample.gwt.xml}\n","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"getName","id":"getName0()","comment":"\nReturns the name of the HTTP header.\n\n@return name of the HTTP header \n","line":"21"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"getValue","id":"getValue0()","comment":"\nReturns the value of the HTTP header.\n\n@return value of the HTTP header \n","line":"28"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/http/header.dart","line":"15"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"StringValidator","id":"StringValidator","comment":"\nUtility class for validating strings.\n\nTODO(mmendez): Is there a better place for this?\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"isStatic":true,"kind":"method","name":"isEmptyOrNullString","id":"isEmptyOrNullString1()","comment":"\nReturns true if the string is empty or null.\n\n@param string to test if null or empty\n\n@return true if the string is empty or null\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"string","id":"string"}],"line":"19"},{"returnType":{"name":"void","refId":"void"},"isStatic":true,"kind":"method","name":"throwIfEmptyOrNull","id":"throwIfEmptyOrNull2()","comment":"\nThrows if <code>value</code> is <code>null</code> or empty. This method\nignores leading and trailing whitespace.\n\n@param name the name of the value, used in error messages\n@param value the string value that needs to be validated\n\n@throws IllegalArgumentException if the string is empty, or all whitespace\n@throws NullPointerException if the string is <code>null</code>\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"name","id":"name"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"value","id":"value"}],"line":"33"},{"returnType":{"name":"void","refId":"void"},"isStatic":true,"kind":"method","name":"throwIfNull","id":"throwIfNull2()","comment":"\nThrows a {@link NullPointerException} if the value is <code>null</code>.\n\n@param name the name of the value, used in error messages\n@param value the value that needs to be validated\n\n@throws NullPointerException if the value is <code>null</code>\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"name","id":"name"},{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"value","id":"value"}],"line":"52"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/http/string_validator.dart","line":"11"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"Method","id":"Method","comment":"\nHTTP request method constants.\n","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"391"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"_name","id":"_name","isPrivate":true,"line":"387"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"_name","refId":"dart_web_toolkit_http/Method/_name"},"kind":"param","name":"_name","id":"_name","isPrivate":true}],"line":"389"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/http/request_builder.dart","line":"386"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"RequestBuilder","id":"RequestBuilder","comment":"\nBuilder for constructing {@link com.google.gwt.http.client.Request} objects.\n\n<h3>Required Module</h3> Modules that use this class should inherit\n<code>com.google.gwt.http.HTTP</code>.\n\n{@gwt.include\ncom/google/gwt/examples/http/InheritsExample.gwt.xml}\n\n","children":[{"returnType":{"name":"RequestCallback","refId":"dart_web_toolkit_http/RequestCallback"},"kind":"method","name":"getCallback","id":"getCallback0()","comment":"\nReturns the callback previously set by\n{@link #setCallback(RequestCallback)}, or <code>null</code> if no callback\nwas set.\n","line":"120"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"getHeader","id":"getHeader1()","comment":"\nReturns the value of a header previous set by\n{@link #setHeader(String, String)}, or <code>null</code> if no such header\nwas set.\n\n@param header the name of the header\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"header","id":"header"}],"line":"131"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"getHTTPMethod","id":"getHTTPMethod0()","comment":"\nReturns the HTTP method specified in the constructor.\n","line":"141"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"getPassword","id":"getPassword0()","comment":"\nReturns the password previously set by {@link #setPassword(String)}, or\n<code>null</code> if no password was set.\n","line":"149"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"getRequestData","id":"getRequestData0()","comment":"\nReturns the requestData previously set by {@link #setRequestData(String)},\nor <code>null</code> if no requestData was set.\n","line":"157"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"getTimeoutMillis","id":"getTimeoutMillis0()","comment":"\nReturns the timeoutMillis previously set by {@link #setTimeoutMillis(int)},\nor <code>0</code> if no timeoutMillis was set.\n","line":"165"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"getUrl","id":"getUrl0()","comment":"\nReturns the HTTP URL specified in the constructor.\n","line":"172"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"getUser","id":"getUser0()","comment":"\nReturns the user previously set by {@link #setUser(String)}, or\n<code>null</code> if no user was set.\n","line":"180"},{"returnType":{"name":"Request","refId":"dart_web_toolkit_http/Request"},"kind":"method","name":"send","id":"send0()","comment":"\nSends an HTTP request based on the current builder configuration. If no\nrequest headers have been set, the header \"Content-Type\" will be used with\na value of \"text/plain; charset=utf-8\". You must call\n{@link #setRequestData(String)} and {@link #setCallback(RequestCallback)}\nbefore calling this method.\n\n@return a {@link Request} object that can be used to track the request\n@throws RequestException if the call fails to initiate\n@throws NullPointerException if a request callback has not been set\n","line":"195"},{"returnType":{"name":"Request","refId":"dart_web_toolkit_http/Request"},"kind":"method","name":"sendRequest","id":"sendRequest2()","comment":"\nSends an HTTP request based on the current builder configuration with the\nspecified data and callback. If no request headers have been set, the\nheader \"Content-Type\" will be used with a value of \"text/plain;\ncharset=utf-8\". This method does not cache <code>requestData</code> or\n<code>callback</code>.\n\n@param requestData the data to send as part of the request\n@param callback the response handler to be notified when the request fails\n         or completes\n@return a {@link Request} object that can be used to track the request\n@throws NullPointerException if <code>callback</code> <code>null</code>\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"requestData","id":"requestData"},{"ref":{"name":"RequestCallback","refId":"dart_web_toolkit_http/RequestCallback"},"kind":"param","name":"callback","id":"callback"}],"line":"213"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setCallback","id":"setCallback1()","comment":"\nSets the response handler for this request. This method <b>must</b> be\ncalled before calling {@link #send()}.\n\n@param callback the response handler to be notified when the request fails\n         or completes\n\n@throws NullPointerException if <code>callback</code> is <code>null</code>\n","children":[{"ref":{"name":"RequestCallback","refId":"dart_web_toolkit_http/RequestCallback"},"kind":"param","name":"callback","id":"callback"}],"line":"227"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setHeader","id":"setHeader2()","comment":"\nSets a request header with the given name and value. If a header with the\nspecified name has already been set then the new value overwrites the\ncurrent value.\n\n@param header the name of the header\n@param value the value of the header\n\n@throws NullPointerException if header or value are null\n@throws IllegalArgumentException if header or value are the empty string\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"header","id":"header"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"value","id":"value"}],"line":"244"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setPassword","id":"setPassword1()","comment":"\nSets the password to use in the request URL. This is ignored if there is no\nuser specified.\n\n@param password password to use in the request URL\n\n@throws IllegalArgumentException if the password is empty\n@throws NullPointerException if the password is null\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"password","id":"password"}],"line":"264"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setRequestData","id":"setRequestData1()","comment":"\nSets the data to send as part of this request. This method <b>must</b> be\ncalled before calling {@link #send()}.\n\n@param requestData the data to send as part of the request\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"requestData","id":"requestData"}],"line":"276"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setTimeoutMillis","id":"setTimeoutMillis1()","comment":"\nSets the number of milliseconds to wait for a request to complete. Should\nthe request timeout, the\n{@link com.google.gwt.http.client.RequestCallback#onError(Request, Throwable)}\nmethod will be called on the callback instance given to the\n{@link com.google.gwt.http.client.RequestBuilder#sendRequest(String, RequestCallback)}\nmethod. The callback method will receive an instance of the\n{@link com.google.gwt.http.client.RequestTimeoutException} class as its\n{@link java.lang.Throwable} argument.\n\n@param timeoutMillis number of milliseconds to wait before canceling the\n         request, a value of zero disables timeouts\n\n@throws IllegalArgumentException if the timeout value is negative\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"timeoutMillis","id":"timeoutMillis"}],"line":"295"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setUser","id":"setUser1()","comment":"\nSets the user name that will be used in the request URL.\n\n@param user user name to use\n@throws IllegalArgumentException if the user is empty\n@throws NullPointerException if the user is null\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"user","id":"user"}],"line":"310"},{"returnType":{"name":"Request","refId":"dart_web_toolkit_http/Request"},"kind":"method","name":"_doSend","id":"_doSend2()","comment":"\nSends an HTTP request based on the current builder configuration. If no\nrequest headers have been set, the header \"Content-Type\" will be used with\na value of \"text/plain; charset=utf-8\".\n\n@return a {@link Request} object that can be used to track the request\n@throws RequestException if the call fails to initiate\n@throws NullPointerException if request data has not been set\n@throws NullPointerException if a request callback has not been set\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"requestData","id":"requestData"},{"ref":{"name":"RequestCallback","refId":"dart_web_toolkit_http/RequestCallback"},"kind":"param","name":"callback","id":"callback"}],"isPrivate":true,"line":"326"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_setHeaders","id":"_setHeaders1()","children":[{"ref":{"name":"HttpRequest","refId":"dart.dom.html/HttpRequest"},"kind":"param","name":"xmlHttpRequest","id":"xmlHttpRequest"}],"isPrivate":true,"line":"368"},{"ref":{"name":"Method","refId":"dart_web_toolkit_http/Method"},"isStatic":true,"isFinal":true,"kind":"variable","name":"DELETE","id":"DELETE","comment":"\nSpecifies that the HTTP DELETE method should be used.\n","line":"20"},{"ref":{"name":"Method","refId":"dart_web_toolkit_http/Method"},"isStatic":true,"isFinal":true,"kind":"variable","name":"GET","id":"GET","comment":"\nSpecifies that the HTTP GET method should be used.\n","line":"25"},{"ref":{"name":"Method","refId":"dart_web_toolkit_http/Method"},"isStatic":true,"isFinal":true,"kind":"variable","name":"HEAD","id":"HEAD","comment":"\nSpecifies that the HTTP HEAD method should be used.\n","line":"30"},{"ref":{"name":"Method","refId":"dart_web_toolkit_http/Method"},"isStatic":true,"isFinal":true,"kind":"variable","name":"POST","id":"POST","comment":"\nSpecifies that the HTTP POST method should be used.\n","line":"35"},{"ref":{"name":"Method","refId":"dart_web_toolkit_http/Method"},"isStatic":true,"isFinal":true,"kind":"variable","name":"PUT","id":"PUT","comment":"\nSpecifies that the HTTP PUT method should be used.\n","line":"40"},{"ref":{"name":"RequestCallback","refId":"dart_web_toolkit_http/RequestCallback"},"kind":"variable","name":"_callback","id":"_callback","comment":"\nThe callback to call when the request completes.\n","isPrivate":true,"line":"45"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"String","refId":"dart.core/String"}]},"kind":"variable","name":"_headers","id":"_headers","comment":"\nMap of header name to value that will be added to the JavaScript\nXmlHttpRequest object before sending a request.\n","isPrivate":true,"line":"51"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"_httpMethod","id":"_httpMethod","comment":"\nHTTP method to use when opening a JavaScript XmlHttpRequest object.\n","isPrivate":true,"line":"56"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"_password","id":"_password","comment":"\nPassword to use when opening a JavaScript XmlHttpRequest object.\n","isPrivate":true,"line":"61"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"_requestData","id":"_requestData","comment":"\nRequest data to use when sending a JavaScript XmlHttpRequest object.\n","isPrivate":true,"line":"66"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_timeoutMillis","id":"_timeoutMillis","comment":"\nTimeout in milliseconds before the request timeouts and fails.\n","isPrivate":true,"line":"71"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"_url","id":"_url","comment":"\nURL to use when opening a JavaScript XmlHttpRequest object.\n","isPrivate":true,"line":"76"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"_user","id":"_user","comment":"\nUser to use when opening a JavaScript XmlHttpRequest object.\n","isPrivate":true,"line":"81"},{"kind":"constructor","name":"fromMethod","id":"fromMethod2()","comment":"\nCreates a builder using the parameters for configuration.\n\n@param httpMethod HTTP method to use for the request\n@param url URL that has already has already been encoded. Please see\n         {@link com.google.gwt.http.client.URL#encode(String)},\n         {@link com.google.gwt.http.client.URL#encodePathSegment(String)} and\n         {@link com.google.gwt.http.client.URL#encodeQueryString(String)} for\n         how to do this.\n@throws IllegalArgumentException if the httpMethod or URL are empty\n@throws NullPointerException if the httpMethod or the URL are null\n","children":[{"ref":{"name":"Method","refId":"dart_web_toolkit_http/Method"},"kind":"param","name":"httpMethod","id":"httpMethod"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"url","id":"url"}],"line":"95"},{"kind":"constructor","name":"","id":"2()","comment":"\nCreates a builder using the parameters values for configuration.\n\n@param httpMethod HTTP method to use for the request\n@param url URL that has already has already been URL encoded. Please see\n         {@link com.google.gwt.http.client.URL#encode(String)} and\n         {@link com.google.gwt.http.client.URL#encodePathSegment(String)} and\n         {@link com.google.gwt.http.client.URL#encodeQueryString(String)} for\n         how to do this.\n@throws IllegalArgumentException if the httpMethod or URL are empty\n@throws NullPointerException if the httpMethod or the URL are null\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"_httpMethod","refId":"dart_web_toolkit_http/RequestBuilder/_httpMethod"},"kind":"param","name":"_httpMethod","id":"_httpMethod","isPrivate":true},{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"_url","refId":"dart_web_toolkit_http/RequestBuilder/_url"},"kind":"param","name":"_url","id":"_url","isPrivate":true}],"line":"109"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/http/request_builder.dart","line":"16"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Response","id":"Response","comment":"\nWrapper which provides access to the components of an HTTP response.\n\n<h3>Required Module</h3>\nModules that use this class should inherit\n<code>com.google.gwt.http.HTTP</code>.\n\n{@gwt.include com/google/gwt/examples/http/InheritsExample.gwt.xml}\n","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"getHeader","id":"getHeader1()","comment":"\nReturns the value of the requested header or null if the header was not\nspecified.\n\n@param header the header to query for\n@return the value of response header\n\n@throws IllegalArgumentException if the header name is empty\n@throws NullPointerException if the header name is null\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"header","id":"header"}],"line":"27"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"Header","refId":"dart_web_toolkit_http/Header"}]},"kind":"method","name":"getHeaders","id":"getHeaders0()","comment":"\nReturns an array of HTTP headers associated with this response.\n\n@return array of HTTP headers; returns zero length array if there are no\n        headers\n","line":"35"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"getHeadersAsString","id":"getHeadersAsString0()","comment":"\nReturns all headers as a single string. The individual headers are\ndelimited by a CR (U+000D) LF (U+000A) pair. An individual header is\nformatted according to <a href=\"http://ietf.org/rfc/rfc2616\"> RFC 2616</a>.\n\n@return all headers as a single string delimited by CRLF pairs\n","line":"44"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"getStatusCode","id":"getStatusCode0()","comment":"\nReturns the HTTP status code that is part of this response.\n\n@return the HTTP status code\n","line":"51"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"getStatusText","id":"getStatusText0()","comment":"\nReturns the HTTP status message text.\n\n@return the HTTP status message text\n","line":"58"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"getText","id":"getText0()","comment":"\nReturns the text associated with the response.\n\n@return the response text\n","line":"65"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/http/response.dart","line":"15"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"interfaces":[{"name":"Response","refId":"dart_web_toolkit_http/Response"}],"kind":"class","name":"_Response","id":"_Response","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"getHeader","id":"getHeader1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"header","id":"header"}],"line":"304"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"Header","refId":"dart_web_toolkit_http/Header"}]},"kind":"method","name":"getHeaders","id":"getHeaders0()","line":"310"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"getHeadersAsString","id":"getHeadersAsString0()","line":"314"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"getStatusCode","id":"getStatusCode0()","line":"318"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"getStatusText","id":"getStatusText0()","line":"322"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"getText","id":"getText0()","line":"326"},{"ref":{"name":"HttpRequest","refId":"dart.dom.html/HttpRequest"},"kind":"variable","name":"_xmlHttpRequest","id":"_xmlHttpRequest","isPrivate":true,"line":"300"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"HttpRequest","refId":"dart.dom.html/HttpRequest"},"initializedField":{"name":"_xmlHttpRequest","refId":"dart_web_toolkit_http/_Response/_xmlHttpRequest"},"kind":"param","name":"_xmlHttpRequest","id":"_xmlHttpRequest","isPrivate":true}],"line":"302"}],"isPrivate":true,"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/http/request.dart","line":"298"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"interfaces":[{"name":"Header","refId":"dart_web_toolkit_http/Header"}],"kind":"class","name":"_RequestHeader","id":"_RequestHeader","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"getName","id":"getName0()","line":"285"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"getValue","id":"getValue0()","line":"289"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"293"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"_name","id":"_name","isPrivate":true,"line":"280"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"_value","id":"_value","isPrivate":true,"line":"281"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"_name","refId":"dart_web_toolkit_http/_RequestHeader/_name"},"kind":"param","name":"_name","id":"_name","isPrivate":true},{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"_value","refId":"dart_web_toolkit_http/_RequestHeader/_value"},"kind":"param","name":"_value","id":"_value","isPrivate":true}],"line":"283"}],"isPrivate":true,"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/http/request.dart","line":"278"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"Request","id":"Request","comment":"\nAn HTTP request that is waiting for a response. Requests can be queried for\ntheir pending status or they can be canceled.\n\n<h3>Required Module</h3> Modules that use this class should inherit\n<code>com.google.gwt.http.HTTP</code>.\n\n{@gwt.include\ncom/google/gwt/examples/http/InheritsExample.gwt.xml}\n\n","children":[{"returnType":{"name":"Response","refId":"dart_web_toolkit_http/Response"},"isStatic":true,"kind":"method","name":"createResponse","id":"createResponse1()","comment":"\nCreates a {@link Response} instance for the given JavaScript XmlHttpRequest\nobject.\n\n@param xmlHttpRequest xmlHttpRequest object for which we need a response\n@return a {@link Response} object instance\n","children":[{"ref":{"name":"HttpRequest","refId":"dart.dom.html/HttpRequest"},"kind":"param","name":"xmlHttpRequest","id":"xmlHttpRequest"}],"line":"26"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"Header","refId":"dart_web_toolkit_http/Header"}]},"isStatic":true,"kind":"method","name":"getHeaders","id":"getHeaders1()","comment":"\nReturns an array of headers built by parsing the string of headers returned\nby the JavaScript <code>XmlHttpRequest</code> object.\n\n@param xmlHttpRequest\n@return array of Header items\n","children":[{"ref":{"name":"HttpRequest","refId":"dart.dom.html/HttpRequest"},"kind":"param","name":"xmlHttp","id":"xmlHttp"}],"line":"39"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"isStatic":true,"kind":"method","name":"isResponseReady","id":"isResponseReady1()","children":[{"ref":{"name":"HttpRequest","refId":"dart.dom.html/HttpRequest"},"kind":"param","name":"xhr","id":"xhr"}],"line":"66"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"cancel","id":"cancel0()","comment":"\nCancels a pending request. If the request has already been canceled or if\nit has timed out no action is taken.\n","line":"137"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"isPending","id":"isPending0()","comment":"\nReturns true if this request is waiting for a response.\n\n@return true if this request is waiting for a response\n","line":"167"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"fireOnResponseReceived","id":"fireOnResponseReceived1()","children":[{"ref":{"name":"RequestCallback","refId":"dart_web_toolkit_http/RequestCallback"},"kind":"param","name":"callback","id":"callback"}],"line":"195"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_cancelTimer","id":"_cancelTimer0()","isPrivate":true,"line":"224"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_fireOnTimeout","id":"_fireOnTimeout1()","children":[{"ref":{"name":"RequestCallback","refId":"dart_web_toolkit_http/RequestCallback"},"kind":"param","name":"callback","id":"callback"}],"isPrivate":true,"line":"235"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"_getBrowserSpecificFailure","id":"_getBrowserSpecificFailure1()","comment":"\nTests if the JavaScript <code>XmlHttpRequest.status</code> property is\nreadable. This can return failure in two different known scenarios:\n\n<ol>\n<li>On Mozilla, after a network error, attempting to read the status code\nresults in an exception being thrown. See <a\nhref=\"https://bugzilla.mozilla.org/show_bug.cgi?id=238559\"\n>https://bugzilla.mozilla.org/show_bug.cgi?id=238559</a>.</li>\n<li>On Safari, if the HTTP response does not include any response text. See\n<a\nhref=\"http://bugs.webkit.org/show_bug.cgi?id=3810\">http://bugs.webkit.org\n/show_bug.cgi?id=3810</a>.</li>\n</ol>\n\n@param xhr the JavaScript <code>XmlHttpRequest</code> object to test\n@return a String message containing an error message if the\n        <code>XmlHttpRequest.status</code> code is unreadable or null if\n        the status code could be successfully read.\n","children":[{"ref":{"name":"HttpRequest","refId":"dart.dom.html/HttpRequest"},"kind":"param","name":"xhr","id":"xhr"}],"isPrivate":true,"line":"266"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_timeoutMillis","id":"_timeoutMillis","comment":"\nThe number of milliseconds to wait for this HTTP request to complete.\n","isPrivate":true,"line":"74"},{"ref":{"name":"Timer","refId":"dart.async/Timer"},"kind":"variable","name":"_timer","id":"_timer","isPrivate":true,"line":"80"},{"ref":{"name":"HttpRequest","refId":"dart.dom.html/HttpRequest"},"kind":"variable","name":"_xmlHttpRequest","id":"_xmlHttpRequest","isPrivate":true,"line":"87"},{"kind":"constructor","name":"internal","id":"internal0()","comment":"\nOnly used for building a\n{@link com.google.gwt.user.client.rpc.impl.FailedRequest}.\n","line":"93"},{"kind":"constructor","name":"","id":"3()","comment":"\nConstructs an instance of the Request object.\n\n@param xmlHttpRequest JavaScript XmlHttpRequest object instance\n@param timeoutMillis number of milliseconds to wait for a response\n@param callback callback interface to use for notification\n\n@throws IllegalArgumentException if timeoutMillis &lt; 0\n@throws NullPointerException if xmlHttpRequest, or callback are null\n","children":[{"ref":{"name":"HttpRequest","refId":"dart.dom.html/HttpRequest"},"kind":"param","name":"xmlHttpRequest","id":"xmlHttpRequest"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"timeoutMillis","id":"timeoutMillis"},{"ref":{"name":"RequestCallback","refId":"dart_web_toolkit_http/RequestCallback"},"kind":"param","name":"callback","id":"callback"}],"line":"105"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/http/request.dart","line":"17"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"RequestCallback","id":"RequestCallback","comment":"\nThe primary interface a caller must implement to receive a response to a\n{@link com.google.gwt.http.client.Request}.\n\n<h3>Required Module</h3>\nModules that use this interface should inherit\n<code>com.google.gwt.http.HTTP</code>.\n\n{@gwt.include com/google/gwt/examples/http/InheritsExample.gwt.xml}\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"onResponseReceived","id":"onResponseReceived2()","comment":"\nCalled when a pending {@link com.google.gwt.http.client.Request} completes\nnormally.  Note this method is called even when the status code of the \nHTTP response is not \"OK\", 200. \n\n@param request the object that generated this event\n@param response an instance of the\n       {@link com.google.gwt.http.client.Response} class \n","children":[{"ref":{"name":"Request","refId":"dart_web_toolkit_http/Request"},"kind":"param","name":"request","id":"request"},{"ref":{"name":"Response","refId":"dart_web_toolkit_http/Response"},"kind":"param","name":"response","id":"response"}],"line":"27"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"onError","id":"onError2()","comment":"\nCalled when a {@link com.google.gwt.http.client.Request} does not complete\nnormally.  A {@link com.google.gwt.http.client.RequestTimeoutException RequestTimeoutException} is\none example of the type of error that a request may encounter.\n\n@param request the request object which has experienced the error\n    condition, may be null if the request was never generated\n@param exception the error that was encountered\n","children":[{"ref":{"name":"Request","refId":"dart_web_toolkit_http/Request"},"kind":"param","name":"request","id":"request"},{"ref":{"name":"Exception","refId":"dart.core/Exception"},"kind":"param","name":"exception","id":"exception"}],"line":"38"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/http/request_callback.dart","line":"16"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/http.dart","line":"4"}
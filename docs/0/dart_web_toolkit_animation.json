{"dependencies":[{"id":"dart.core","comment":"\n\nBuilt-in types, collections,\nand other core functionality for every Dart program.\n\nThis library is automatically imported.\n\nSome classes in this library,\nsuch as [String] and [num],\nsupport Dart's built-in data types.\nOther classes, such as [List] and [Map], provide data structures\nfor managing collections of objects.\nAnd still other classes represent commonly used types of data\nsuch as URIs, dates and times, and errors.\n\n## Numbers and booleans\n\n[int] and [double] provide support for Dart's built-in numerical data types:\nintegers and double-precision floating point numbers, respectively.\nAn object of type [bool] is either true or false.\nVariables of these types can be constructed from literals:\n\n    int meaningOfLife = 42;\n    double valueOfPi  = 3.141592;\n    bool visible      = true;\n\n## Strings and regular expressions\n\nA [String] is immutable and represents a sequence of characters.\n\n    String shakespeareQuote = \"All the world's a stage, ...\";\n\n[StringBuffer] provides a way to construct strings efficiently.\n\n    StringBuffer moreShakespeare = new StringBuffer();\n    moreShakespeare.write('And all the men and women ');\n    moreShakespeare.write('merely players; ...');\n\nThe String and StringBuffer classes implement string concatenation,\ninterpolation, and other string manipulation features.\n\n    String philosophy = 'Live on ';\n    String get palindrome => philosophy + philosophy.split('').reversed.join();\n\n[RegExp] implements Dart regular expressions,\nwhich provide a grammar for matching patterns within text.\nFor example, here's a regular expression that matches\na string of one or more digits:\n\n    var numbers = new RegExp(r'\\d+');\n\nDart regular expressions have the same syntax and semantics as\nJavaScript regular expressions. See\n<http://ecma-international.org/ecma-262/5.1/#sec-15.10>\nfor the specification of JavaScript regular expressions.\n\n## Collections\n\nThe dart:core library provides basic collections,\nsuch as [List], [Map], and [Set].\n\nA List is an ordered collection of objects, with a length.\nLists are sometimes called arrays.\nUse a List when you need to access objects by index.\n\n    List superheroes = [ 'Batman', 'Superman', 'Harry Potter' ];\n\nA Set is an unordered collection of unique objects.\nYou cannot get an item by index (position).\nAdding a duplicate item has no effect.\n\n    Set villians = new Set();\n    villians.add('Joker');\n    villians.addAll( ['Lex Luther', 'Voldemort'] );\n\nA Map is an unordered collection of key-value pairs.\nMaps are sometimes called associative arrays because\nmaps associate a key to some value for easy retrieval.\nKeys are unique.\nUse a Map when you need to access objects\nby a unique identifier.\n\n    Map sidekicks = { 'Batman': 'Robin',\n                      'Superman': 'Lois Lane',\n                      'Harry Potter': 'Ron and Hermione' };\n\nIn addition to these classes,\ndart:core contains [Iterable],\nan interface that defines functionality\ncommon in collections of objects.\nExamples include the ability\nto run a function on each element in the collection,\nto apply a test to each element, \nto retrieve an object, and to determine length.\n\nIterable is implemented by List and Set,\nand used by Map for its keys and values.\n\nFor other kinds of collections, check out the\n[dart:collection](#dart-collection) library.\n\n## Date and time\n\nUse [DateTime] to represent a point in time\nand [Duration] to represent a span of time.\n\nYou can create DateTime objects with constructors\nor by parsing a correctly formatted string.\n\n    DateTime now = new DateTime.now();\n    DateTime berlinWallFell = new DateTime(1989, 11, 9);\n    DateTime moonLanding = DateTime.parse(\"1969-07-20\");\n\nCreate a Duration object specifying the individual time units.\n\n    Duration timeRemaining = new Duration(hours:56, minutes:14);\n\nIn addition to DateTime and Duration,\ndart:core contains the [Stopwatch] class for measuring elapsed time.\n    \n## Uri\n\nA [Uri] object represents a uniform resource identifier,\nwhich identifies a resource on the web.\n\n    Uri dartlang = Uri.parse('http://dartlang.org/');\n    \n## Errors\n\nThe [Error] class represents the occurrence of an error\nduring runtime.\nSubclasses of this class represent specific kinds of errors.\n\n## Other documentation\n\nFor more information about how to use the built-in types, refer to\n[Built-in Types](http://www.dartlang.org/docs/dart-up-and-running/contents/ch02.html#built-in-types)\nin Chapter 2 of\n[Dart: Up and Running](http://www.dartlang.org/docs/dart-up-and-running/).\n\nAlso, see\n[dart:core - Numbers, Collections, Strings, and More](http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-dartcore---strings-collections-and-more)\nfor more coverage of classes in this package.\n\nThe \n[Dart Language Specification](https://www.dartlang.org/docs/spec/)\nprovides technical details.\n","uri":"dart-sdk/lib/core/core.dart","name":"dart:core","children":[{"id":"Object","comment":"\nEverything in Dart is an [Object].\n","uri":"dart-sdk/lib/core/object.dart","name":"Object","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"id":"==1()","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nOverride this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:\n\n * Total: It must return a boolean for all arguments. It should never throw\n   or return `null`.\n\n * Reflexive: For all objects `o`, `o == o` must be true.\n\n * Symmetric: For all objects `o1` and `o2`, `o1 == o2` and `o2 == o1` must\n   either both be true, or both be false.\n\n * Transitive: For all objects `o1`, `o2`, and `o3`, if `o1 == o2` and\n   `o2 == o3` are true, then `o1 == o3` must be true.\n\nThe method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","name":"==","children":[{"id":"other","name":"other","kind":"param"}],"line":"48","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"toString0()","comment":"\nReturns a string representation of this object.\n","name":"toString","line":"67","kind":"method"},{"id":"noSuchMethod1()","comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","name":"noSuchMethod","children":[{"ref":{"refId":"dart.core/Invocation","name":"Invocation"},"id":"invocation","name":"invocation","kind":"param"}],"line":"79","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"hashCode","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","name":"hashCode","line":"62","kind":"property"},{"ref":{"refId":"dart.core/Type","name":"Type"},"id":"runtimeType","comment":"\nA representation of the runtime type of the object.\n","name":"runtimeType","line":"84","kind":"property"},{"id":"0()","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","name":"","line":"18","kind":"constructor"}],"line":"10","kind":"class"}],"line":"153","kind":"library"}],"id":"dart_web_toolkit_animation","comment":"\nDart Web Toolkit Animation library.\n","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/animation.dart","children":[{"superclass":{"refId":"dart_web_toolkit_animation/AnimationHandle","name":"AnimationHandle"},"id":"AnimationHandleImplTimer","comment":"\nTimer based implementation of {@link AnimationScheduler.AnimationHandle}.\n","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/animation/impl/animation_scheduler_impl_timer.dart","name":"AnimationHandleImplTimer","children":[{"returnType":{"refId":"void","name":"void"},"id":"cancel0()","name":"cancel","line":"110","kind":"method"},{"returnType":{"refId":"dart_web_toolkit_animation/AnimationCallback","name":"AnimationCallback"},"id":"getCallback0()","name":"getCallback","line":"114","kind":"method"},{"ref":{"refId":"dart_web_toolkit_animation/AnimationCallback","name":"AnimationCallback"},"id":"callback","name":"callback","line":"105","kind":"variable"},{"ref":{"refId":"dart_web_toolkit_animation/AnimationSchedulerImplTimer","name":"AnimationSchedulerImplTimer"},"id":"_impl","name":"_impl","isPrivate":true,"line":"106","kind":"variable"},{"id":"2()","name":"","children":[{"initializedField":{"refId":"dart_web_toolkit_animation/AnimationHandleImplTimer/callback","name":"callback"},"ref":{"refId":"dart_web_toolkit_animation/AnimationCallback","name":"AnimationCallback"},"id":"callback","name":"callback","kind":"param"},{"initializedField":{"refId":"dart_web_toolkit_animation/AnimationHandleImplTimer/_impl","name":"_impl"},"ref":{"refId":"dart_web_toolkit_animation/AnimationSchedulerImplTimer","name":"AnimationSchedulerImplTimer"},"id":"_impl","name":"_impl","isPrivate":true,"kind":"param"}],"line":"108","kind":"constructor"}],"line":"104","kind":"class"},{"superclass":{"refId":"dart_web_toolkit_animation/AnimationSchedulerImpl","name":"AnimationSchedulerImpl"},"id":"AnimationSchedulerImplTimer","comment":"\nImplementation using a timer for browsers that do not support animation\nframes.\n","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/animation/impl/animation_scheduler_impl_timer.dart","name":"AnimationSchedulerImplTimer","children":[{"returnType":{"refId":"dart_web_toolkit_animation/AnimationHandle","name":"AnimationHandle"},"id":"requestAnimationFrame2()","name":"requestAnimationFrame","children":[{"ref":{"refId":"dart_web_toolkit_animation/AnimationCallback","name":"AnimationCallback"},"id":"callback","name":"callback","kind":"param"},{"ref":{"refId":"dart.dom.html/Element","name":"Element"},"isOptional":true,"defaultValue":"null","id":"element","name":"element","kind":"param"}],"line":"37","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"isNativelySupported0()","name":"isNativelySupported","line":"51","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"cancelAnimationFrame1()","name":"cancelAnimationFrame","children":[{"ref":{"refId":"dart_web_toolkit_animation/AnimationHandle","name":"AnimationHandle"},"id":"requestId","name":"requestId","kind":"param"}],"line":"55","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"updateAnimations0()","comment":"\nIterate over all animations and update them.\n","name":"updateAnimations","line":"71","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"DEFAULT_FRAME_DELAY","comment":"\nThe default time in milliseconds between frames. 60 fps == 16.67 ms.\n","name":"DEFAULT_FRAME_DELAY","line":"15","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"MIN_FRAME_DELAY","comment":"\nThe minimum delay in milliseconds between frames. The minimum delay is\nimposed to prevent freezing the UI.\n","name":"MIN_FRAME_DELAY","line":"21","kind":"variable"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart_web_toolkit_animation/AnimationHandleImplTimer","name":"AnimationHandleImplTimer"}],"name":"List"},"id":"animationRequests","comment":"\nThe list of animations that are currently running.\n","name":"animationRequests","line":"26","kind":"variable"},{"ref":{"refId":"dart_web_toolkit_util/Timer","name":"Timer"},"id":"timer","comment":"\nThe timer that updates all animations.\n","name":"timer","line":"31","kind":"variable"},{"id":"0()","name":"","line":"33","kind":"constructor"}],"line":"10","kind":"class"},{"superclass":{"refId":"dart_web_toolkit_animation/AnimationHandle","name":"AnimationHandle"},"id":"AnimationHandleImplWebkit","comment":"\nWebkit implementation of {@link AnimationScheduler.AnimationHandle}. Webkit\nprovides the request ID as a int.\n","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/animation/impl/animation_scheduler_impl_webkit.dart","name":"AnimationHandleImplWebkit","children":[{"returnType":{"refId":"void","name":"void"},"id":"cancel0()","name":"cancel","line":"68","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"requestId","name":"requestId","line":"63","kind":"variable"},{"ref":{"refId":"dart_web_toolkit_animation/AnimationSchedulerImplWebkit","name":"AnimationSchedulerImplWebkit"},"id":"impl","name":"impl","line":"64","kind":"variable"},{"id":"2()","name":"","children":[{"initializedField":{"refId":"dart_web_toolkit_animation/AnimationHandleImplWebkit/requestId","name":"requestId"},"ref":{"refId":"dart.core/int","name":"int"},"id":"requestId","name":"requestId","kind":"param"},{"initializedField":{"refId":"dart_web_toolkit_animation/AnimationHandleImplWebkit/impl","name":"impl"},"ref":{"refId":"dart_web_toolkit_animation/AnimationSchedulerImplWebkit","name":"AnimationSchedulerImplWebkit"},"id":"impl","name":"impl","kind":"param"}],"line":"66","kind":"constructor"}],"line":"62","kind":"class"},{"superclass":{"refId":"dart_web_toolkit_animation/AnimationSchedulerImpl","name":"AnimationSchedulerImpl"},"id":"AnimationSchedulerImplWebkit","comment":"\nImplementation using <code>webkitRequestAnimationFrame</code> and\n<code>webkitCancelRequestAnimationFrame</code>.\n\n@see <a\n     href=\"http://www.chromium.org/developers/web-platform-status#TOC-requestAnimationFrame\">\n     Chromium Web Platform Status</a>\n@see <a href=\"http://webstuff.nfshost.com/anim-timing/Overview.html\"> webkit\n     draft spec</a>\n","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/animation/impl/animation_scheduler_impl_webkit.dart","name":"AnimationSchedulerImplWebkit","children":[{"returnType":{"refId":"dart_web_toolkit_animation/AnimationHandle","name":"AnimationHandle"},"id":"requestAnimationFrame2()","comment":"\nSchedule an animation, letting the browser decide when to trigger the next\nstep in the animation.\n\n<p>\nUsing this method instead of a timeout is preferred because the browser is\nin the best position to decide how frequently to trigger the callback for\nan animation of the specified element. The browser can balance multiple\nanimations and trigger callbacks at the optimal rate for smooth\nperformance.\n</p>\n\n@param callback the callback to fire\n@return a handle to the requested animation frame\n@param element the element being animated\n","name":"requestAnimationFrame","children":[{"ref":{"refId":"dart_web_toolkit_animation/AnimationCallback","name":"AnimationCallback"},"id":"callback","name":"callback","kind":"param"},{"ref":{"refId":"dart.dom.html/Element","name":"Element"},"isOptional":true,"defaultValue":"null","id":"element","name":"element","kind":"param"}],"line":"36","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"isNativelySupported0()","name":"isNativelySupported","line":"41","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"cancelAnimationFrameImpl1()","name":"cancelAnimationFrameImpl","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"requestId","name":"requestId","kind":"param"}],"line":"46","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"id":"requestAnimationFrameImpl2()","name":"requestAnimationFrameImpl","children":[{"ref":{"refId":"dart_web_toolkit_animation/AnimationCallback","name":"AnimationCallback"},"id":"callback","name":"callback","kind":"param"},{"ref":{"refId":"dart.dom.html/Element","name":"Element"},"id":"element","name":"element","kind":"param"}],"line":"50","kind":"method"},{"id":"0()","name":"","line":"18","kind":"constructor"}],"line":"16","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart_web_toolkit_animation/AnimationScheduler","name":"AnimationScheduler"},"id":"AnimationSchedulerImpl","comment":"\nBase class for animation implementations.\n","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/animation/impl/animation_scheduler_impl.dart","name":"AnimationSchedulerImpl","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"isNativelySupported0()","comment":"\nCheck if the implementation is natively supported.\n\n@return true if natively supported, false if not\n","name":"isNativelySupported","line":"44","kind":"method"},{"ref":{"refId":"dart_web_toolkit_animation/AnimationSchedulerImpl","name":"AnimationSchedulerImpl"},"isStatic":true,"id":"impl","name":"impl","line":"11","kind":"variable"},{"returnType":{"refId":"dart_web_toolkit_animation/AnimationSchedulerImpl","name":"AnimationSchedulerImpl"},"id":"Instance0()","name":"Instance","line":"13","kind":"constructor"},{"id":"0()","name":"","line":"33","kind":"constructor"},{"returnType":{"refId":"dart_web_toolkit_animation/AnimationSchedulerImpl","name":"AnimationSchedulerImpl"},"id":"browserDependent0()","name":"browserDependent","line":"35","kind":"constructor"}],"line":"9","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"AnimatedLayout","comment":"\nSpecifies that a panel can animate between layouts.\n\n<p>\nThe normal use pattern is to set all childrens' positions, then to call\n{@link #animate(int)} to move them to their new positions over some period\nof time.\n</p>\n","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/animation/animated_layout.dart","name":"AnimatedLayout","children":[{"returnType":{"refId":"void","name":"void"},"id":"animate2()","comment":"\nLayout children, animating over the specified period of time.\n\n<p>\nThis method provides a callback that will be informed of animation updates.\nThis can be used to create more complex animation effects.\n</p>\n\n@param duration the animation duration, in milliseconds\n@param callback the animation callback\n","name":"animate","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"duration","name":"duration","kind":"param"},{"ref":{"refId":"dart_web_toolkit_layout/LayoutAnimationCallback","name":"LayoutAnimationCallback"},"isOptional":true,"defaultValue":"null","id":"callback","name":"callback","kind":"param"}],"line":"28","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"forceLayout0()","comment":"\nLayout children immediately.\n\n<p>\nThis is not normally necessary, unless you want to update child widgets'\npositions explicitly to create a starting point for a subsequent call to\n{@link #animate(int)}.\n</p>\n\n@see #animate(int)\n@see #animate(int, Layout.AnimationCallback)\n","name":"forceLayout","line":"42","kind":"method"}],"line":"15","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"AnimationHandle","comment":"\nA handle to the requested animation frame created by\n{@link #requestAnimationFrame(AnimationCallback, Element)}.\n","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/animation/animation_scheduler.dart","name":"AnimationHandle","children":[{"returnType":{"refId":"void","name":"void"},"id":"cancel0()","comment":"\nCancel the requested animation frame. If the animation frame is already\ncanceled, do nothing.\n","name":"cancel","line":"63","kind":"method"}],"line":"58","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"AnimationCallback","comment":"\nThe callback used when an animation frame becomes available.\n","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/animation/animation_scheduler.dart","name":"AnimationCallback","children":[{"returnType":{"refId":"void","name":"void"},"id":"execute1()","comment":"\nInvokes the command.\n\n@param timestamp the current timestamp\n","name":"execute","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"timestamp","name":"timestamp","kind":"param"}],"line":"51","kind":"method"}],"line":"45","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"AnimationScheduler","comment":"\nThis class provides task scheduling for animations. Any exceptions thrown by\nthe command objects executed by the scheduler will be passed to the\n{@link com.google.gwt.core.client.GWT.UncaughtExceptionHandler} if one is\ninstalled.\n","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/animation/animation_scheduler.dart","name":"AnimationScheduler","children":[{"returnType":{"refId":"dart_web_toolkit_animation/AnimationHandle","name":"AnimationHandle"},"id":"requestAnimationFrame2()","comment":"\nSchedule an animation, letting the browser decide when to trigger the next\nstep in the animation.\n\n<p>\nUsing this method instead of a timeout is preferred because the browser is\nin the best position to decide how frequently to trigger the callback for\nan animation of the specified element. The browser can balance multiple\nanimations and trigger callbacks at the optimal rate for smooth\nperformance.\n</p>\n\n@param callback the callback to fire\n@return a handle to the requested animation frame\n@param element the element being animated\n","name":"requestAnimationFrame","children":[{"ref":{"refId":"dart_web_toolkit_animation/AnimationCallback","name":"AnimationCallback"},"id":"callback","name":"callback","kind":"param"},{"ref":{"refId":"dart.dom.html/Element","name":"Element"},"isOptional":true,"defaultValue":"null","id":"element","name":"element","kind":"param"}],"line":"39","kind":"method"},{"returnType":{"refId":"dart_web_toolkit_animation/AnimationScheduler","name":"AnimationScheduler"},"id":"Instance0()","comment":"\nReturns the default implementation of the AnimationScheduler API.\n","name":"Instance","line":"17","kind":"constructor"},{"id":"0()","name":"","line":"21","kind":"constructor"}],"line":"12","kind":"class"},{"interfaces":[{"refId":"dart_web_toolkit_animation/AnimationCallback","name":"AnimationCallback"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"AnimationCallback2","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/animation/animation.dart","name":"AnimationCallback2","children":[{"returnType":{"refId":"void","name":"void"},"id":"execute1()","name":"execute","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"timestamp","name":"timestamp","kind":"param"}],"line":"289","kind":"method"},{"ref":{"refId":"dart_web_toolkit_animation/Animation","name":"Animation"},"id":"_animation","name":"_animation","isPrivate":true,"line":"285","kind":"variable"},{"id":"1()","name":"","children":[{"initializedField":{"refId":"dart_web_toolkit_animation/AnimationCallback2/_animation","name":"_animation"},"ref":{"refId":"dart_web_toolkit_animation/Animation","name":"Animation"},"id":"_animation","name":"_animation","isPrivate":true,"kind":"param"}],"line":"287","kind":"constructor"}],"line":"283","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"Animation","comment":"\nAn {@link Animation} is a continuous event that updates progressively over\ntime at a non-fixed frame rate.\n","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/animation/animation.dart","name":"Animation","children":[{"returnType":{"refId":"void","name":"void"},"id":"cancel0()","comment":"\nImmediately cancel this animation. If the animation is running or is\nscheduled to run, {@link #onCancel()} will be called.\n","name":"cancel","line":"77","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"run3()","comment":"\nRun this animation at the given startTime. If the startTime has already\npassed, the animation will run synchronously as if it started at the\nspecified start time. If the animation is already running, it will be\ncanceled first.\n<p>\nIf the element is not <code>null</code>, the {@link #onUpdate(double)}\nmethod might be called only if the element may be visible (generally left\nat the appreciation of the browser). Otherwise, it will be called\nunconditionally.\n\n@param duration the duration of the animation in milliseconds\n@param startTime the synchronized start time in milliseconds\n@param element the element that visually bounds the entire animation\n","name":"run","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"duration","name":"duration","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"defaultValue":"null","id":"startTime","name":"startTime","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.dom.html/Element","name":"Element"},"isOptional":true,"defaultValue":"null","id":"element","name":"element","kind":"param"}],"line":"158","kind":"method"},{"returnType":{"refId":"dart.core/double","name":"double"},"id":"interpolate1()","comment":"\nInterpolate the linear progress into a more natural easing function.\n\nDepending on the {@link Animation}, the return value of this method can be\nless than 0.0 or greater than 1.0.\n\n@param progress the linear progress, between 0.0 and 1.0\n@return the interpolated progress\n","name":"interpolate","children":[{"ref":{"refId":"dart.core/double","name":"double"},"id":"progress","name":"progress","kind":"param"}],"line":"187","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"onCancel0()","comment":"\nCalled immediately after the animation is canceled. The default\nimplementation of this method calls {@link #onComplete()} only if the\nanimation has actually started running.\n","name":"onCancel","line":"196","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"onComplete0()","comment":"\nCalled immediately after the animation completes.\n","name":"onComplete","line":"205","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"onStart0()","comment":"\nCalled immediately before the animation starts.\n","name":"onStart","line":"212","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"onUpdate1()","comment":"\nCalled when the animation should be updated.\n\nThe value of progress is between 0.0 and 1.0 (inclusive) (unless you\noverride the {@link #interpolate(double)} method to provide a wider range\nof values). You can override {@link #onStart()} and {@link #onComplete()}\nto perform setup and tear down procedures.\n\n@param progress a double, normally between 0.0 and 1.0 (inclusive)\n","name":"onUpdate","children":[{"ref":{"refId":"dart.core/double","name":"double"},"id":"progress","name":"progress","kind":"param"}],"line":"226","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"isRunning1()","comment":"\nCheck if the specified run ID is still being run.\n\n@param curRunId the current run ID to check\n@return true if running, false if canceled or restarted\n","name":"isRunning","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"curRunId","name":"curRunId","kind":"param"}],"line":"234","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"update1()","comment":"\nUpdate the {@link Animation}.\n\n@param curTime the current time\n@return true if the animation should run again, false if it is complete\n","name":"update","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"curTime","name":"curTime","kind":"param"}],"line":"244","kind":"method"},{"ref":{"refId":"dart_web_toolkit_animation/AnimationCallback","name":"AnimationCallback"},"id":"callback","name":"callback","line":"12","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"duration","comment":"\nThe duration of the {@link Animation} in milliseconds.\n","name":"duration","line":"18","kind":"variable"},{"ref":{"refId":"dart.dom.html/Element","name":"Element"},"id":"element","comment":"\nThe element being animated.\n","name":"element","line":"23","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"id":"running","comment":"\nIs the animation running, even if it hasn't started yet.\n","name":"running","line":"28","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"id":"isStarted","comment":"\nHas the {@link Animation} actually started.\n","name":"isStarted","line":"33","kind":"variable"},{"ref":{"refId":"dart_web_toolkit_animation/AnimationHandle","name":"AnimationHandle"},"id":"requestHandle","comment":"\nThe ID of the pending animation request.\n","name":"requestHandle","line":"38","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"runId","comment":"\nThe unique ID of the current run. Used to handle cases where an animation\nis restarted within an execution block.\n","name":"runId","line":"44","kind":"variable"},{"ref":{"refId":"dart_web_toolkit_animation/AnimationScheduler","name":"AnimationScheduler"},"id":"scheduler","name":"scheduler","line":"46","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"startTime","comment":"\nThe start time of the {@link Animation}.\n","name":"startTime","line":"51","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"id":"wasStarted","comment":"\nDid the animation start before {@link #cancel()} was called.\n","name":"wasStarted","line":"56","kind":"variable"},{"id":"1()","comment":"\nConstruct a new {@link AnimationScheduler} using the specified scheduler to\nsheduler request frames.\n\n@param scheduler an {@link AnimationScheduler} instance\n","name":"","children":[{"ref":{"refId":"dart_web_toolkit_animation/AnimationScheduler","name":"AnimationScheduler"},"isOptional":true,"defaultValue":"null","id":"scheduler","name":"scheduler","kind":"param"}],"line":"64","kind":"constructor"}],"line":"10","kind":"class"}],"line":"7","kind":"library"}
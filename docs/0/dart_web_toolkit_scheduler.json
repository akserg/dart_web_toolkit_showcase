{"dependencies":[{"kind":"library","name":"dart:core","id":"dart.core","comment":"\n\nBuilt-in types, collections,\nand other core functionality for every Dart program.\n\nThis library is automatically imported.\n\nSome classes in this library,\nsuch as [String] and [num],\nsupport Dart's built-in data types.\nOther classes, such as [List] and [Map], provide data structures\nfor managing collections of objects.\nAnd still other classes represent commonly used types of data\nsuch as URIs, dates and times, and errors.\n\n## Numbers and booleans\n\n[int] and [double] provide support for Dart's built-in numerical data types:\nintegers and double-precision floating point numbers, respectively.\nAn object of type [bool] is either true or false.\nVariables of these types can be constructed from literals:\n\n    int meaningOfLife = 42;\n    double valueOfPi  = 3.141592;\n    bool visible      = true;\n\n## Strings and regular expressions\n\nA [String] is immutable and represents a sequence of characters.\n\n    String shakespeareQuote = \"All the world's a stage, ...\";\n\n[StringBuffer] provides a way to construct strings efficiently.\n\n    StringBuffer moreShakespeare = new StringBuffer();\n    moreShakespeare.write('And all the men and women ');\n    moreShakespeare.write('merely players; ...');\n\nThe String and StringBuffer classes implement string concatenation,\ninterpolation, and other string manipulation features.\n\n    String philosophy = 'Live on ';\n    String get palindrome => philosophy + philosophy.split('').reversed.join();\n\n[RegExp] implements Dart regular expressions,\nwhich provide a grammar for matching patterns within text.\nFor example, here's a regular expression that matches\na string of one or more digits:\n\n    var numbers = new RegExp(r'\\d+');\n\nDart regular expressions have the same syntax and semantics as\nJavaScript regular expressions. See\n<http://ecma-international.org/ecma-262/5.1/#sec-15.10>\nfor the specification of JavaScript regular expressions.\n\n## Collections\n\nThe dart:core library provides basic collections,\nsuch as [List], [Map], and [Set].\n\nA List is an ordered collection of objects, with a length.\nLists are sometimes called arrays.\nUse a List when you need to access objects by index.\n\n    List superheroes = [ 'Batman', 'Superman', 'Harry Potter' ];\n\nA Set is an unordered collection of unique objects.\nYou cannot get an item by index (position).\nAdding a duplicate item has no effect.\n\n    Set villians = new Set();\n    villians.add('Joker');\n    villians.addAll( ['Lex Luther', 'Voldemort'] );\n\nA Map is an unordered collection of key-value pairs.\nMaps are sometimes called associative arrays because\nmaps associate a key to some value for easy retrieval.\nKeys are unique.\nUse a Map when you need to access objects\nby a unique identifier.\n\n    Map sidekicks = { 'Batman': 'Robin',\n                      'Superman': 'Lois Lane',\n                      'Harry Potter': 'Ron and Hermione' };\n\nIn addition to these classes,\ndart:core contains [Iterable],\nan interface that defines functionality\ncommon in collections of objects.\nExamples include the ability\nto run a function on each element in the collection,\nto apply a test to each element, \nto retrieve an object, and to determine length.\n\nIterable is implemented by List and Set,\nand used by Map for its keys and values.\n\nFor other kinds of collections, check out the\n[dart:collection](#dart-collection) library.\n\n## Date and time\n\nUse [DateTime] to represent a point in time\nand [Duration] to represent a span of time.\n\nYou can create DateTime objects with constructors\nor by parsing a correctly formatted string.\n\n    DateTime now = new DateTime.now();\n    DateTime berlinWallFell = new DateTime(1989, 11, 9);\n    DateTime moonLanding = DateTime.parse(\"1969-07-20\");\n\nCreate a Duration object specifying the individual time units.\n\n    Duration timeRemaining = new Duration(hours:56, minutes:14);\n\nIn addition to DateTime and Duration,\ndart:core contains the [Stopwatch] class for measuring elapsed time.\n    \n## Uri\n\nA [Uri] object represents a uniform resource identifier,\nwhich identifies a resource on the web.\n\n    Uri dartlang = Uri.parse('http://dartlang.org/');\n    \n## Errors\n\nThe [Error] class represents the occurrence of an error\nduring runtime.\nSubclasses of this class represent specific kinds of errors.\n\n## Other documentation\n\nFor more information about how to use the built-in types, refer to\n[Built-in Types](http://www.dartlang.org/docs/dart-up-and-running/contents/ch02.html#built-in-types)\nin Chapter 2 of\n[Dart: Up and Running](http://www.dartlang.org/docs/dart-up-and-running/).\n\nAlso, see\n[dart:core - Numbers, Collections, Strings, and More](http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-dartcore---strings-collections-and-more)\nfor more coverage of classes in this package.\n\nThe \n[Dart Language Specification](https://www.dartlang.org/docs/spec/)\nprovides technical details.\n","children":[{"kind":"class","name":"Object","id":"Object","comment":"\nEverything in Dart is an [Object].\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"==","id":"==1()","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nOverride this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:\n\n * Total: It must return a boolean for all arguments. It should never throw\n   or return `null`.\n\n * Reflexive: For all objects `o`, `o == o` must be true.\n\n * Symmetric: For all objects `o1` and `o2`, `o1 == o2` and `o2 == o1` must\n   either both be true, or both be false.\n\n * Transitive: For all objects `o1`, `o2`, and `o3`, if `o1 == o2` and\n   `o2 == o3` are true, then `o1 == o3` must be true.\n\nThe method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","children":[{"kind":"param","name":"other","id":"other"}],"line":"48"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","comment":"\nReturns a string representation of this object.\n","line":"67"},{"kind":"method","name":"noSuchMethod","id":"noSuchMethod1()","comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","children":[{"ref":{"name":"Invocation","refId":"dart.core/Invocation"},"kind":"param","name":"invocation","id":"invocation"}],"line":"79"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"hashCode","id":"hashCode","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","line":"62"},{"ref":{"name":"Type","refId":"dart.core/Type"},"kind":"property","name":"runtimeType","id":"runtimeType","comment":"\nA representation of the runtime type of the object.\n","line":"84"},{"kind":"constructor","name":"","id":"0()","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","line":"18"}],"uri":"dart-sdk/lib/core/object.dart","line":"10"}],"uri":"dart-sdk/lib/core/core.dart","line":"153"}],"kind":"library","id":"dart_web_toolkit_scheduler","comment":"\nDart Web Toolkit Scheduler library.\n","children":[{"superclass":{"name":"Object","refId":"dart.core/Object"},"interfaces":[{"name":"RepeatingCommand","refId":"dart_web_toolkit_scheduler/RepeatingCommand"}],"kind":"class","name":"Rescuer","id":"Rescuer","comment":"\nKeeps {@link Flusher} running.\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"execute","id":"execute0()","line":"15"},{"ref":{"name":"SchedulerImpl","refId":"dart_web_toolkit_scheduler/SchedulerImpl"},"kind":"variable","name":"_schedulerImpl","id":"_schedulerImpl","isPrivate":true,"line":"11"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"SchedulerImpl","refId":"dart_web_toolkit_scheduler/SchedulerImpl"},"initializedField":{"name":"_schedulerImpl","refId":"dart_web_toolkit_scheduler/Rescuer/_schedulerImpl"},"kind":"param","name":"_schedulerImpl","id":"_schedulerImpl","isPrivate":true}],"line":"13"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/scheduler/impl/rescuer.dart","line":"9"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"interfaces":[{"name":"RepeatingCommand","refId":"dart_web_toolkit_scheduler/RepeatingCommand"}],"kind":"class","name":"Flusher","id":"Flusher","comment":"\nCalls {@link SchedulerImpl#flushPostEventPumpCommands()}.\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"execute","id":"execute0()","line":"15"},{"ref":{"name":"SchedulerImpl","refId":"dart_web_toolkit_scheduler/SchedulerImpl"},"kind":"variable","name":"_schedulerImpl","id":"_schedulerImpl","isPrivate":true,"line":"11"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"SchedulerImpl","refId":"dart_web_toolkit_scheduler/SchedulerImpl"},"initializedField":{"name":"_schedulerImpl","refId":"dart_web_toolkit_scheduler/Flusher/_schedulerImpl"},"kind":"param","name":"_schedulerImpl","id":"_schedulerImpl","isPrivate":true}],"line":"13"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/scheduler/impl/flusher.dart","line":"9"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"Task","id":"Task","comment":"\nMetadata bag for command objects. It's a JSO so that a lightweight JsArray\ncan be used instead of a Collections type.\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"executeRepeating","id":"executeRepeating0()","line":"25"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"executeScheduled","id":"executeScheduled0()","line":"29"},{"returnType":{"name":"RepeatingCommand","refId":"dart_web_toolkit_scheduler/RepeatingCommand"},"kind":"method","name":"getRepeating","id":"getRepeating0()","comment":"\nHas implicit cast.\n","line":"36"},{"returnType":{"name":"ScheduledCommand","refId":"dart_web_toolkit_scheduler/ScheduledCommand"},"kind":"method","name":"getScheduled","id":"getScheduled0()","comment":"\nHas implicit cast.\n","line":"43"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"isRepeating","id":"isRepeating0()","line":"47"},{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"variable","name":"_command","id":"_command","isPrivate":true,"line":"12"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"_repeating","id":"_repeating","isPrivate":true,"line":"13"},{"returnType":{"name":"Task","refId":"dart_web_toolkit_scheduler/Task"},"kind":"constructor","name":"fromRepeatingCommand","id":"fromRepeatingCommand1()","children":[{"ref":{"name":"RepeatingCommand","refId":"dart_web_toolkit_scheduler/RepeatingCommand"},"kind":"param","name":"cmd","id":"cmd"}],"line":"15"},{"returnType":{"name":"Task","refId":"dart_web_toolkit_scheduler/Task"},"kind":"constructor","name":"fromScheduledCommand","id":"fromScheduledCommand1()","children":[{"ref":{"name":"ScheduledCommand","refId":"dart_web_toolkit_scheduler/ScheduledCommand"},"kind":"param","name":"cmd","id":"cmd"}],"line":"19"},{"kind":"constructor","name":"_internal","id":"_internal2()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"initializedField":{"name":"_command","refId":"dart_web_toolkit_scheduler/Task/_command"},"kind":"param","name":"_command","id":"_command","isPrivate":true},{"ref":{"name":"bool","refId":"dart.core/bool"},"initializedField":{"name":"_repeating","refId":"dart_web_toolkit_scheduler/Task/_repeating"},"kind":"param","name":"_repeating","id":"_repeating","isPrivate":true}],"isPrivate":true,"line":"23"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/scheduler/impl/task.dart","line":"10"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"Caleer","id":"Caleer","children":[{"ref":{"name":"TimeoutHandler","refId":"dart.dom.html/TimeoutHandler"},"kind":"variable","name":"timeoutHandler","id":"timeoutHandler","line":"366"},{"ref":{"name":"Timer","refId":"dart.async/Timer"},"kind":"variable","name":"handle","id":"handle","line":"368"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/scheduler/impl/scheduler_impl.dart","line":"365"},{"superclass":{"name":"Scheduler","refId":"dart_web_toolkit_scheduler/Scheduler"},"kind":"class","name":"SchedulerImpl","id":"SchedulerImpl","comment":"\nThis is used by Scheduler to collaborate with Impl in order to have\nFinallyCommands executed.\n","children":[{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"Task","refId":"dart_web_toolkit_scheduler/Task"}]},"isStatic":true,"kind":"method","name":"_push","id":"_push2()","comment":"\nProvides lazy-init pattern for the task queues.\n","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"Task","refId":"dart_web_toolkit_scheduler/Task"}]},"kind":"param","name":"queue","id":"queue"},{"ref":{"name":"Task","refId":"dart_web_toolkit_scheduler/Task"},"kind":"param","name":"task","id":"task"}],"isPrivate":true,"line":"31"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"Task","refId":"dart_web_toolkit_scheduler/Task"}]},"isStatic":true,"kind":"method","name":"_createQueue","id":"_createQueue0()","comment":"\nExtract boilerplate code.\n","isPrivate":true,"line":"42"},{"returnType":{"name":"void","refId":"void"},"isStatic":true,"kind":"method","name":"_scheduleFixedDelayImpl","id":"_scheduleFixedDelayImpl2()","children":[{"ref":{"name":"RepeatingCommand","refId":"dart_web_toolkit_scheduler/RepeatingCommand"},"kind":"param","name":"cmd","id":"cmd"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"delayMs","id":"delayMs"}],"isPrivate":true,"line":"46"},{"returnType":{"name":"void","refId":"void"},"isStatic":true,"kind":"method","name":"_scheduleFixedPeriodImpl","id":"_scheduleFixedPeriodImpl2()","children":[{"ref":{"name":"RepeatingCommand","refId":"dart_web_toolkit_scheduler/RepeatingCommand"},"kind":"param","name":"cmd","id":"cmd"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"delayMs","id":"delayMs"}],"isPrivate":true,"line":"56"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"maybeSchedulePostEventPumpCommands","id":"maybeSchedulePostEventPumpCommands0()","line":"116"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"scheduleDeferred","id":"scheduleDeferred1()","comment":"\nA deferred command is executed after the browser event loop returns.\n","children":[{"ref":{"name":"ScheduledCommand","refId":"dart_web_toolkit_scheduler/ScheduledCommand"},"kind":"param","name":"cmd","id":"cmd"}],"line":"139"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"scheduleRepeatingEntry","id":"scheduleRepeatingEntry1()","comment":"\nAn \"entry\" command will be executed before GWT-generated code is invoked by\nthe browser's event loop. The {@link RepeatingCommand} will be called once\nper entry from the event loop until <code>false</code> is returned. This\ntype of command is appropriate for instrumentation or code that needs to\nknow when \"something happens.\"\n<p>\nIf an entry command schedules another entry command, the second command\nwill be executed before control flow continues to the GWT-generated code.\n","children":[{"ref":{"name":"RepeatingCommand","refId":"dart_web_toolkit_scheduler/RepeatingCommand"},"kind":"param","name":"cmd","id":"cmd"}],"line":"154"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"scheduleEntry","id":"scheduleEntry1()","comment":"\nAn \"entry\" command will be executed before GWT-generated code is invoked by\nthe browser's event loop. This type of command is appropriate for code that\nneeds to know when \"something happens.\"\n<p>\nIf an entry command schedules another entry command, the second command\nwill be executed before control flow continues to the GWT-generated code.\n","children":[{"ref":{"name":"ScheduledCommand","refId":"dart_web_toolkit_scheduler/ScheduledCommand"},"kind":"param","name":"cmd","id":"cmd"}],"line":"166"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"scheduleRepeatingFinally","id":"scheduleRepeatingFinally1()","comment":"\nA \"finally\" command will be executed before GWT-generated code returns\ncontrol to the browser's event loop. The {@link RepeatingCommand#execute()}\nmethod will be called once per exit to the event loop until\n<code>false</code> is returned. This type of command is appropriate for\ninstrumentation or cleanup code.\n<p>\nIf a finally command schedules another finally command, the second command\nwill be executed before control flow returns to the browser.\n","children":[{"ref":{"name":"RepeatingCommand","refId":"dart_web_toolkit_scheduler/RepeatingCommand"},"kind":"param","name":"cmd","id":"cmd"}],"line":"180"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"scheduleFinally","id":"scheduleFinally1()","comment":"\nA \"finally\" command will be executed before GWT-generated code returns\ncontrol to the browser's event loop. This type of command is used to\naggregate small amounts of work before performing a non-recurring,\nheavyweight operation.\n<p>\nIf a finally command schedules another finally command, the second command\nwill be executed before control flow returns to the browser.\n<p>\nConsider the following:\n\n<pre>\ntry {\n  nativeEventCallback(); // Calls scheduleFinally one or more times\n} finally {\n  executeFinallyCommands();\n}\n</pre>\n\n@see com.google.gwt.dom.client.StyleInjector\n","children":[{"ref":{"name":"ScheduledCommand","refId":"dart_web_toolkit_scheduler/ScheduledCommand"},"kind":"param","name":"cmd","id":"cmd"}],"line":"205"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"scheduleFixedDelay","id":"scheduleFixedDelay2()","comment":"\nSchedules a repeating command that is scheduled with a constant delay. That\nis, the next invocation of the command will be scheduled for\n<code>delayMs</code> milliseconds after the last invocation completes.\n<p>\nFor example, assume that a command takes 30ms to run and a 100ms delay is\nprovided. The second invocation of the command will occur at 130ms after\nthe first invocation starts.\n\n@param cmd the command to execute\n@param delayMs the amount of time to wait after one invocation ends before\n         the next invocation\n","children":[{"ref":{"name":"RepeatingCommand","refId":"dart_web_toolkit_scheduler/RepeatingCommand"},"kind":"param","name":"cmd","id":"cmd"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"delayMs","id":"delayMs"}],"line":"222"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"scheduleFixedPeriod","id":"scheduleFixedPeriod2()","comment":"\nSchedules a repeating command that is scheduled with a constant\nperiodicity. That is, the command will be invoked every\n<code>delayMs</code> milliseconds, regardless of how long the previous\ninvocation took to complete.\n\n@param cmd the command to execute\n@param delayMs the period with which the command is executed\n","children":[{"ref":{"name":"RepeatingCommand","refId":"dart_web_toolkit_scheduler/RepeatingCommand"},"kind":"param","name":"cmd","id":"cmd"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"delayMs","id":"delayMs"}],"line":"235"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"scheduleIncremental","id":"scheduleIncremental1()","comment":"\nSchedules a repeating command that performs incremental work. This type of\ncommand is encouraged for long-running processes that perform computation\nor that manipulate the DOM. The commands in this queue are invoked many\ntimes in rapid succession and are then deferred to allow the browser to\nprocess its event queue.\n\n@param cmd the command to execute\n","children":[{"ref":{"name":"RepeatingCommand","refId":"dart_web_toolkit_scheduler/RepeatingCommand"},"kind":"param","name":"cmd","id":"cmd"}],"line":"248"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"Task","refId":"dart_web_toolkit_scheduler/Task"}]},"isStatic":true,"kind":"method","name":"_runRepeatingTasks","id":"_runRepeatingTasks1()","comment":"\nExecute a list of Tasks that hold RepeatingCommands.\n\n@return A replacement array that is possibly a shorter copy of\n        <code>tasks</code>\n","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"Task","refId":"dart_web_toolkit_scheduler/Task"}]},"kind":"param","name":"tasks","id":"tasks"}],"isPrivate":true,"line":"261"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"Task","refId":"dart_web_toolkit_scheduler/Task"}]},"isStatic":true,"kind":"method","name":"_runScheduledTasks","id":"_runScheduledTasks2()","comment":"\nExecute a list of Tasks that hold both ScheduledCommands and\nRepeatingCommands. Any RepeatingCommands in the <code>tasks</code> queue\nthat want to repeat will be pushed onto the <code>rescheduled</code> queue.\nThe contents of <code>tasks</code> may not be altered while this method is\nexecuting.\n\n@return <code>rescheduled</code> or a newly-allocated array if\n        <code>rescheduled</code> is null.\n","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"Task","refId":"dart_web_toolkit_scheduler/Task"}]},"kind":"param","name":"tasks","id":"tasks"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"Task","refId":"dart_web_toolkit_scheduler/Task"}]},"kind":"param","name":"rescheduled","id":"rescheduled"}],"isPrivate":true,"line":"314"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"isWorkQueued","id":"isWorkQueued0()","line":"340"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"flushPostEventPumpCommands","id":"flushPostEventPumpCommands0()","line":"347"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"_FLUSHER_DELAY","id":"_FLUSHER_DELAY","comment":"\nThe delay between flushing the task queues.\n","isPrivate":true,"line":"15"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"_RESCUE_DELAY","id":"_RESCUE_DELAY","comment":"\nThe delay between checking up on SSW problems.\n","isPrivate":true,"line":"20"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"_TIME_SLICE","id":"_TIME_SLICE","comment":"\nThe amount of time that we're willing to spend executing\nIncrementalCommands.\n","isPrivate":true,"line":"26"},{"ref":{"name":"SchedulerImpl","refId":"dart_web_toolkit_scheduler/SchedulerImpl"},"isStatic":true,"kind":"variable","name":"_instance","id":"_instance","isPrivate":true,"line":"71"},{"ref":{"name":"Flusher","refId":"dart_web_toolkit_scheduler/Flusher"},"kind":"variable","name":"flusher","id":"flusher","comment":"\nA RepeatingCommand that calls flushPostEventPumpCommands(). It repeats if\nthere are any outstanding deferred or incremental commands.\n","line":"88"},{"ref":{"name":"Rescuer","refId":"dart_web_toolkit_scheduler/Rescuer"},"kind":"variable","name":"rescue","id":"rescue","comment":"\nThis provides some backup for the main flusher task in case it gets shut\ndown by a slow-script warning.\n","line":"94"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"Task","refId":"dart_web_toolkit_scheduler/Task"}]},"kind":"variable","name":"deferredCommands","id":"deferredCommands","line":"102"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"Task","refId":"dart_web_toolkit_scheduler/Task"}]},"kind":"variable","name":"entryCommands","id":"entryCommands","line":"103"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"Task","refId":"dart_web_toolkit_scheduler/Task"}]},"kind":"variable","name":"finallyCommands","id":"finallyCommands","line":"104"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"Task","refId":"dart_web_toolkit_scheduler/Task"}]},"kind":"variable","name":"incrementalCommands","id":"incrementalCommands","line":"105"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"_flushRunning","id":"_flushRunning","isPrivate":true,"line":"111"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"_shouldBeRunning","id":"_shouldBeRunning","isPrivate":true,"line":"112"},{"returnType":{"name":"SchedulerImpl","refId":"dart_web_toolkit_scheduler/SchedulerImpl"},"kind":"constructor","name":"Instance","id":"Instance0()","comment":"\nUse a GWT.create() here to make it simple to hijack the default\nimplementation.\n","line":"77"},{"kind":"constructor","name":"","id":"0()","line":"114"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/scheduler/impl/scheduler_impl.dart","line":"10"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"interfaces":[{"name":"RepeatingCommand","refId":"dart_web_toolkit_scheduler/RepeatingCommand"}],"kind":"class","name":"RepeatingCommandAdapter","id":"RepeatingCommandAdapter","comment":"\nAdapter of RepeatingCommand calling function in execute method\npassed through constructor and return result.\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"execute","id":"execute0()","comment":"\nReturns true if the RepeatingCommand should be invoked again.\n","line":"179"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"variable","name":"_function","id":"_function","isPrivate":true,"line":"172"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"initializedField":{"name":"_function","refId":"dart_web_toolkit_scheduler/RepeatingCommandAdapter/_function"},"kind":"param","name":"_function","id":"_function","isPrivate":true}],"line":"174"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/scheduler/scheduler.dart","line":"170"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"RepeatingCommand","id":"RepeatingCommand","comment":"\nGeneral-purpose Command interface for tasks that repeat.\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"execute","id":"execute0()","comment":"\nReturns true if the RepeatingCommand should be invoked again.\n","line":"163"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/scheduler/scheduler.dart","line":"159"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"interfaces":[{"name":"ScheduledCommand","refId":"dart_web_toolkit_scheduler/ScheduledCommand"}],"kind":"class","name":"ScheduledCommandAdapter","id":"ScheduledCommandAdapter","comment":"\nAdapter of ScheduledCommand calling function in execute method\npassed through constructor.\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"execute","id":"execute0()","comment":"\nInvokes the command.\n","line":"151"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"variable","name":"_function","id":"_function","isPrivate":true,"line":"144"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"initializedField":{"name":"_function","refId":"dart_web_toolkit_scheduler/ScheduledCommandAdapter/_function"},"kind":"param","name":"_function","id":"_function","isPrivate":true}],"line":"146"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/scheduler/scheduler.dart","line":"142"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"ScheduledCommand","id":"ScheduledCommand","comment":"\nGeneral-purpose Command interface.\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"execute","id":"execute0()","comment":"\nInvokes the command.\n","line":"135"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/scheduler/scheduler.dart","line":"131"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Scheduler","id":"Scheduler","comment":"\nThis class provides low-level task scheduling primitives. Any exceptions\nthrown by the command objects executed by the scheduler will be passed to the\n{@link GWT.UncaughtExceptionHandler} if one is installed.\n\n<p>\nNOTE: If you are using a timer to schedule a UI animation, use\n{@link com.google.gwt.animation.client.AnimationScheduler} instead. The\nbrowser can optimize your animation for maximum performance.\n</p>\n\n@see com.google.gwt.core.client.testing.StubScheduler\n","children":[{"returnType":{"name":"Scheduler","refId":"dart_web_toolkit_scheduler/Scheduler"},"isStatic":true,"kind":"method","name":"get","id":"get0()","comment":"\nReturns the default implementation of the Scheduler API.\n","line":"24"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"scheduleDeferred","id":"scheduleDeferred1()","comment":"\nA deferred command is executed after the browser event loop returns.\n","children":[{"ref":{"name":"ScheduledCommand","refId":"dart_web_toolkit_scheduler/ScheduledCommand"},"kind":"param","name":"cmd","id":"cmd"}],"line":"31"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"scheduleRepeatingEntry","id":"scheduleRepeatingEntry1()","comment":"\nAn \"entry\" command will be executed before GWT-generated code is invoked by\nthe browser's event loop. The {@link RepeatingCommand} will be called once\nper entry from the event loop until <code>false</code> is returned. This\ntype of command is appropriate for instrumentation or code that needs to\nknow when \"something happens.\"\n<p>\nIf an entry command schedules another entry command, the second command\nwill be executed before control flow continues to the GWT-generated code.\n","children":[{"ref":{"name":"RepeatingCommand","refId":"dart_web_toolkit_scheduler/RepeatingCommand"},"kind":"param","name":"cmd","id":"cmd"}],"line":"43"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"scheduleEntry","id":"scheduleEntry1()","comment":"\nAn \"entry\" command will be executed before GWT-generated code is invoked by\nthe browser's event loop. This type of command is appropriate for code that\nneeds to know when \"something happens.\"\n<p>\nIf an entry command schedules another entry command, the second command\nwill be executed before control flow continues to the GWT-generated code.\n","children":[{"ref":{"name":"ScheduledCommand","refId":"dart_web_toolkit_scheduler/ScheduledCommand"},"kind":"param","name":"cmd","id":"cmd"}],"line":"53"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"scheduleRepeatingFinally","id":"scheduleRepeatingFinally1()","comment":"\nA \"finally\" command will be executed before GWT-generated code returns\ncontrol to the browser's event loop. The {@link RepeatingCommand#execute()}\nmethod will be called once per exit to the event loop until\n<code>false</code> is returned. This type of command is appropriate for\ninstrumentation or cleanup code.\n<p>\nIf a finally command schedules another finally command, the second command\nwill be executed before control flow returns to the browser.\n","children":[{"ref":{"name":"RepeatingCommand","refId":"dart_web_toolkit_scheduler/RepeatingCommand"},"kind":"param","name":"cmd","id":"cmd"}],"line":"65"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"scheduleFinally","id":"scheduleFinally1()","comment":"\nA \"finally\" command will be executed before GWT-generated code returns\ncontrol to the browser's event loop. This type of command is used to\naggregate small amounts of work before performing a non-recurring,\nheavyweight operation.\n<p>\nIf a finally command schedules another finally command, the second command\nwill be executed before control flow returns to the browser.\n<p>\nConsider the following:\n\n<pre>\ntry {\n  nativeEventCallback(); // Calls scheduleFinally one or more times\n} finally {\n  executeFinallyCommands();\n}\n</pre>\n\n@see com.google.gwt.dom.client.StyleInjector\n","children":[{"ref":{"name":"ScheduledCommand","refId":"dart_web_toolkit_scheduler/ScheduledCommand"},"kind":"param","name":"cmd","id":"cmd"}],"line":"88"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"scheduleFixedDelay","id":"scheduleFixedDelay2()","comment":"\nSchedules a repeating command that is scheduled with a constant delay. That\nis, the next invocation of the command will be scheduled for\n<code>delayMs</code> milliseconds after the last invocation completes.\n<p>\nFor example, assume that a command takes 30ms to run and a 100ms delay is\nprovided. The second invocation of the command will occur at 130ms after\nthe first invocation starts.\n\n@param cmd the command to execute\n@param delayMs the amount of time to wait after one invocation ends before\n         the next invocation\n","children":[{"ref":{"name":"RepeatingCommand","refId":"dart_web_toolkit_scheduler/RepeatingCommand"},"kind":"param","name":"cmd","id":"cmd"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"delayMs","id":"delayMs"}],"line":"103"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"scheduleFixedPeriod","id":"scheduleFixedPeriod2()","comment":"\nSchedules a repeating command that is scheduled with a constant\nperiodicity. That is, the command will be invoked every\n<code>delayMs</code> milliseconds, regardless of how long the previous\ninvocation took to complete.\n\n@param cmd the command to execute\n@param delayMs the period with which the command is executed\n","children":[{"ref":{"name":"RepeatingCommand","refId":"dart_web_toolkit_scheduler/RepeatingCommand"},"kind":"param","name":"cmd","id":"cmd"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"delayMs","id":"delayMs"}],"line":"114"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"scheduleIncremental","id":"scheduleIncremental1()","comment":"\nSchedules a repeating command that performs incremental work. This type of\ncommand is encouraged for long-running processes that perform computation\nor that manipulate the DOM. The commands in this queue are invoked many\ntimes in rapid succession and are then deferred to allow the browser to\nprocess its event queue.\n\n@param cmd the command to execute\n","children":[{"ref":{"name":"RepeatingCommand","refId":"dart_web_toolkit_scheduler/RepeatingCommand"},"kind":"param","name":"cmd","id":"cmd"}],"line":"125"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/scheduler/scheduler.dart","line":"19"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/scheduler.dart","line":"7"}
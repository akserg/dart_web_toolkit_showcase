{"dependencies":[{"kind":"library","name":"dart:core","id":"dart.core","comment":"\n\nBuilt-in types, collections,\nand other core functionality for every Dart program.\n\nThis library is automatically imported.\n\nSome classes in this library,\nsuch as [String] and [num],\nsupport Dart's built-in data types.\nOther classes, such as [List] and [Map], provide data structures\nfor managing collections of objects.\nAnd still other classes represent commonly used types of data\nsuch as URIs, dates and times, and errors.\n\n## Numbers and booleans\n\n[int] and [double] provide support for Dart's built-in numerical data types:\nintegers and double-precision floating point numbers, respectively.\nAn object of type [bool] is either true or false.\nVariables of these types can be constructed from literals:\n\n    int meaningOfLife = 42;\n    double valueOfPi  = 3.141592;\n    bool visible      = true;\n\n## Strings and regular expressions\n\nA [String] is immutable and represents a sequence of characters.\n\n    String shakespeareQuote = \"All the world's a stage, ...\";\n\n[StringBuffer] provides a way to construct strings efficiently.\n\n    StringBuffer moreShakespeare = new StringBuffer();\n    moreShakespeare.write('And all the men and women ');\n    moreShakespeare.write('merely players; ...');\n\nThe String and StringBuffer classes implement string concatenation,\ninterpolation, and other string manipulation features.\n\n    String philosophy = 'Live on ';\n    String get palindrome => philosophy + philosophy.split('').reversed.join();\n\n[RegExp] implements Dart regular expressions,\nwhich provide a grammar for matching patterns within text.\nFor example, here's a regular expression that matches\na string of one or more digits:\n\n    var numbers = new RegExp(r'\\d+');\n\nDart regular expressions have the same syntax and semantics as\nJavaScript regular expressions. See\n<http://ecma-international.org/ecma-262/5.1/#sec-15.10>\nfor the specification of JavaScript regular expressions.\n\n## Collections\n\nThe dart:core library provides basic collections,\nsuch as [List], [Map], and [Set].\n\nA List is an ordered collection of objects, with a length.\nLists are sometimes called arrays.\nUse a List when you need to access objects by index.\n\n    List superheroes = [ 'Batman', 'Superman', 'Harry Potter' ];\n\nA Set is an unordered collection of unique objects.\nYou cannot get an item by index (position).\nAdding a duplicate item has no effect.\n\n    Set villians = new Set();\n    villians.add('Joker');\n    villians.addAll( ['Lex Luther', 'Voldemort'] );\n\nA Map is an unordered collection of key-value pairs.\nMaps are sometimes called associative arrays because\nmaps associate a key to some value for easy retrieval.\nKeys are unique.\nUse a Map when you need to access objects\nby a unique identifier.\n\n    Map sidekicks = { 'Batman': 'Robin',\n                      'Superman': 'Lois Lane',\n                      'Harry Potter': 'Ron and Hermione' };\n\nIn addition to these classes,\ndart:core contains [Iterable],\nan interface that defines functionality\ncommon in collections of objects.\nExamples include the ability\nto run a function on each element in the collection,\nto apply a test to each element, \nto retrieve an object, and to determine length.\n\nIterable is implemented by List and Set,\nand used by Map for its keys and values.\n\nFor other kinds of collections, check out the\n[dart:collection](#dart-collection) library.\n\n## Date and time\n\nUse [DateTime] to represent a point in time\nand [Duration] to represent a span of time.\n\nYou can create DateTime objects with constructors\nor by parsing a correctly formatted string.\n\n    DateTime now = new DateTime.now();\n    DateTime berlinWallFell = new DateTime(1989, 11, 9);\n    DateTime moonLanding = DateTime.parse(\"1969-07-20\");\n\nCreate a Duration object specifying the individual time units.\n\n    Duration timeRemaining = new Duration(hours:56, minutes:14);\n\nIn addition to DateTime and Duration,\ndart:core contains the [Stopwatch] class for measuring elapsed time.\n    \n## Uri\n\nA [Uri] object represents a uniform resource identifier,\nwhich identifies a resource on the web.\n\n    Uri dartlang = Uri.parse('http://dartlang.org/');\n    \n## Errors\n\nThe [Error] class represents the occurrence of an error\nduring runtime.\nSubclasses of this class represent specific kinds of errors.\n\n## Other documentation\n\nFor more information about how to use the built-in types, refer to\n[Built-in Types](http://www.dartlang.org/docs/dart-up-and-running/contents/ch02.html#built-in-types)\nin Chapter 2 of\n[Dart: Up and Running](http://www.dartlang.org/docs/dart-up-and-running/).\n\nAlso, see\n[dart:core - Numbers, Collections, Strings, and More](http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-dartcore---strings-collections-and-more)\nfor more coverage of classes in this package.\n\nThe \n[Dart Language Specification](http://www.dartlang.org/docs/spec/)\nprovides technical details.\n","children":[{"kind":"class","name":"Object","id":"Object","comment":"\nThe base class for all Dart objects.\n\nBecause Object is the root of the Dart class hierarchy,\nevery other Dart class is a subclass of Object.\n\nWhen you define a class, you should override [toString]\nto return a string describing an instance of that class.\nYou might also need to define [hashCode] and [==], as described in the\n[Implementing map keys]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-implementing-map-keys)\nsection of the [library tour]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html).\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"==","id":"==1()","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nOverride this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:\n\n * Total: It must return a boolean for all arguments. It should never throw\n   or return `null`.\n\n * Reflexive: For all objects `o`, `o == o` must be true.\n\n * Symmetric: For all objects `o1` and `o2`, `o1 == o2` and `o2 == o1` must\n   either both be true, or both be false.\n\n * Transitive: For all objects `o1`, `o2`, and `o3`, if `o1 == o2` and\n   `o2 == o3` are true, then `o1 == o3` must be true.\n\nThe method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","children":[{"kind":"param","name":"other","id":"other"}],"line":"59"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","comment":"\nReturns a string representation of this object.\n","line":"78"},{"kind":"method","name":"noSuchMethod","id":"noSuchMethod1()","comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","children":[{"ref":{"name":"Invocation","refId":"dart.core/Invocation"},"kind":"param","name":"invocation","id":"invocation"}],"line":"90"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"hashCode","id":"hashCode","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","line":"73"},{"ref":{"name":"Type","refId":"dart.core/Type"},"kind":"property","name":"runtimeType","id":"runtimeType","comment":"\nA representation of the runtime type of the object.\n","line":"95"},{"kind":"constructor","name":"","id":"0()","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","line":"29"}],"uri":"dart-sdk/lib/core/object.dart","line":"21"}],"uri":"dart-sdk/lib/core/core.dart","line":"153"},{"kind":"library","id":"dart_web_toolkit_animation","comment":"\nDart Web Toolkit Animation library.\n","children":[{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Animation","id":"Animation","comment":"\nAn {@link Animation} is a continuous event that updates progressively over\ntime at a non-fixed frame rate.\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"cancel","id":"cancel0()","comment":"\nImmediately cancel this animation. If the animation is running or is\nscheduled to run, {@link #onCancel()} will be called.\n","line":"77"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"run","id":"run3()","comment":"\nRun this animation at the given startTime. If the startTime has already\npassed, the animation will run synchronously as if it started at the\nspecified start time. If the animation is already running, it will be\ncanceled first.\n<p>\nIf the element is not <code>null</code>, the {@link #onUpdate(double)}\nmethod might be called only if the element may be visible (generally left\nat the appreciation of the browser). Otherwise, it will be called\nunconditionally.\n\n@param duration the duration of the animation in milliseconds\n@param startTime the synchronized start time in milliseconds\n@param element the element that visually bounds the entire animation\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"duration","id":"duration"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"null","isOptional":true,"isNamed":true,"kind":"param","name":"startTime","id":"startTime"},{"ref":{"name":"Element","refId":"dart.dom.html/Element"},"defaultValue":"null","isOptional":true,"isNamed":true,"kind":"param","name":"element","id":"element"}],"line":"158"},{"returnType":{"name":"double","refId":"dart.core/double"},"kind":"method","name":"interpolate","id":"interpolate1()","comment":"\nInterpolate the linear progress into a more natural easing function.\n\nDepending on the {@link Animation}, the return value of this method can be\nless than 0.0 or greater than 1.0.\n\n@param progress the linear progress, between 0.0 and 1.0\n@return the interpolated progress\n","children":[{"ref":{"name":"double","refId":"dart.core/double"},"kind":"param","name":"progress","id":"progress"}],"line":"187"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"onCancel","id":"onCancel0()","comment":"\nCalled immediately after the animation is canceled. The default\nimplementation of this method calls {@link #onComplete()} only if the\nanimation has actually started running.\n","line":"196"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"onComplete","id":"onComplete0()","comment":"\nCalled immediately after the animation completes.\n","line":"205"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"onStart","id":"onStart0()","comment":"\nCalled immediately before the animation starts.\n","line":"212"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"onUpdate","id":"onUpdate1()","comment":"\nCalled when the animation should be updated.\n\nThe value of progress is between 0.0 and 1.0 (inclusive) (unless you\noverride the {@link #interpolate(double)} method to provide a wider range\nof values). You can override {@link #onStart()} and {@link #onComplete()}\nto perform setup and tear down procedures.\n\n@param progress a double, normally between 0.0 and 1.0 (inclusive)\n","children":[{"ref":{"name":"double","refId":"dart.core/double"},"kind":"param","name":"progress","id":"progress"}],"line":"226"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"isRunning","id":"isRunning1()","comment":"\nCheck if the specified run ID is still being run.\n\n@param curRunId the current run ID to check\n@return true if running, false if canceled or restarted\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"curRunId","id":"curRunId"}],"line":"234"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"update","id":"update1()","comment":"\nUpdate the {@link Animation}.\n\n@param curTime the current time\n@return true if the animation should run again, false if it is complete\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"curTime","id":"curTime"}],"line":"244"},{"ref":{"name":"AnimationCallback","refId":"dart_web_toolkit_animation/AnimationCallback"},"kind":"variable","name":"callback","id":"callback","line":"12"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"duration","id":"duration","comment":"\nThe duration of the {@link Animation} in milliseconds.\n","line":"18"},{"ref":{"name":"Element","refId":"dart.dom.html/Element"},"kind":"variable","name":"element","id":"element","comment":"\nThe element being animated.\n","line":"23"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"running","id":"running","comment":"\nIs the animation running, even if it hasn't started yet.\n","line":"28"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"isStarted","id":"isStarted","comment":"\nHas the {@link Animation} actually started.\n","line":"33"},{"ref":{"name":"AnimationHandle","refId":"dart_web_toolkit_animation/AnimationHandle"},"kind":"variable","name":"requestHandle","id":"requestHandle","comment":"\nThe ID of the pending animation request.\n","line":"38"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"runId","id":"runId","comment":"\nThe unique ID of the current run. Used to handle cases where an animation\nis restarted within an execution block.\n","line":"44"},{"ref":{"name":"AnimationScheduler","refId":"dart_web_toolkit_animation/AnimationScheduler"},"kind":"variable","name":"scheduler","id":"scheduler","line":"46"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"startTime","id":"startTime","comment":"\nThe start time of the {@link Animation}.\n","line":"51"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"wasStarted","id":"wasStarted","comment":"\nDid the animation start before {@link #cancel()} was called.\n","line":"56"},{"kind":"constructor","name":"","id":"1()","comment":"\nConstruct a new {@link AnimationScheduler} using the specified scheduler to\nsheduler request frames.\n\n@param scheduler an {@link AnimationScheduler} instance\n","children":[{"ref":{"name":"AnimationScheduler","refId":"dart_web_toolkit_animation/AnimationScheduler"},"defaultValue":"null","isOptional":true,"kind":"param","name":"scheduler","id":"scheduler"}],"line":"64"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/animation/animation.dart","line":"10"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/animation.dart","line":"7"},{"kind":"library","id":"dart_web_toolkit_util","comment":"\nDart Web Toolkit Util library.\n","children":[{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Enum","id":"Enum","comment":"\nEmulation of Java Enum class.\n\nExample:\n\nclass Meter<int> extends Enum<int> {\n\n const Meter(int val) : super (val);\n\n static const Meter HIGH = const Meter(100);\n static const Meter MIDDLE = const Meter(50);\n static const Meter LOW = const Meter(10);\n}\n\nand usage:\n\nassert (Meter.HIGH, 100);\nassert (Meter.HIGH is Meter);\n","children":[{"ref":{"name":"T","refId":"dart_web_toolkit_util/Enum/T"},"kind":"property","name":"value","id":"value","line":"31"},{"ref":{"name":"T","refId":"dart_web_toolkit_util/Enum/T"},"isFinal":true,"kind":"variable","name":"_value","id":"_value","isPrivate":true,"line":"27"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"T","refId":"dart_web_toolkit_util/Enum/T"},"initializedField":{"name":"_value","refId":"dart_web_toolkit_util/Enum/_value"},"kind":"param","name":"_value","id":"_value","isPrivate":true}],"line":"29"},{"kind":"typeparam","name":"T","id":"T"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/util/enum.dart","line":"25"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/util.dart","line":"7"}],"kind":"library","id":"dart_web_toolkit_layout","comment":"\nDart Web Toolkit Layout library.\n","children":[{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"LayoutImpl","id":"LayoutImpl","comment":"\nDefault implementation, which works with all browsers except for IE6. It uses\nonly the \"top\", \"left\", \"bottom\", \"right\", \"width\", and \"height\" CSS\nproperties.\n\nNote: This implementation class has state, so {@link Layout} must create a\nnew instance for each layout-parent.\n","children":[{"returnType":{"name":"DivElement","refId":"dart.dom.html/DivElement"},"isStatic":true,"kind":"method","name":"createRuler","id":"createRuler2()","children":[{"ref":{"name":"Unit","refId":"dart_web_toolkit_util/Unit"},"kind":"param","name":"widthUnit","id":"widthUnit"},{"ref":{"name":"Unit","refId":"dart_web_toolkit_util/Unit"},"kind":"param","name":"heightUnit","id":"heightUnit"}],"line":"28"},{"returnType":{"name":"Element","refId":"dart.dom.html/Element"},"kind":"method","name":"attachChild","id":"attachChild3()","children":[{"ref":{"name":"Element","refId":"dart.dom.html/Element"},"kind":"param","name":"parent","id":"parent"},{"ref":{"name":"Element","refId":"dart.dom.html/Element"},"kind":"param","name":"child","id":"child"},{"ref":{"name":"Element","refId":"dart.dom.html/Element"},"kind":"param","name":"before","id":"before"}],"line":"50"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"fillParent","id":"fillParent1()","children":[{"ref":{"name":"Element","refId":"dart.dom.html/Element"},"kind":"param","name":"elem","id":"elem"}],"line":"73"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"finalizeLayout","id":"finalizeLayout1()","comment":"\n@param parent the parent element\n","children":[{"ref":{"name":"Element","refId":"dart.dom.html/Element"},"kind":"param","name":"parent","id":"parent"}],"line":"84"},{"returnType":{"name":"double","refId":"dart.core/double"},"kind":"method","name":"getUnitSizeInPixels","id":"getUnitSizeInPixels3()","children":[{"ref":{"name":"Element","refId":"dart.dom.html/Element"},"kind":"param","name":"parent","id":"parent"},{"ref":{"name":"Unit","refId":"dart_web_toolkit_util/Unit"},"kind":"param","name":"unit","id":"unit"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"vertical","id":"vertical"}],"line":"87"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"initParent","id":"initParent1()","children":[{"ref":{"name":"Element","refId":"dart.dom.html/Element"},"kind":"param","name":"parent","id":"parent"}],"line":"116"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"layout","id":"layout1()","children":[{"ref":{"name":"Layer","refId":"dart_web_toolkit_layout/Layer"},"kind":"param","name":"layer","id":"layer"}],"line":"121"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"onAttach","id":"onAttach1()","children":[{"ref":{"name":"Element","refId":"dart.dom.html/Element"},"kind":"param","name":"parent","id":"parent"}],"line":"166"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"onDetach","id":"onDetach1()","children":[{"ref":{"name":"Element","refId":"dart.dom.html/Element"},"kind":"param","name":"parent","id":"parent"}],"line":"170"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"removeChild","id":"removeChild2()","children":[{"ref":{"name":"Element","refId":"dart.dom.html/Element"},"kind":"param","name":"container","id":"container"},{"ref":{"name":"Element","refId":"dart.dom.html/Element"},"kind":"param","name":"child","id":"child"}],"line":"174"},{"ref":{"name":"DivElement","refId":"dart.dom.html/DivElement"},"isStatic":true,"kind":"variable","name":"fixedRuler","id":"fixedRuler","line":"16"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isStatic":true,"kind":"variable","name":"_initialised","id":"_initialised","isPrivate":true,"line":"17"},{"ref":{"name":"DivElement","refId":"dart.dom.html/DivElement"},"kind":"variable","name":"relativeRuler","id":"relativeRuler","line":"48"},{"returnType":{"name":"LayoutImpl","refId":"dart_web_toolkit_layout/LayoutImpl"},"kind":"constructor","name":"browserDependent","id":"browserDependent0()","line":"19"},{"kind":"constructor","name":"_internal","id":"_internal0()","isPrivate":true,"line":"46"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/layout/impl/layout_impl.dart","line":"14"},{"superclass":{"name":"Animation","refId":"dart_web_toolkit_animation/Animation"},"kind":"class","name":"LayoutAnimation","id":"LayoutAnimation","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"onCancel","id":"onCancel0()","line":"613"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"onComplete","id":"onComplete0()","line":"617"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"onUpdate","id":"onUpdate1()","children":[{"ref":{"name":"double","refId":"dart.core/double"},"kind":"param","name":"progress","id":"progress"}],"line":"625"},{"ref":{"name":"Layout","refId":"dart_web_toolkit_layout/Layout"},"kind":"variable","name":"_layout","id":"_layout","isPrivate":true,"line":"608"},{"ref":{"name":"LayoutAnimationCallback","refId":"dart_web_toolkit_layout/LayoutAnimationCallback"},"kind":"variable","name":"_callback","id":"_callback","isPrivate":true,"line":"609"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"Layout","refId":"dart_web_toolkit_layout/Layout"},"initializedField":{"name":"_layout","refId":"dart_web_toolkit_layout/LayoutAnimation/_layout"},"kind":"param","name":"_layout","id":"_layout","isPrivate":true},{"ref":{"name":"LayoutAnimationCallback","refId":"dart_web_toolkit_layout/LayoutAnimationCallback"},"initializedField":{"name":"_callback","refId":"dart_web_toolkit_layout/LayoutAnimation/_callback"},"kind":"param","name":"_callback","id":"_callback","isPrivate":true}],"line":"611"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/layout/layout.dart","line":"606"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"Layer","id":"Layer","comment":"\nThis class is used to set the position and size of child elements.\n\n<p>\nEach child element has three values associated with each axis: {left,\nright, width} on the horizontal axis, and {top, bottom, height} on the\nvertical axis. Precisely two of three values may be set at a time, or the\nsystem will be over- or under-contrained. For this reason, the following\nmethods are provided for setting these values:\n<ul>\n<li>{@link Layout.Layer#setLeftRight}</li>\n<li>{@link Layout.Layer#setLeftWidth}</li>\n<li>{@link Layout.Layer#setRightWidth}</li>\n<li>{@link Layout.Layer#setTopBottom}</li>\n<li>{@link Layout.Layer#setTopHeight}</li>\n<li>{@link Layout.Layer#setBottomHeight}</li>\n</ul>\n</p>\n\n<p>\nBy default, each layer is set to fill the entire parent (i.e., {left, top,\nright, bottom} = {0, 0, 0, 0}).\n</p>\n","children":[{"returnType":{"name":"Element","refId":"dart.dom.html/Element"},"kind":"method","name":"getContainerElement","id":"getContainerElement0()","comment":"\nGets the container element associated with this layer.\n\n<p>\nThis is the element that sits between the parent and child elements. It\nis normally necessary to operate on this element only when you need to\nmodify CSS properties that are not directly modeled by the Layer class.\n</p>\n\n@return the container element\n","line":"456"},{"returnType":{"name":"Object","refId":"dart.core/Object"},"kind":"method","name":"getUserObject","id":"getUserObject0()","comment":"\nGets the user-data associated with this layer.\n\n@return the layer's user-data object\n","line":"465"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setBottomHeight","id":"setBottomHeight4()","comment":"\nSets the layer's bottom and height values.\n\n@param bottom\n@param bottomUnit\n@param height\n@param heightUnit\n","children":[{"ref":{"name":"double","refId":"dart.core/double"},"kind":"param","name":"bottom","id":"bottom"},{"ref":{"name":"Unit","refId":"dart_web_toolkit_util/Unit"},"kind":"param","name":"bottomUnit","id":"bottomUnit"},{"ref":{"name":"double","refId":"dart.core/double"},"kind":"param","name":"height","id":"height"},{"ref":{"name":"Unit","refId":"dart_web_toolkit_util/Unit"},"kind":"param","name":"heightUnit","id":"heightUnit","line":"478"}],"line":"477"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setChildHorizontalPosition","id":"setChildHorizontalPosition1()","comment":"\nSets the child element's horizontal position within the layer.\n\n@param position\n","children":[{"ref":{"name":"Alignment","refId":"dart_web_toolkit_layout/Alignment"},"kind":"param","name":"position","id":"position"}],"line":"492"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setChildVerticalPosition","id":"setChildVerticalPosition1()","comment":"\nSets the child element's vertical position within the layer.\n\n@param position\n","children":[{"ref":{"name":"Alignment","refId":"dart_web_toolkit_layout/Alignment"},"kind":"param","name":"position","id":"position"}],"line":"501"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setLeftRight","id":"setLeftRight4()","comment":"\nSets the layer's left and right values.\n\n@param left\n@param leftUnit\n@param right\n@param rightUnit\n","children":[{"ref":{"name":"double","refId":"dart.core/double"},"kind":"param","name":"left","id":"left"},{"ref":{"name":"Unit","refId":"dart_web_toolkit_util/Unit"},"kind":"param","name":"leftUnit","id":"leftUnit"},{"ref":{"name":"double","refId":"dart.core/double"},"kind":"param","name":"right","id":"right"},{"ref":{"name":"Unit","refId":"dart_web_toolkit_util/Unit"},"kind":"param","name":"rightUnit","id":"rightUnit","line":"514"}],"line":"513"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setLeftWidth","id":"setLeftWidth4()","comment":"\nSets the layer's left and width values.\n\n@param left\n@param leftUnit\n@param width\n@param widthUnit\n","children":[{"ref":{"name":"double","refId":"dart.core/double"},"kind":"param","name":"left","id":"left"},{"ref":{"name":"Unit","refId":"dart_web_toolkit_util/Unit"},"kind":"param","name":"leftUnit","id":"leftUnit"},{"ref":{"name":"double","refId":"dart.core/double"},"kind":"param","name":"width","id":"width"},{"ref":{"name":"Unit","refId":"dart_web_toolkit_util/Unit"},"kind":"param","name":"widthUnit","id":"widthUnit","line":"532"}],"line":"531"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setRightWidth","id":"setRightWidth4()","comment":"\nSets the layer's right and width values.\n\n@param right\n@param rightUnit\n@param width\n@param widthUnit\n","children":[{"ref":{"name":"double","refId":"dart.core/double"},"kind":"param","name":"right","id":"right"},{"ref":{"name":"Unit","refId":"dart_web_toolkit_util/Unit"},"kind":"param","name":"rightUnit","id":"rightUnit"},{"ref":{"name":"double","refId":"dart.core/double"},"kind":"param","name":"width","id":"width"},{"ref":{"name":"Unit","refId":"dart_web_toolkit_util/Unit"},"kind":"param","name":"widthUnit","id":"widthUnit","line":"550"}],"line":"549"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setTopBottom","id":"setTopBottom4()","comment":"\nSets the layer's top and bottom values.\n\n@param top\n@param topUnit\n@param bottom\n@param bottomUnit\n","children":[{"ref":{"name":"double","refId":"dart.core/double"},"kind":"param","name":"top","id":"top"},{"ref":{"name":"Unit","refId":"dart_web_toolkit_util/Unit"},"kind":"param","name":"topUnit","id":"topUnit"},{"ref":{"name":"double","refId":"dart.core/double"},"kind":"param","name":"bottom","id":"bottom"},{"ref":{"name":"Unit","refId":"dart_web_toolkit_util/Unit"},"kind":"param","name":"bottomUnit","id":"bottomUnit","line":"568"}],"line":"567"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setTopHeight","id":"setTopHeight4()","comment":"\nSets the layer's top and height values.\n\n@param top\n@param topUnit\n@param height\n@param heightUnit\n","children":[{"ref":{"name":"double","refId":"dart.core/double"},"kind":"param","name":"top","id":"top"},{"ref":{"name":"Unit","refId":"dart_web_toolkit_util/Unit"},"kind":"param","name":"topUnit","id":"topUnit"},{"ref":{"name":"double","refId":"dart.core/double"},"kind":"param","name":"height","id":"height"},{"ref":{"name":"Unit","refId":"dart_web_toolkit_util/Unit"},"kind":"param","name":"heightUnit","id":"heightUnit","line":"586"}],"line":"585"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setVisible","id":"setVisible1()","comment":"\nSets the layer's visibility.\n\n@param visible\n","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"visible","id":"visible"}],"line":"600"},{"ref":{"name":"Element","refId":"dart.dom.html/Element"},"kind":"variable","name":"container","id":"container","line":"421"},{"ref":{"name":"Element","refId":"dart.dom.html/Element"},"kind":"variable","name":"child","id":"child","line":"421"},{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"variable","name":"userObject","id":"userObject","line":"422"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"setLeft","id":"setLeft","line":"424"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"setRight","id":"setRight","line":"424"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"setTop","id":"setTop","line":"424"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"setBottom","id":"setBottom","line":"424"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"setWidth","id":"setWidth","line":"424"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"setHeight","id":"setHeight","line":"424"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"setTargetLeft","id":"setTargetLeft","line":"425"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"setTargetRight","id":"setTargetRight","line":"425"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"setTargetTop","id":"setTargetTop","line":"425"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"setTargetBottom","id":"setTargetBottom","line":"425"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"setTargetWidth","id":"setTargetWidth","line":"425"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"setTargetHeight","id":"setTargetHeight","line":"425"},{"ref":{"name":"Unit","refId":"dart_web_toolkit_util/Unit"},"kind":"variable","name":"leftUnit","id":"leftUnit","line":"427"},{"ref":{"name":"Unit","refId":"dart_web_toolkit_util/Unit"},"kind":"variable","name":"topUnit","id":"topUnit","line":"427"},{"ref":{"name":"Unit","refId":"dart_web_toolkit_util/Unit"},"kind":"variable","name":"rightUnit","id":"rightUnit","line":"427"},{"ref":{"name":"Unit","refId":"dart_web_toolkit_util/Unit"},"kind":"variable","name":"bottomUnit","id":"bottomUnit","line":"427"},{"ref":{"name":"Unit","refId":"dart_web_toolkit_util/Unit"},"kind":"variable","name":"widthUnit","id":"widthUnit","line":"427"},{"ref":{"name":"Unit","refId":"dart_web_toolkit_util/Unit"},"kind":"variable","name":"heightUnit","id":"heightUnit","line":"427"},{"ref":{"name":"Unit","refId":"dart_web_toolkit_util/Unit"},"kind":"variable","name":"targetLeftUnit","id":"targetLeftUnit","line":"428"},{"ref":{"name":"Unit","refId":"dart_web_toolkit_util/Unit"},"kind":"variable","name":"targetTopUnit","id":"targetTopUnit","line":"428"},{"ref":{"name":"Unit","refId":"dart_web_toolkit_util/Unit"},"kind":"variable","name":"targetRightUnit","id":"targetRightUnit","line":"428"},{"ref":{"name":"Unit","refId":"dart_web_toolkit_util/Unit"},"kind":"variable","name":"targetBottomUnit","id":"targetBottomUnit","line":"428"},{"ref":{"name":"Unit","refId":"dart_web_toolkit_util/Unit"},"kind":"variable","name":"targetWidthUnit","id":"targetWidthUnit","line":"428"},{"ref":{"name":"Unit","refId":"dart_web_toolkit_util/Unit"},"kind":"variable","name":"targetHeightUnit","id":"targetHeightUnit","line":"428"},{"ref":{"name":"double","refId":"dart.core/double"},"kind":"variable","name":"left","id":"left","line":"430"},{"ref":{"name":"double","refId":"dart.core/double"},"kind":"variable","name":"top","id":"top","line":"430"},{"ref":{"name":"double","refId":"dart.core/double"},"kind":"variable","name":"right","id":"right","line":"430"},{"ref":{"name":"double","refId":"dart.core/double"},"kind":"variable","name":"bottom","id":"bottom","line":"430"},{"ref":{"name":"double","refId":"dart.core/double"},"kind":"variable","name":"width","id":"width","line":"430"},{"ref":{"name":"double","refId":"dart.core/double"},"kind":"variable","name":"height","id":"height","line":"430"},{"ref":{"name":"double","refId":"dart.core/double"},"kind":"variable","name":"sourceLeft","id":"sourceLeft","line":"431"},{"ref":{"name":"double","refId":"dart.core/double"},"kind":"variable","name":"sourceTop","id":"sourceTop","line":"431"},{"ref":{"name":"double","refId":"dart.core/double"},"kind":"variable","name":"sourceRight","id":"sourceRight","line":"431"},{"ref":{"name":"double","refId":"dart.core/double"},"kind":"variable","name":"sourceBottom","id":"sourceBottom","line":"431"},{"ref":{"name":"double","refId":"dart.core/double"},"kind":"variable","name":"sourceWidth","id":"sourceWidth","line":"431"},{"ref":{"name":"double","refId":"dart.core/double"},"kind":"variable","name":"sourceHeight","id":"sourceHeight","line":"431"},{"ref":{"name":"double","refId":"dart.core/double"},"kind":"variable","name":"targetLeft","id":"targetLeft","line":"433"},{"ref":{"name":"double","refId":"dart.core/double"},"kind":"variable","name":"targetTop","id":"targetTop","line":"433"},{"ref":{"name":"double","refId":"dart.core/double"},"kind":"variable","name":"targetRight","id":"targetRight","line":"433"},{"ref":{"name":"double","refId":"dart.core/double"},"kind":"variable","name":"targetBottom","id":"targetBottom","line":"433"},{"ref":{"name":"double","refId":"dart.core/double"},"kind":"variable","name":"targetWidth","id":"targetWidth","line":"433"},{"ref":{"name":"double","refId":"dart.core/double"},"kind":"variable","name":"targetHeight","id":"targetHeight","line":"433"},{"ref":{"name":"Alignment","refId":"dart_web_toolkit_layout/Alignment"},"kind":"variable","name":"hPos","id":"hPos","line":"436"},{"ref":{"name":"Alignment","refId":"dart_web_toolkit_layout/Alignment"},"kind":"variable","name":"vPos","id":"vPos","line":"436"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"visible","id":"visible","line":"437"},{"kind":"constructor","name":"","id":"3()","children":[{"ref":{"name":"Element","refId":"dart.dom.html/Element"},"kind":"param","name":"container","id":"container"},{"ref":{"name":"Element","refId":"dart.dom.html/Element"},"kind":"param","name":"child","id":"child"},{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"userObject","id":"userObject"}],"line":"439"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/layout/layout.dart","line":"420"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"LayoutAnimationCallback","id":"LayoutAnimationCallback","comment":"\nCallback interface used by {@link Layout#layout(int, AnimationCallback)}\nto provide updates on animation progress.\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"onAnimationComplete","id":"onAnimationComplete0()","comment":"\nCalled immediately after the animation is complete, and the entire layout\nis in its final state.\n","line":"386"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"onLayout","id":"onLayout2()","comment":"\nCalled at each step of the animation, for each layer being laid out.\n\n@param layer the layer being laid out\n","children":[{"ref":{"name":"Layer","refId":"dart_web_toolkit_layout/Layer"},"kind":"param","name":"layer","id":"layer"},{"ref":{"name":"double","refId":"dart.core/double"},"kind":"param","name":"progress","id":"progress"}],"line":"393"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/layout/layout.dart","line":"380"},{"superclass":{"name":"Enum","refId":"dart_web_toolkit_util/Enum","arguments":[{"name":"String","refId":"dart_web_toolkit_layout/Alignment/String"}]},"kind":"class","name":"Alignment","id":"Alignment","comment":"\nUsed to specify the alignment of child elements within a layer.\n","children":[{"ref":{"name":"Alignment","refId":"dart_web_toolkit_layout/Alignment"},"isStatic":true,"kind":"variable","name":"BEGIN","id":"BEGIN","comment":"\nPositions an element at the beginning of a given axis.\n","line":"363"},{"ref":{"name":"Alignment","refId":"dart_web_toolkit_layout/Alignment"},"isStatic":true,"kind":"variable","name":"END","id":"END","comment":"\nPositions an element at the beginning of a given axis.\n","line":"368"},{"ref":{"name":"Alignment","refId":"dart_web_toolkit_layout/Alignment"},"isStatic":true,"kind":"variable","name":"STRETCH","id":"STRETCH","comment":"\nStretches an element to fill the layer on a given axis.\n","line":"373"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"String","refId":"dart_web_toolkit_layout/Alignment/String"},"kind":"param","name":"type","id":"type"}],"line":"358"},{"kind":"typeparam","name":"String","id":"String"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/layout/layout.dart","line":"356"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"Layout","id":"Layout","comment":"\nHelper class for laying out a container element and its children.\n\n<p>\nThis class is typically used by higher-level widgets to implement layout on\ntheir behalf. It is intended to wrap an element (usually a &lt;div&gt;), and\nlay its children out in a predictable fashion, automatically accounting for\nchanges to the parent's size, and for all elements' margins, borders, and\npadding.\n</p>\n\n<p>\nTo use this class, create a container element (again, usually a &lt;div&gt;)\nand pass it to {@link #Layout(Element)}. Rather than attaching child elements\ndirectly to the element managed by this {@link Layout}, use the\n{@link Layout#attachChild(Element)} method. This will attach the child\nelement and return a {@link Layout.Layer} object which is used to manage the\nchild.\n</p>\n\n<p>\nA separate {@link Layout.Layer} instance is associated with each child\nelement. There is a set of methods available on this class to manipulate the\nchild element's position and size. In order for changes to a layer to take\neffect, you must finally call one of {@link #layout()} or\n{@link #layout(int)}. This allows many changes to different layers to be\napplied efficiently, and to be animated.\n</p>\n\n<p>\nOn most browsers, this is implemented using absolute positioning. It also\ncontains extra logic to make IE6 work properly.\n</p>\n\n<p>\n<h3>Example</h3>\n{@example com.google.gwt.examples.LayoutExample}\n</p>\n\n<p>\nNOTE: This class will <em>only</em> work in standards mode, which requires\nthat the HTML page in which it is run have an explicit &lt;!DOCTYPE&gt;\ndeclaration.\n</p>\n\n<p>\nNOTE: This class is still very new, and its interface may change without\nwarning. Use at your own risk.\n</p>\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"assertIsChild","id":"assertIsChild1()","comment":"\nAsserts that the given child element is managed by this layout.\n\n@param elem the element to be tested\n","children":[{"ref":{"name":"Element","refId":"dart.dom.html/Element"},"kind":"param","name":"elem","id":"elem"}],"line":"79"},{"returnType":{"name":"Layer","refId":"dart_web_toolkit_layout/Layer"},"kind":"method","name":"attachChild","id":"attachChild3()","comment":"\nAttaches a child element to this layout.\n\n<p>\nThis method will attach the child to the layout, removing it from its\ncurrent parent element. Use the {@link Layer} it returns to manipulate the\nchild.\n</p>\n\n@param child the child to be attached\n@param before the child element before which to insert\n@param userObject an arbitrary object to be associated with this layer\n@return the {@link Layer} associated with the element\n","children":[{"ref":{"name":"Element","refId":"dart.dom.html/Element"},"kind":"param","name":"child","id":"child"},{"ref":{"name":"Element","refId":"dart.dom.html/Element"},"defaultValue":"null","isOptional":true,"isNamed":true,"kind":"param","name":"before","id":"before"},{"ref":{"name":"Object","refId":"dart.core/Object"},"isOptional":true,"isNamed":true,"kind":"param","name":"userObject","id":"userObject"}],"line":"97"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"fillParent","id":"fillParent0()","comment":"\nCauses the parent element to fill its own parent.\n\n<p>\nThis is most useful for top-level layouts that need to follow the size of\nanother element, such as the &lt;body&gt;.\n</p>\n","line":"112"},{"returnType":{"name":"double","refId":"dart.core/double"},"kind":"method","name":"getUnitSize","id":"getUnitSize2()","comment":"\nReturns the size of one unit, in pixels, in the context of this layout.\n\n<p>\nThis will work for any unit type, but be aware that certain unit types,\nsuch as {@link Unit#EM}, and {@link Unit#EX}, will return different values\nbased upon the parent's associated font size. {@link Unit#PCT} is dependent\nupon the parent's actual size, and the axis to be measured.\n</p>\n\n@param unit the unit type to be measured\n@param vertical whether the unit to be measured is on the vertical or\n         horizontal axis (this matters only for {@link Unit#PCT})\n@return the unit size, in pixels\n","children":[{"ref":{"name":"Unit","refId":"dart_web_toolkit_util/Unit"},"kind":"param","name":"unit","id":"unit"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"vertical","id":"vertical"}],"line":"131"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"layout","id":"layout2()","comment":"\nUpdates the layout by animating it over time, with a callback on each frame\nof the animation, and upon completion.\n\n@param duration the duration of the animation\n@param callback the animation callback\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"duration","id":"duration"},{"ref":{"name":"LayoutAnimationCallback","refId":"dart_web_toolkit_layout/LayoutAnimationCallback"},"defaultValue":"null","isOptional":true,"kind":"param","name":"callback","id":"callback"}],"line":"142"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"onAttach","id":"onAttach0()","comment":"\nThis method must be called when the parent element becomes attached to the\ndocument.\n\n@see #onDetach()\n","line":"202"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"onDetach","id":"onDetach0()","comment":"\nThis method must be called when the parent element becomes detached from\nthe document.\n\n@see #onAttach()\n","line":"212"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"removeChild","id":"removeChild1()","comment":"\nRemoves a child element from this layout.\n\n@param layer the layer associated with the child to be removed\n","children":[{"ref":{"name":"Layer","refId":"dart_web_toolkit_layout/Layer"},"kind":"param","name":"layer","id":"layer"}],"line":"221"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"adjustHorizontalConstraints","id":"adjustHorizontalConstraints2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"parentWidth","id":"parentWidth"},{"ref":{"name":"Layer","refId":"dart_web_toolkit_layout/Layer"},"kind":"param","name":"l","id":"l"}],"line":"230"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"adjustVerticalConstraints","id":"adjustVerticalConstraints2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"parentHeight","id":"parentHeight"},{"ref":{"name":"Layer","refId":"dart_web_toolkit_layout/Layer"},"kind":"param","name":"l","id":"l"}],"line":"291"},{"ref":{"name":"LayoutImpl","refId":"dart_web_toolkit_layout/LayoutImpl"},"kind":"variable","name":"impl","id":"impl","line":"58"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"Layer","refId":"dart_web_toolkit_layout/Layer"}]},"kind":"variable","name":"layers","id":"layers","line":"60"},{"ref":{"name":"Element","refId":"dart.dom.html/Element"},"kind":"variable","name":"parentElem","id":"parentElem","line":"61"},{"ref":{"name":"Animation","refId":"dart_web_toolkit_animation/Animation"},"kind":"variable","name":"animation","id":"animation","line":"62"},{"kind":"constructor","name":"","id":"1()","comment":"\nConstructs a new layout associated with the given parent element.\n\n@param parent the element to serve as the layout parent\n","children":[{"ref":{"name":"Element","refId":"dart.dom.html/Element"},"kind":"param","name":"parent","id":"parent"}],"line":"69"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/layout/layout.dart","line":"56"}],"uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/layout.dart","line":"7"}
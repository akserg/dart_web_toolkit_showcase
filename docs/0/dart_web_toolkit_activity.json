{"dependencies":[{"id":"dart_web_toolkit_place","comment":"\nDart Web Toolkit Place library.\n","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/place.dart","children":[{"isAbstract":true,"superclass":{"refId":"dart_web_toolkit_event/EventHandler","name":"EventHandler"},"id":"PlaceChangeRequestEventHandler","comment":"\nImplemented by handlers of PlaceChangeRequestEvent.\n","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/place/place_change_request_event_handler.dart","name":"PlaceChangeRequestEventHandler","children":[{"returnType":{"refId":"void","name":"void"},"id":"onPlaceChangeRequest1()","comment":"\nCalled when a {@link PlaceChangeRequestEvent} is fired.\n\n@param event the {@link PlaceChangeRequestEvent}\n","name":"onPlaceChangeRequest","children":[{"ref":{"refId":"dart_web_toolkit_place/PlaceChangeRequestEvent","name":"PlaceChangeRequestEvent"},"id":"event","name":"event","kind":"param"}],"line":"15","kind":"method"}],"line":"9","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart_web_toolkit_event/EventHandler","name":"EventHandler"},"id":"PlaceChangeEventHandler","comment":"\nImplemented by handlers of PlaceChangeEvent.\n","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/place/place_change_event_handler.dart","name":"PlaceChangeEventHandler","children":[{"returnType":{"refId":"void","name":"void"},"id":"onPlaceChange1()","comment":"\nCalled when a {@link PlaceChangeEvent} is fired.\n\n@param event the {@link PlaceChangeEvent}\n","name":"onPlaceChange","children":[{"ref":{"refId":"dart_web_toolkit_place/PlaceChangeEvent","name":"PlaceChangeEvent"},"id":"event","name":"event","kind":"param"}],"line":"16","kind":"method"}],"line":"10","kind":"class"}],"line":"7","kind":"library"},{"id":"dart.core","comment":"\n\nBuilt-in types, collections,\nand other core functionality for every Dart program.\n\nThis library is automatically imported.\n\nSome classes in this library,\nsuch as [String] and [num],\nsupport Dart's built-in data types.\nOther classes, such as [List] and [Map], provide data structures\nfor managing collections of objects.\nAnd still other classes represent commonly used types of data\nsuch as URIs, dates and times, and errors.\n\n## Numbers and booleans\n\n[int] and [double] provide support for Dart's built-in numerical data types:\nintegers and double-precision floating point numbers, respectively.\nAn object of type [bool] is either true or false.\nVariables of these types can be constructed from literals:\n\n    int meaningOfLife = 42;\n    double valueOfPi  = 3.141592;\n    bool visible      = true;\n\n## Strings and regular expressions\n\nA [String] is immutable and represents a sequence of characters.\n\n    String shakespeareQuote = \"All the world's a stage, ...\";\n\n[StringBuffer] provides a way to construct strings efficiently.\n\n    StringBuffer moreShakespeare = new StringBuffer();\n    moreShakespeare.write('And all the men and women ');\n    moreShakespeare.write('merely players; ...');\n\nThe String and StringBuffer classes implement string concatenation,\ninterpolation, and other string manipulation features.\n\n    String philosophy = 'Live on ';\n    String get palindrome => philosophy + philosophy.split('').reversed.join();\n\n[RegExp] implements Dart regular expressions,\nwhich provide a grammar for matching patterns within text.\nFor example, here's a regular expression that matches\na string of one or more digits:\n\n    var numbers = new RegExp(r'\\d+');\n\nDart regular expressions have the same syntax and semantics as\nJavaScript regular expressions. See\n<http://ecma-international.org/ecma-262/5.1/#sec-15.10>\nfor the specification of JavaScript regular expressions.\n\n## Collections\n\nThe dart:core library provides basic collections,\nsuch as [List], [Map], and [Set].\n\nA List is an ordered collection of objects, with a length.\nLists are sometimes called arrays.\nUse a List when you need to access objects by index.\n\n    List superheroes = [ 'Batman', 'Superman', 'Harry Potter' ];\n\nA Set is an unordered collection of unique objects.\nYou cannot get an item by index (position).\nAdding a duplicate item has no effect.\n\n    Set villians = new Set();\n    villians.add('Joker');\n    villians.addAll( ['Lex Luther', 'Voldemort'] );\n\nA Map is an unordered collection of key-value pairs.\nMaps are sometimes called associative arrays because\nmaps associate a key to some value for easy retrieval.\nKeys are unique.\nUse a Map when you need to access objects\nby a unique identifier.\n\n    Map sidekicks = { 'Batman': 'Robin',\n                      'Superman': 'Lois Lane',\n                      'Harry Potter': 'Ron and Hermione' };\n\nIn addition to these classes,\ndart:core contains [Iterable],\nan interface that defines functionality\ncommon in collections of objects.\nExamples include the ability\nto run a function on each element in the collection,\nto apply a test to each element, \nto retrieve an object, and to determine length.\n\nIterable is implemented by List and Set,\nand used by Map for its keys and values.\n\nFor other kinds of collections, check out the\n[dart:collection](#dart-collection) library.\n\n## Date and time\n\nUse [DateTime] to represent a point in time\nand [Duration] to represent a span of time.\n\nYou can create DateTime objects with constructors\nor by parsing a correctly formatted string.\n\n    DateTime now = new DateTime.now();\n    DateTime berlinWallFell = new DateTime(1989, 11, 9);\n    DateTime moonLanding = DateTime.parse(\"1969-07-20\");\n\nCreate a Duration object specifying the individual time units.\n\n    Duration timeRemaining = new Duration(hours:56, minutes:14);\n\nIn addition to DateTime and Duration,\ndart:core contains the [Stopwatch] class for measuring elapsed time.\n    \n## Uri\n\nA [Uri] object represents a uniform resource identifier,\nwhich identifies a resource on the web.\n\n    Uri dartlang = Uri.parse('http://dartlang.org/');\n    \n## Errors\n\nThe [Error] class represents the occurrence of an error\nduring runtime.\nSubclasses of this class represent specific kinds of errors.\n\n## Other documentation\n\nFor more information about how to use the built-in types, refer to\n[Built-in Types](http://www.dartlang.org/docs/dart-up-and-running/contents/ch02.html#built-in-types)\nin Chapter 2 of\n[Dart: Up and Running](http://www.dartlang.org/docs/dart-up-and-running/).\n\nAlso, see\n[dart:core - Numbers, Collections, Strings, and More](http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-dartcore---strings-collections-and-more)\nfor more coverage of classes in this package.\n\nThe \n[Dart Language Specification](https://www.dartlang.org/docs/spec/)\nprovides technical details.\n","uri":"dart-sdk/lib/core/core.dart","name":"dart:core","children":[{"id":"Object","comment":"\nEverything in Dart is an [Object].\n","uri":"dart-sdk/lib/core/object.dart","name":"Object","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"id":"==1()","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nOverride this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:\n\n * Total: It must return a boolean for all arguments. It should never throw\n   or return `null`.\n\n * Reflexive: For all objects `o`, `o == o` must be true.\n\n * Symmetric: For all objects `o1` and `o2`, `o1 == o2` and `o2 == o1` must\n   either both be true, or both be false.\n\n * Transitive: For all objects `o1`, `o2`, and `o3`, if `o1 == o2` and\n   `o2 == o3` are true, then `o1 == o3` must be true.\n\nThe method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","name":"==","children":[{"id":"other","name":"other","kind":"param"}],"line":"48","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"toString0()","comment":"\nReturns a string representation of this object.\n","name":"toString","line":"67","kind":"method"},{"id":"noSuchMethod1()","comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","name":"noSuchMethod","children":[{"ref":{"refId":"dart.core/Invocation","name":"Invocation"},"id":"invocation","name":"invocation","kind":"param"}],"line":"79","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"hashCode","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","name":"hashCode","line":"62","kind":"property"},{"ref":{"refId":"dart.core/Type","name":"Type"},"id":"runtimeType","comment":"\nA representation of the runtime type of the object.\n","name":"runtimeType","line":"84","kind":"property"},{"id":"0()","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","name":"","line":"18","kind":"constructor"}],"line":"10","kind":"class"}],"line":"153","kind":"library"},{"id":"dart_web_toolkit_event","comment":"\nDart Web Toolkit Event library.\n","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/event.dart","children":[{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"EventHandler","comment":"\nMarker interface for event handlers. All stock GWT Widget and dom event\nhandlers extend [EventHandler].\n","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/event/event_handler.dart","name":"EventHandler","line":"10","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"HandlerRegistration","comment":"\nRegistration objects returned when an event handler is bound (e.g. via\n[EventBus#addHandler]), used to deregister.\n\nA tip: to make a handler deregister itself try something like the following:\n<code><pre>new MyHandler() {\n HandlerRegistration reg = MyEvent.register(eventBus, this);\n\n public void onMyThing(MyEvent event) {\n   {@literal /}* do your thing *{@literal /}\n   reg.removeHandler();\n }\n};\n</pre></code>\n","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/event/handler_registration.dart","name":"HandlerRegistration","children":[{"returnType":{"refId":"void","name":"void"},"id":"removeHandler0()","comment":"\nDeregisters the handler associated with this registration object if the\nhandler is still attached to the event source. If the handler is no longer\nattached to the event source, this is a no-op.\n","name":"removeHandler","line":"28","kind":"method"}],"line":"21","kind":"class"}],"line":"7","kind":"library"},{"id":"dart_web_toolkit_ui","comment":"\nDart Web Toolkit UI library.\n","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/ui.dart","children":[{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"AcceptsOneWidget","comment":"\nImplemented by displays that can be given accept an {@link IsWidget}\nto show.\n","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/ui/accepts_one_widget.dart","name":"AcceptsOneWidget","children":[{"returnType":{"refId":"void","name":"void"},"id":"setWidgetIsWidget1()","comment":"\nSet the only widget of the receiver, replacing the previous\nwidget if there was one.\n\n@param w the widget, or <code>null</code> to remove the widget\n\n@see SimplePanel\n","name":"setWidgetIsWidget","children":[{"ref":{"refId":"dart_web_toolkit_ui/IsWidget","name":"IsWidget"},"id":"w","name":"w","kind":"param"}],"line":"20","kind":"method"}],"line":"10","kind":"class"}],"line":"7","kind":"library"}],"id":"dart_web_toolkit_activity","comment":"\nDart Web Toolkit Activity library.\nClasses used to implement app navigation.\n","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/activity.dart","children":[{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"ActivityMapperFilter","comment":"\nImplemented by objects that want to interpret one place as another.\n","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/activity/filtered_activity_mapper.dart","name":"ActivityMapperFilter","children":[{"returnType":{"refId":"dart_web_toolkit_place/Place","name":"Place"},"id":"filter1()","comment":"\nReturns the filtered interpretation of the given {@link Place}.\n\n@param place the input {@link Place}.\n@return the output {@link Place}.\n","name":"filter","children":[{"ref":{"refId":"dart_web_toolkit_place/Place","name":"Place"},"id":"place","name":"place","kind":"param"}],"line":"42","kind":"method"}],"line":"35","kind":"class"},{"interfaces":[{"refId":"dart_web_toolkit_activity/ActivityMapper","name":"ActivityMapper"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"FilteredActivityMapper","comment":"\nWraps an activity mapper and applies a filter to the place objects that it\nsees.\n","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/activity/filtered_activity_mapper.dart","name":"FilteredActivityMapper","children":[{"returnType":{"refId":"dart_web_toolkit_activity/Activity","name":"Activity"},"id":"getActivity1()","name":"getActivity","children":[{"ref":{"refId":"dart_web_toolkit_place/Place","name":"Place"},"id":"place","name":"place","kind":"param"}],"line":"27","kind":"method"},{"ref":{"refId":"dart_web_toolkit_activity/ActivityMapperFilter","name":"ActivityMapperFilter"},"isFinal":true,"id":"filter","name":"filter","line":"16","kind":"variable"},{"ref":{"refId":"dart_web_toolkit_activity/ActivityMapper","name":"ActivityMapper"},"isFinal":true,"id":"wrapped","name":"wrapped","line":"17","kind":"variable"},{"id":"2()","comment":"\nConstructs a FilteredActivityMapper object.\n\n@param filter a Filter object\n@param wrapped an ActivityMapper object\n","name":"","children":[{"initializedField":{"refId":"dart_web_toolkit_activity/FilteredActivityMapper/filter","name":"filter"},"ref":{"refId":"dart_web_toolkit_activity/ActivityMapperFilter","name":"ActivityMapperFilter"},"id":"filter","name":"filter","kind":"param"},{"initializedField":{"refId":"dart_web_toolkit_activity/FilteredActivityMapper/wrapped","name":"wrapped"},"ref":{"refId":"dart_web_toolkit_activity/ActivityMapper","name":"ActivityMapper"},"id":"wrapped","name":"wrapped","kind":"param"}],"line":"25","kind":"constructor"}],"line":"14","kind":"class"},{"interfaces":[{"refId":"dart_web_toolkit_activity/ActivityMapper","name":"ActivityMapper"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"CachingActivityMapper","comment":"\nWraps another {@link ActivityMapper} and caches the last activity it\nreturned, to be re-used if we see the same place twice.\n","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/activity/caching_activity_mapper.dart","name":"CachingActivityMapper","children":[{"returnType":{"refId":"dart_web_toolkit_activity/Activity","name":"Activity"},"id":"getActivity1()","name":"getActivity","children":[{"ref":{"refId":"dart_web_toolkit_place/Place","name":"Place"},"id":"place","name":"place","kind":"param"}],"line":"28","kind":"method"},{"ref":{"refId":"dart_web_toolkit_activity/ActivityMapper","name":"ActivityMapper"},"isFinal":true,"id":"wrapped","name":"wrapped","line":"16","kind":"variable"},{"ref":{"refId":"dart_web_toolkit_place/Place","name":"Place"},"id":"lastPlace","name":"lastPlace","line":"18","kind":"variable"},{"ref":{"refId":"dart_web_toolkit_activity/Activity","name":"Activity"},"id":"lastActivity","name":"lastActivity","line":"19","kind":"variable"},{"id":"1()","comment":"\nConstructs a CachingActivityMapper object.\n\n@param wrapped an ActivityMapper object\n","name":"","children":[{"initializedField":{"refId":"dart_web_toolkit_activity/CachingActivityMapper/wrapped","name":"wrapped"},"ref":{"refId":"dart_web_toolkit_activity/ActivityMapper","name":"ActivityMapper"},"id":"wrapped","name":"wrapped","kind":"param"}],"line":"26","kind":"constructor"}],"line":"14","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"ActivityMapper","comment":"\nFinds the activity to run for a given {@link Place}, used to configure\nan {@link ActivityManager}.\n","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/activity/activity_mapper.dart","name":"ActivityMapper","children":[{"returnType":{"refId":"dart_web_toolkit_activity/Activity","name":"Activity"},"id":"getActivity1()","comment":"\nReturns the activity to run for the given {@link Place}, or null.\n\n@param place a Place object\n","name":"getActivity","children":[{"ref":{"refId":"dart_web_toolkit_place/Place","name":"Place"},"id":"place","name":"place","kind":"param"}],"line":"20","kind":"method"}],"line":"14","kind":"class"},{"interfaces":[{"refId":"dart_web_toolkit_event/HandlerRegistration","name":"HandlerRegistration"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"_ActivityHandlerRegistration","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/activity/activity_manager.dart","name":"_ActivityHandlerRegistration","isPrivate":true,"children":[{"returnType":{"refId":"void","name":"void"},"id":"removeHandler0()","name":"removeHandler","line":"256","kind":"method"},{"ref":{"refId":"dart_web_toolkit_event/HandlerRegistration","name":"HandlerRegistration"},"isFinal":true,"id":"_placeReg","name":"_placeReg","isPrivate":true,"line":"251","kind":"variable"},{"ref":{"refId":"dart_web_toolkit_event/HandlerRegistration","name":"HandlerRegistration"},"isFinal":true,"id":"_placeRequestReg","name":"_placeRequestReg","isPrivate":true,"line":"252","kind":"variable"},{"id":"2()","name":"","children":[{"initializedField":{"refId":"dart_web_toolkit_activity/_ActivityHandlerRegistration/_placeReg","name":"_placeReg"},"ref":{"refId":"dart_web_toolkit_event/HandlerRegistration","name":"HandlerRegistration"},"id":"_placeReg","name":"_placeReg","isPrivate":true,"kind":"param"},{"initializedField":{"refId":"dart_web_toolkit_activity/_ActivityHandlerRegistration/_placeRequestReg","name":"_placeRequestReg"},"ref":{"refId":"dart_web_toolkit_event/HandlerRegistration","name":"HandlerRegistration"},"id":"_placeRequestReg","name":"_placeRequestReg","isPrivate":true,"kind":"param"}],"line":"254","kind":"constructor"}],"line":"249","kind":"class"},{"superclass":{"refId":"dart_web_toolkit_activity/AbstractActivity","name":"AbstractActivity"},"id":"_AbstractActivity","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/activity/activity_manager.dart","name":"_AbstractActivity","isPrivate":true,"children":[{"returnType":{"refId":"void","name":"void"},"id":"start2()","name":"start","children":[{"ref":{"refId":"dart_web_toolkit_ui/AcceptsOneWidget","name":"AcceptsOneWidget"},"id":"panel","name":"panel","kind":"param"},{"ref":{"refId":"dart_web_toolkit_event/EventBus","name":"EventBus"},"id":"eventBus","name":"eventBus","kind":"param"}],"line":"245","kind":"method"}],"line":"244","kind":"class"},{"interfaces":[{"refId":"dart_web_toolkit_ui/AcceptsOneWidget","name":"AcceptsOneWidget"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"_ProtectedDisplay","comment":"\nWraps our real display to prevent an Activity from taking it over if it is\nnot the currentActivity.\n","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/activity/activity_manager.dart","name":"_ProtectedDisplay","isPrivate":true,"children":[{"returnType":{"refId":"void","name":"void"},"id":"setWidgetIsWidget1()","name":"setWidgetIsWidget","children":[{"ref":{"refId":"dart_web_toolkit_ui/IsWidget","name":"IsWidget"},"id":"view","name":"view","kind":"param"}],"line":"236","kind":"method"},{"ref":{"refId":"dart_web_toolkit_activity/Activity","name":"Activity"},"isFinal":true,"id":"activity","name":"activity","line":"231","kind":"variable"},{"ref":{"refId":"dart_web_toolkit_activity/ActivityManager","name":"ActivityManager"},"isFinal":true,"id":"_manager","name":"_manager","isPrivate":true,"line":"232","kind":"variable"},{"id":"2()","name":"","children":[{"initializedField":{"refId":"dart_web_toolkit_activity/_ProtectedDisplay/_manager","name":"_manager"},"ref":{"refId":"dart_web_toolkit_activity/ActivityManager","name":"ActivityManager"},"id":"_manager","name":"_manager","isPrivate":true,"kind":"param"},{"initializedField":{"refId":"dart_web_toolkit_activity/_ProtectedDisplay/activity","name":"activity"},"ref":{"refId":"dart_web_toolkit_activity/Activity","name":"Activity"},"id":"activity","name":"activity","kind":"param"}],"line":"234","kind":"constructor"}],"line":"229","kind":"class"},{"interfaces":[{"refId":"dart_web_toolkit_place/PlaceChangeRequestEventHandler","name":"PlaceChangeRequestEventHandler"},{"refId":"dart_web_toolkit_place/PlaceChangeEventHandler","name":"PlaceChangeEventHandler"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"ActivityManager","comment":"\nManages {@link Activity} objects that should be kicked off in response to\n{@link PlaceChangeEvent} events. Each activity can start itself\nasynchronously, and provides a widget to be shown when it's ready to run.\n","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/activity/activity_manager.dart","name":"ActivityManager","children":[{"returnType":{"refId":"dart_web_toolkit_event/EventBus","name":"EventBus"},"id":"getActiveEventBus0()","comment":"\nReturns an event bus which is in use by the currently running activity.\n<p>\nAny handlers attached to the returned event bus will be de-registered when\nthe current activity is stopped.\n\n@return the event bus used by the current activity\n","name":"getActiveEventBus","line":"57","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"onPlaceChange1()","comment":"\nDeactivate the current activity, find the next one from our ActivityMapper,\nand start it.\n<p>\nThe current activity's widget will be hidden immediately, which can cause\nflicker if the next activity provides its widget asynchronously. That can\nbe minimized by decent caching. Perenially slow activities might mitigate\nthis by providing a widget immediately, with some kind of \"loading\"\ntreatment.\n","name":"onPlaceChange","children":[{"ref":{"refId":"dart_web_toolkit_place/PlaceChangeEvent","name":"PlaceChangeEvent"},"id":"event","name":"event","kind":"param"}],"line":"71","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"onPlaceChangeRequest1()","comment":"\nReject the place change if the current activity is not willing to stop.\n\n@see com.google.gwt.place.shared.PlaceChangeRequestEvent.Handler#onPlaceChangeRequest(PlaceChangeRequestEvent)\n","name":"onPlaceChangeRequest","children":[{"ref":{"refId":"dart_web_toolkit_place/PlaceChangeRequestEvent","name":"PlaceChangeRequestEvent"},"id":"event","name":"event","kind":"param"}],"line":"133","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"setDisplay1()","comment":"\nSets the display for the receiver, and has the side effect of starting or\nstopping its monitoring the event bus for place change events.\n<p>\nIf you are disposing of an ActivityManager, it is important to call\nsetDisplay(null) to get it to deregister from the event bus, so that it can\nbe garbage collected.\n\n@param display an instance of AcceptsOneWidget\n","name":"setDisplay","children":[{"ref":{"refId":"dart_web_toolkit_ui/AcceptsOneWidget","name":"AcceptsOneWidget"},"id":"display","name":"display","kind":"param"}],"line":"147","kind":"method"},{"returnType":{"refId":"dart_web_toolkit_activity/Activity","name":"Activity"},"id":"getNextActivity1()","name":"getNextActivity","children":[{"ref":{"refId":"dart_web_toolkit_place/PlaceChangeEvent","name":"PlaceChangeEvent"},"id":"event","name":"event","kind":"param"}],"line":"156","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"showWidget1()","name":"showWidget","children":[{"ref":{"refId":"dart_web_toolkit_ui/IsWidget","name":"IsWidget"},"id":"view","name":"view","kind":"param"}],"line":"168","kind":"method"},{"returnType":{"refId":"dart.core/Exception","name":"Exception"},"id":"tryStart0()","name":"tryStart","line":"174","kind":"method"},{"returnType":{"refId":"dart.core/Exception","name":"Exception"},"id":"tryStopOrCancel1()","name":"tryStopOrCancel","children":[{"ref":{"refId":"dart.core/bool","name":"bool"},"id":"stop","name":"stop","kind":"param"}],"line":"189","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"updateHandlers1()","name":"updateHandlers","children":[{"ref":{"refId":"dart.core/bool","name":"bool"},"id":"activate","name":"activate","kind":"param"}],"line":"209","kind":"method"},{"ref":{"refId":"dart_web_toolkit_activity/Activity","name":"Activity"},"isFinal":true,"isStatic":true,"id":"NULL_ACTIVITY","name":"NULL_ACTIVITY","line":"17","kind":"variable"},{"ref":{"refId":"dart_web_toolkit_activity/ActivityMapper","name":"ActivityMapper"},"isFinal":true,"id":"mapper","name":"mapper","line":"19","kind":"variable"},{"ref":{"refId":"dart_web_toolkit_event/EventBus","name":"EventBus"},"isFinal":true,"id":"eventBus","name":"eventBus","line":"21","kind":"variable"},{"ref":{"refId":"dart_web_toolkit_event/ResettableEventBus","name":"ResettableEventBus"},"id":"stopperedEventBus","name":"stopperedEventBus","line":"27","kind":"variable"},{"ref":{"refId":"dart_web_toolkit_activity/Activity","name":"Activity"},"id":"currentActivity","name":"currentActivity","line":"29","kind":"variable"},{"ref":{"refId":"dart_web_toolkit_ui/AcceptsOneWidget","name":"AcceptsOneWidget"},"id":"display","name":"display","line":"31","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"id":"startingNext","name":"startingNext","line":"33","kind":"variable"},{"ref":{"refId":"dart_web_toolkit_event/HandlerRegistration","name":"HandlerRegistration"},"id":"handlerRegistration","name":"handlerRegistration","line":"35","kind":"variable"},{"id":"2()","comment":"\nCreate an ActivityManager. Next call {@link #setDisplay}.\n\n@param mapper finds the {@link Activity} for a given\n         {@link com.google.gwt.place.shared.Place}\n@param eventBus source of {@link PlaceChangeEvent} and\n         {@link PlaceChangeRequestEvent} events.\n","name":"","children":[{"initializedField":{"refId":"dart_web_toolkit_activity/ActivityManager/mapper","name":"mapper"},"ref":{"refId":"dart_web_toolkit_activity/ActivityMapper","name":"ActivityMapper"},"id":"mapper","name":"mapper","kind":"param"},{"initializedField":{"refId":"dart_web_toolkit_activity/ActivityManager/eventBus","name":"eventBus"},"ref":{"refId":"dart_web_toolkit_event/EventBus","name":"EventBus"},"id":"eventBus","name":"eventBus","kind":"param"}],"line":"45","kind":"constructor"}],"line":"15","kind":"class"},{"isAbstract":true,"interfaces":[{"refId":"dart_web_toolkit_activity/Activity","name":"Activity"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"AbstractActivity","comment":"\nSimple Activity implementation that is always willing to stop, and does\nnothing onStop and onCancel.\n","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/activity/abstract_activity.dart","name":"AbstractActivity","children":[{"returnType":{"refId":"dart.core/String","name":"String"},"id":"mayStop0()","name":"mayStop","line":"16","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"onCancel0()","name":"onCancel","line":"20","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"onStop0()","name":"onStop","line":"23","kind":"method"}],"line":"14","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"Activity","comment":"\nImplemented by objects that control a piece of user interface, with a life\ncycle managed by an {@link ActivityManager}, in response to\n{@link com.google.gwt.place.shared.PlaceChangeEvent} events as the user\nnavigates through the app.\n","uri":"file:///home/akserg/Projects/dart_web_toolkit/lib/src/activity/activity.dart","name":"Activity","children":[{"returnType":{"refId":"dart.core/String","name":"String"},"id":"mayStop0()","comment":"\nCalled when the user is trying to navigate away from this activity.\n\n@return A message to display to the user, e.g. to warn of unsaved work, or\n        null to say nothing\n","name":"mayStop","line":"23","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"onCancel0()","comment":"\nCalled when {@link #start} has not yet replied to its callback, but the\nuser has lost interest.\n","name":"onCancel","line":"29","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"onStop0()","comment":"\nCalled when the Activity's widget has been removed from view. All event\nhandlers it registered will have been removed before this method is called.\n","name":"onStop","line":"35","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"start2()","comment":"\nCalled when the Activity should ready its widget for the user. When the\nwidget is ready (typically after an RPC response has been received),\nreceiver should present it by calling\n{@link AcceptsOneWidget#setWidget} on the given panel.\n<p>\nAny handlers attached to the provided event bus will be de-registered when\nthe activity is stopped, so activities will rarely need to hold on to the\n{@link com.google.gwt.event.shared.HandlerRegistration HandlerRegistration}\ninstances returned by {@link EventBus#addHandler}.\n\n@param panel the panel to display this activity's widget when it is ready\n@param eventBus the event bus\n","name":"start","children":[{"ref":{"refId":"dart_web_toolkit_ui/AcceptsOneWidget","name":"AcceptsOneWidget"},"id":"panel","name":"panel","kind":"param"},{"ref":{"refId":"dart_web_toolkit_event/EventBus","name":"EventBus"},"id":"eventBus","name":"eventBus","kind":"param"}],"line":"51","kind":"method"}],"line":"16","kind":"class"}],"line":"8","kind":"library"}